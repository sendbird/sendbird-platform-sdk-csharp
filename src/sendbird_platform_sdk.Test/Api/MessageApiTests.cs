/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Api;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Test
{
    /// <summary>
    ///  Class for testing MessageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MessageApiTests
    {
        private MessageApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MessageApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MessageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MessageApi
            //Assert.IsInstanceOf(typeof(MessageApi), instance);
        }

        
        /// <summary>
        /// Test AddExtraDataToAMessage
        /// </summary>
        [Test]
        public void AddExtraDataToAMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //long messageId = null;
            //string apiToken = null;
            //AddExtraDataToAMessageRequest addExtraDataToAMessageRequest = null;
            //var response = instance.AddExtraDataToAMessage(channelType, channelUrl, messageId, apiToken, addExtraDataToAMessageRequest);
            //Assert.IsInstanceOf(typeof(AddExtraDataToAMessageResponse), response, "response is AddExtraDataToAMessageResponse");
        }
        
        /// <summary>
        /// Test DeleteAMessage
        /// </summary>
        [Test]
        public void DeleteAMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //long messageId = null;
            //string apiToken = null;
            //var response = instance.DeleteAMessage(channelType, channelUrl, messageId, apiToken);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetAMessage
        /// </summary>
        [Test]
        public void GetAMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //long messageId = null;
            //bool? includeReactions = null;
            //bool? includeThreadInfo = null;
            //bool? includeParentMessageInfo = null;
            //bool? includePollDetails = null;
            //bool? withSortedMetaArray = null;
            //string apiToken = null;
            //var response = instance.GetAMessage(channelType, channelUrl, messageId, includeReactions, includeThreadInfo, includeParentMessageInfo, includePollDetails, withSortedMetaArray, apiToken);
            //Assert.IsInstanceOf(typeof(SendbirdMessageResponse), response, "response is SendbirdMessageResponse");
        }
        
        /// <summary>
        /// Test GetTotalNumberOfMessagesInAChannel
        /// </summary>
        [Test]
        public void GetTotalNumberOfMessagesInAChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //string apiToken = null;
            //var response = instance.GetTotalNumberOfMessagesInAChannel(channelType, channelUrl, apiToken);
            //Assert.IsInstanceOf(typeof(GetTotalNumberOfMessagesInAChannelResponse), response, "response is GetTotalNumberOfMessagesInAChannelResponse");
        }
        
        /// <summary>
        /// Test ListMessages
        /// </summary>
        [Test]
        public void ListMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //long messageTs = null;
            //long messageId = null;
            //int? prevLimit = null;
            //int? nextLimit = null;
            //bool? include = null;
            //bool? reverse = null;
            //string senderId = null;
            //string senderIds = null;
            //string operatorFilter = null;
            //string customTypes = null;
            //string messageType = null;
            //bool? includingRemoved = null;
            //bool? includeReactions = null;
            //string includeReplyType = null;
            //bool? includeParentMessageInfo = null;
            //bool? includeThreadInfo = null;
            //bool? includePollDetails = null;
            //bool? withSortedMetaArray = null;
            //bool? showSubchannelMessagesOnly = null;
            //string userId = null;
            //string apiToken = null;
            //var response = instance.ListMessages(channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, includeReplyType, includeParentMessageInfo, includeThreadInfo, includePollDetails, withSortedMetaArray, showSubchannelMessagesOnly, userId, apiToken);
            //Assert.IsInstanceOf(typeof(ListMessagesResponse), response, "response is ListMessagesResponse");
        }
        
        /// <summary>
        /// Test MarkChannelMessagesAsRead
        /// </summary>
        [Test]
        public void MarkChannelMessagesAsReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //MarkChannelMessagesAsReadRequest markChannelMessagesAsReadRequest = null;
            //var response = instance.MarkChannelMessagesAsRead(channelUrl, apiToken, markChannelMessagesAsReadRequest);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test MigrateMessages
        /// </summary>
        [Test]
        public void MigrateMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string targetChannelUrl = null;
            //string apiToken = null;
            //MigrateMessagesRequest migrateMessagesRequest = null;
            //var response = instance.MigrateMessages(targetChannelUrl, apiToken, migrateMessagesRequest);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test RemoveExtraDataFromAMessage
        /// </summary>
        [Test]
        public void RemoveExtraDataFromAMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //long messageId = null;
            //string keys = null;
            //string apiToken = null;
            //var response = instance.RemoveExtraDataFromAMessage(channelType, channelUrl, messageId, keys, apiToken);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test SendAMessage
        /// </summary>
        [Test]
        public void SendAMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //string apiToken = null;
            //SendAMessageRequest sendAMessageRequest = null;
            //var response = instance.SendAMessage(channelType, channelUrl, apiToken, sendAMessageRequest);
            //Assert.IsInstanceOf(typeof(SendbirdMessageResponse), response, "response is SendbirdMessageResponse");
        }
        
        /// <summary>
        /// Test UpdateAMessage
        /// </summary>
        [Test]
        public void UpdateAMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //long messageId = null;
            //string apiToken = null;
            //UpdateAMessageRequest updateAMessageRequest = null;
            //var response = instance.UpdateAMessage(channelType, channelUrl, messageId, apiToken, updateAMessageRequest);
            //Assert.IsInstanceOf(typeof(SendbirdMessageResponse), response, "response is SendbirdMessageResponse");
        }
        
        /// <summary>
        /// Test UpdateExtraDataInAMessage
        /// </summary>
        [Test]
        public void UpdateExtraDataInAMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelType = null;
            //string channelUrl = null;
            //long messageId = null;
            //string apiToken = null;
            //UpdateExtraDataInAMessageRequest updateExtraDataInAMessageRequest = null;
            //var response = instance.UpdateExtraDataInAMessage(channelType, channelUrl, messageId, apiToken, updateExtraDataInAMessageRequest);
            //Assert.IsInstanceOf(typeof(UpdateExtraDataInAMessageResponse), response, "response is UpdateExtraDataInAMessageResponse");
        }
        
    }

}
