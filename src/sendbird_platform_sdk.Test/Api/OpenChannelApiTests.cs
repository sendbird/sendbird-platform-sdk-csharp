/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Api;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Test
{
    /// <summary>
    ///  Class for testing OpenChannelApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OpenChannelApiTests
    {
        private OpenChannelApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new OpenChannelApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OpenChannelApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' OpenChannelApi
            //Assert.IsInstanceOf(typeof(OpenChannelApi), instance);
        }

        
        /// <summary>
        /// Test CreateAnOpenChannel
        /// </summary>
        [Test]
        public void CreateAnOpenChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //CreateAnOpenChannelRequest createAnOpenChannelRequest = null;
            //var response = instance.CreateAnOpenChannel(apiToken, createAnOpenChannelRequest);
            //Assert.IsInstanceOf(typeof(SendbirdOpenChannel), response, "response is SendbirdOpenChannel");
        }
        
        /// <summary>
        /// Test DeleteAnOpenChannel
        /// </summary>
        [Test]
        public void DeleteAnOpenChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //var response = instance.DeleteAnOpenChannel(channelUrl, apiToken);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetAnOpenChannel
        /// </summary>
        [Test]
        public void GetAnOpenChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //bool? includeOperators = null;
            //var response = instance.GetAnOpenChannel(channelUrl, apiToken, includeOperators);
            //Assert.IsInstanceOf(typeof(SendbirdOpenChannel), response, "response is SendbirdOpenChannel");
        }
        
        /// <summary>
        /// Test ListChannelOperators
        /// </summary>
        [Test]
        public void ListChannelOperatorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string token = null;
            //int? limit = null;
            //string apiToken = null;
            //var response = instance.ListChannelOperators(channelUrl, token, limit, apiToken);
            //Assert.IsInstanceOf(typeof(ListOperatorsResponse), response, "response is ListOperatorsResponse");
        }
        
        /// <summary>
        /// Test ListOpenChannels
        /// </summary>
        [Test]
        public void ListOpenChannelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //string channelUrls = null;
            //int? limit = null;
            //string customTypes = null;
            //string nameContains = null;
            //string urlContains = null;
            //bool? showFrozen = null;
            //bool? showMetadata = null;
            //string apiToken = null;
            //var response = instance.ListOpenChannels(token, channelUrls, limit, customTypes, nameContains, urlContains, showFrozen, showMetadata, apiToken);
            //Assert.IsInstanceOf(typeof(ListOpenChannelsResponse), response, "response is ListOpenChannelsResponse");
        }
        
        /// <summary>
        /// Test RegisterOperators
        /// </summary>
        [Test]
        public void RegisterOperatorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //RegisterOperatorsToAGroupChannelRequest registerOperatorsToAGroupChannelRequest = null;
            //var response = instance.RegisterOperators(channelUrl, apiToken, registerOperatorsToAGroupChannelRequest);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UnregisterOperators
        /// </summary>
        [Test]
        public void UnregisterOperatorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string operatorIds = null;
            //bool? deleteAll = null;
            //string apiToken = null;
            //var response = instance.UnregisterOperators(channelUrl, operatorIds, deleteAll, apiToken);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateAnOpenChannel
        /// </summary>
        [Test]
        public void UpdateAnOpenChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //UpdateAnOpenChannelRequest updateAnOpenChannelRequest = null;
            //var response = instance.UpdateAnOpenChannel(channelUrl, apiToken, updateAnOpenChannelRequest);
            //Assert.IsInstanceOf(typeof(SendbirdOpenChannel), response, "response is SendbirdOpenChannel");
        }
        
    }

}
