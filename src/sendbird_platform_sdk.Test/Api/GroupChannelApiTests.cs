/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Api;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Test
{
    /// <summary>
    ///  Class for testing GroupChannelApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GroupChannelApiTests
    {
        private GroupChannelApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GroupChannelApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GroupChannelApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' GroupChannelApi
            //Assert.IsInstanceOf(typeof(GroupChannelApi), instance);
        }

        
        /// <summary>
        /// Test AcceptAnInvitation
        /// </summary>
        [Test]
        public void AcceptAnInvitationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //AcceptAnInvitationRequest acceptAnInvitationRequest = null;
            //var response = instance.AcceptAnInvitation(channelUrl, apiToken, acceptAnInvitationRequest);
            //Assert.IsInstanceOf(typeof(SendbirdGroupChannelDetail), response, "response is SendbirdGroupChannelDetail");
        }
        
        /// <summary>
        /// Test CancelTheRegistrationOfOperators
        /// </summary>
        [Test]
        public void CancelTheRegistrationOfOperatorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string operatorIds = null;
            //bool? deleteAll = null;
            //string apiToken = null;
            //var response = instance.CancelTheRegistrationOfOperators(channelUrl, operatorIds, deleteAll, apiToken);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test CheckIfMember
        /// </summary>
        [Test]
        public void CheckIfMemberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string userId = null;
            //string apiToken = null;
            //var response = instance.CheckIfMember(channelUrl, userId, apiToken);
            //Assert.IsInstanceOf(typeof(CheckIfMemberResponse), response, "response is CheckIfMemberResponse");
        }
        
        /// <summary>
        /// Test CreateAGroupChannel
        /// </summary>
        [Test]
        public void CreateAGroupChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //CreateAGroupChannelRequest createAGroupChannelRequest = null;
            //var response = instance.CreateAGroupChannel(apiToken, createAGroupChannelRequest);
            //Assert.IsInstanceOf(typeof(SendbirdGroupChannelDetail), response, "response is SendbirdGroupChannelDetail");
        }
        
        /// <summary>
        /// Test DeleteAGroupChannel
        /// </summary>
        [Test]
        public void DeleteAGroupChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //var response = instance.DeleteAGroupChannel(channelUrl, apiToken);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetAGroupChannel
        /// </summary>
        [Test]
        public void GetAGroupChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //bool? showDeliveryReceipt = null;
            //bool? showReadReceipt = null;
            //bool? showMember = null;
            //string memberActiveMode = null;
            //string userId = null;
            //string apiToken = null;
            //var response = instance.GetAGroupChannel(channelUrl, showDeliveryReceipt, showReadReceipt, showMember, memberActiveMode, userId, apiToken);
            //Assert.IsInstanceOf(typeof(GetAGroupChannelResponse), response, "response is GetAGroupChannelResponse");
        }
        
        /// <summary>
        /// Test HideAChannel
        /// </summary>
        [Test]
        public void HideAChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //HideAChannelRequest hideAChannelRequest = null;
            //var response = instance.HideAChannel(channelUrl, apiToken, hideAChannelRequest);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test InviteAsMembers
        /// </summary>
        [Test]
        public void InviteAsMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //InviteAsMembersRequest inviteAsMembersRequest = null;
            //var response = instance.InviteAsMembers(channelUrl, apiToken, inviteAsMembersRequest);
            //Assert.IsInstanceOf(typeof(InviteAsMembersResponse), response, "response is InviteAsMembersResponse");
        }
        
        /// <summary>
        /// Test JoinAChannel
        /// </summary>
        [Test]
        public void JoinAChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //JoinAChannelRequest joinAChannelRequest = null;
            //var response = instance.JoinAChannel(channelUrl, apiToken, joinAChannelRequest);
            //Assert.IsInstanceOf(typeof(SendbirdGroupChannelDetail), response, "response is SendbirdGroupChannelDetail");
        }
        
        /// <summary>
        /// Test LeaveAChannel
        /// </summary>
        [Test]
        public void LeaveAChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //LeaveAChannelRequest leaveAChannelRequest = null;
            //var response = instance.LeaveAChannel(channelUrl, apiToken, leaveAChannelRequest);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ListChannels
        /// </summary>
        [Test]
        public void ListChannelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //string token = null;
            //int? limit = null;
            //string distinctMode = null;
            //string publicMode = null;
            //string superMode = null;
            //long? createdAfter = null;
            //long? createdBefore = null;
            //bool? showEmpty = null;
            //bool? showMember = null;
            //bool? showDeliveryReceipt = null;
            //bool? showReadReceipt = null;
            //bool? showMetadata = null;
            //bool? showFrozen = null;
            //string order = null;
            //string metadataOrderKey = null;
            //string customTypes = null;
            //string customTypeStartswith = null;
            //string channelUrls = null;
            //string name = null;
            //string nameContains = null;
            //string nameStartswith = null;
            //string membersExactlyIn = null;
            //string membersIncludeIn = null;
            //string queryType = null;
            //string membersNickname = null;
            //string membersNicknameContains = null;
            //string metadataKey = null;
            //string metadataValues = null;
            //string metadataValueStartswith = null;
            //string metacounterKey = null;
            //string metacounterValues = null;
            //string metacounterValueGt = null;
            //string metacounterValueGte = null;
            //string metacounterValueLt = null;
            //string metacounterValueLte = null;
            //bool? includeSortedMetaarrayInLastMessage = null;
            //var response = instance.ListChannels(apiToken, token, limit, distinctMode, publicMode, superMode, createdAfter, createdBefore, showEmpty, showMember, showDeliveryReceipt, showReadReceipt, showMetadata, showFrozen, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, includeSortedMetaarrayInLastMessage);
            //Assert.IsInstanceOf(typeof(GroupChatListChannelsResponse), response, "response is GroupChatListChannelsResponse");
        }
        
        /// <summary>
        /// Test ListMembers
        /// </summary>
        [Test]
        public void ListMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string token = null;
            //int? limit = null;
            //string userId = null;
            //bool? showDeliveryReceipt = null;
            //bool? showReadReceipt = null;
            //bool? showMemberIsMuted = null;
            //string order = null;
            //string operatorFilter = null;
            //string memberStateFilter = null;
            //string mutedMemberFilter = null;
            //string memberActiveModeFilter = null;
            //string nicknameStartswith = null;
            //bool? includePushPreference = null;
            //string apiToken = null;
            //var response = instance.ListMembers(channelUrl, token, limit, userId, showDeliveryReceipt, showReadReceipt, showMemberIsMuted, order, operatorFilter, memberStateFilter, mutedMemberFilter, memberActiveModeFilter, nicknameStartswith, includePushPreference, apiToken);
            //Assert.IsInstanceOf(typeof(GroupChannelListMembersResponse), response, "response is GroupChannelListMembersResponse");
        }
        
        /// <summary>
        /// Test ListOperators
        /// </summary>
        [Test]
        public void ListOperatorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string token = null;
            //int? limit = null;
            //string apiToken = null;
            //var response = instance.ListOperators(channelUrl, token, limit, apiToken);
            //Assert.IsInstanceOf(typeof(ListOperatorsResponse), response, "response is ListOperatorsResponse");
        }
        
        /// <summary>
        /// Test RegisterOperatorsToAGroupChannel
        /// </summary>
        [Test]
        public void RegisterOperatorsToAGroupChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //RegisterOperatorsToAGroupChannelRequest registerOperatorsToAGroupChannelRequest = null;
            //var response = instance.RegisterOperatorsToAGroupChannel(channelUrl, apiToken, registerOperatorsToAGroupChannelRequest);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ResetChatHistory
        /// </summary>
        [Test]
        public void ResetChatHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //ResetChatHistoryRequest resetChatHistoryRequest = null;
            //var response = instance.ResetChatHistory(channelUrl, apiToken, resetChatHistoryRequest);
            //Assert.IsInstanceOf(typeof(ResetChatHistoryResponse), response, "response is ResetChatHistoryResponse");
        }
        
        /// <summary>
        /// Test StartTypingIndicators
        /// </summary>
        [Test]
        public void StartTypingIndicatorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //StartTypingIndicatorsRequest startTypingIndicatorsRequest = null;
            //var response = instance.StartTypingIndicators(channelUrl, apiToken, startTypingIndicatorsRequest);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test StopTypingIndicators
        /// </summary>
        [Test]
        public void StopTypingIndicatorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //StartTypingIndicatorsRequest startTypingIndicatorsRequest = null;
            //var response = instance.StopTypingIndicators(channelUrl, apiToken, startTypingIndicatorsRequest);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UnhideAChannel
        /// </summary>
        [Test]
        public void UnhideAChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string userId = null;
            //bool? shouldUnhideAll = null;
            //string apiToken = null;
            //var response = instance.UnhideAChannel(channelUrl, userId, shouldUnhideAll, apiToken);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateAGroupChannel
        /// </summary>
        [Test]
        public void UpdateAGroupChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelUrl = null;
            //string apiToken = null;
            //UpdateAGroupChannelRequest updateAGroupChannelRequest = null;
            //var response = instance.UpdateAGroupChannel(channelUrl, apiToken, updateAGroupChannelRequest);
            //Assert.IsInstanceOf(typeof(SendbirdGroupChannelDetail), response, "response is SendbirdGroupChannelDetail");
        }
        
    }

}
