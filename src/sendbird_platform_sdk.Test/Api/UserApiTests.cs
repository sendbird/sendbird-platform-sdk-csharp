/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Api;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' UserApi
            //Assert.IsInstanceOf(typeof(UserApi), instance);
        }

        
        /// <summary>
        /// Test AddARegistrationOrDeviceToken
        /// </summary>
        [Test]
        public void AddARegistrationOrDeviceTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string tokenType = null;
            //string apiToken = null;
            //AddARegistrationOrDeviceTokenRequest addARegistrationOrDeviceTokenRequest = null;
            //var response = instance.AddARegistrationOrDeviceToken(userId, tokenType, apiToken, addARegistrationOrDeviceTokenRequest);
            //Assert.IsInstanceOf(typeof(AddARegistrationOrDeviceTokenResponse), response, "response is AddARegistrationOrDeviceTokenResponse");
        }
        
        /// <summary>
        /// Test ChooseAPushNotificationContentTemplate
        /// </summary>
        [Test]
        public void ChooseAPushNotificationContentTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //ChooseAPushNotificationContentTemplateRequest chooseAPushNotificationContentTemplateRequest = null;
            //var response = instance.ChooseAPushNotificationContentTemplate(userId, apiToken, chooseAPushNotificationContentTemplateRequest);
            //Assert.IsInstanceOf(typeof(ChooseAPushNotificationContentTemplateResponse), response, "response is ChooseAPushNotificationContentTemplateResponse");
        }
        
        /// <summary>
        /// Test CreateAUser
        /// </summary>
        [Test]
        public void CreateAUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiToken = null;
            //CreateAUserRequest createAUserRequest = null;
            //var response = instance.CreateAUser(apiToken, createAUserRequest);
            //Assert.IsInstanceOf(typeof(SendbirdUser), response, "response is SendbirdUser");
        }
        
        /// <summary>
        /// Test CreateUserToken
        /// </summary>
        [Test]
        public void CreateUserTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //CreateUserTokenRequest createUserTokenRequest = null;
            //var response = instance.CreateUserToken(userId, apiToken, createUserTokenRequest);
            //Assert.IsInstanceOf(typeof(CreateUserTokenResponse), response, "response is CreateUserTokenResponse");
        }
        
        /// <summary>
        /// Test DeleteAUser
        /// </summary>
        [Test]
        public void DeleteAUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //var response = instance.DeleteAUser(userId, apiToken);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test GetChannelInvitationPreference
        /// </summary>
        [Test]
        public void GetChannelInvitationPreferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //var response = instance.GetChannelInvitationPreference(userId, apiToken);
            //Assert.IsInstanceOf(typeof(GetChannelInvitationPreferenceResponse), response, "response is GetChannelInvitationPreferenceResponse");
        }
        
        /// <summary>
        /// Test LeaveMyGroupChannels
        /// </summary>
        [Test]
        public void LeaveMyGroupChannelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //LeaveMyGroupChannelsRequest leaveMyGroupChannelsRequest = null;
            //var response = instance.LeaveMyGroupChannels(userId, apiToken, leaveMyGroupChannelsRequest);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test ListMyGroupChannels
        /// </summary>
        [Test]
        public void ListMyGroupChannelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //string token = null;
            //int? limit = null;
            //string distinctMode = null;
            //string publicMode = null;
            //string superMode = null;
            //long? createdAfter = null;
            //long? createdBefore = null;
            //bool? showEmpty = null;
            //bool? showMember = null;
            //bool? showDeliveryReceipt = null;
            //bool? showReadReceipt = null;
            //bool? showMetadata = null;
            //bool? showFrozen = null;
            //string order = null;
            //string metadataOrderKey = null;
            //string customTypes = null;
            //string customTypeStartswith = null;
            //string channelUrls = null;
            //string name = null;
            //string nameContains = null;
            //string nameStartswith = null;
            //string membersExactlyIn = null;
            //string membersIncludeIn = null;
            //string queryType = null;
            //string membersNickname = null;
            //string membersNicknameContains = null;
            //string membersNicknameStartswith = null;
            //string searchQuery = null;
            //string searchFields = null;
            //string metadataKey = null;
            //string metadataValues = null;
            //string metadataValueStartswith = null;
            //string metacounterKey = null;
            //string metacounterValues = null;
            //string metacounterValueGt = null;
            //string metacounterValueGte = null;
            //string metacounterValueLt = null;
            //string metacounterValueLte = null;
            //bool? includeSortedMetaarrayInLastMessage = null;
            //string hiddenMode = null;
            //string unreadFilter = null;
            //string memberStateFilter = null;
            //var response = instance.ListMyGroupChannels(userId, apiToken, token, limit, distinctMode, publicMode, superMode, createdAfter, createdBefore, showEmpty, showMember, showDeliveryReceipt, showReadReceipt, showMetadata, showFrozen, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, membersNicknameStartswith, searchQuery, searchFields, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, includeSortedMetaarrayInLastMessage, hiddenMode, unreadFilter, memberStateFilter);
            //Assert.IsInstanceOf(typeof(ListMyGroupChannelsResponse), response, "response is ListMyGroupChannelsResponse");
        }
        
        /// <summary>
        /// Test ListRegistrationOrDeviceTokens
        /// </summary>
        [Test]
        public void ListRegistrationOrDeviceTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string tokenType = null;
            //string apiToken = null;
            //var response = instance.ListRegistrationOrDeviceTokens(userId, tokenType, apiToken);
            //Assert.IsInstanceOf(typeof(ListRegistrationOrDeviceTokensResponse), response, "response is ListRegistrationOrDeviceTokensResponse");
        }
        
        /// <summary>
        /// Test ListUsers
        /// </summary>
        [Test]
        public void ListUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string token = null;
            //int? limit = null;
            //string activeMode = null;
            //bool? showBot = null;
            //string userIds = null;
            //string nickname = null;
            //string nicknameStartswith = null;
            //string metadatakey = null;
            //string metadatavaluesIn = null;
            //string apiToken = null;
            //var response = instance.ListUsers(token, limit, activeMode, showBot, userIds, nickname, nicknameStartswith, metadatakey, metadatavaluesIn, apiToken);
            //Assert.IsInstanceOf(typeof(ListUsersResponse), response, "response is ListUsersResponse");
        }
        
        /// <summary>
        /// Test MarkAllMessagesAsRead
        /// </summary>
        [Test]
        public void MarkAllMessagesAsReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //MarkAllMessagesAsReadRequest markAllMessagesAsReadRequest = null;
            //var response = instance.MarkAllMessagesAsRead(userId, apiToken, markAllMessagesAsReadRequest);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test RemoveARegistrationOrDeviceToken
        /// </summary>
        [Test]
        public void RemoveARegistrationOrDeviceTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string tokenType = null;
            //string token = null;
            //string apiToken = null;
            //var response = instance.RemoveARegistrationOrDeviceToken(userId, tokenType, token, apiToken);
            //Assert.IsInstanceOf(typeof(RemoveARegistrationOrDeviceTokenResponse), response, "response is RemoveARegistrationOrDeviceTokenResponse");
        }
        
        /// <summary>
        /// Test RemoveARegistrationOrDeviceTokenFromAnOwner
        /// </summary>
        [Test]
        public void RemoveARegistrationOrDeviceTokenFromAnOwnerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenType = null;
            //string token = null;
            //string apiToken = null;
            //var response = instance.RemoveARegistrationOrDeviceTokenFromAnOwner(tokenType, token, apiToken);
            //Assert.IsInstanceOf(typeof(List<MarkChannelMessagesAsReadRequest>), response, "response is List<MarkChannelMessagesAsReadRequest>");
        }
        
        /// <summary>
        /// Test RemoveAllRegistrationOrDeviceToken
        /// </summary>
        [Test]
        public void RemoveAllRegistrationOrDeviceTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //var response = instance.RemoveAllRegistrationOrDeviceToken(userId, apiToken);
            //Assert.IsInstanceOf(typeof(RemoveAllRegistrationOrDeviceTokenResponse), response, "response is RemoveAllRegistrationOrDeviceTokenResponse");
        }
        
        /// <summary>
        /// Test ResetPushPreferences
        /// </summary>
        [Test]
        public void ResetPushPreferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //var response = instance.ResetPushPreferences(userId, apiToken);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test UpdateAUser
        /// </summary>
        [Test]
        public void UpdateAUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //UpdateAUserRequest updateAUserRequest = null;
            //var response = instance.UpdateAUser(userId, apiToken, updateAUserRequest);
            //Assert.IsInstanceOf(typeof(SendbirdUser), response, "response is SendbirdUser");
        }
        
        /// <summary>
        /// Test UpdateChannelInvitationPreference
        /// </summary>
        [Test]
        public void UpdateChannelInvitationPreferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //UpdateChannelInvitationPreferenceRequest updateChannelInvitationPreferenceRequest = null;
            //var response = instance.UpdateChannelInvitationPreference(userId, apiToken, updateChannelInvitationPreferenceRequest);
            //Assert.IsInstanceOf(typeof(UpdateChannelInvitationPreferenceResponse), response, "response is UpdateChannelInvitationPreferenceResponse");
        }
        
        /// <summary>
        /// Test UpdateCountPreferenceOfAChannel
        /// </summary>
        [Test]
        public void UpdateCountPreferenceOfAChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string channelUrl = null;
            //string apiToken = null;
            //UpdateCountPreferenceOfAChannelRequest updateCountPreferenceOfAChannelRequest = null;
            //var response = instance.UpdateCountPreferenceOfAChannel(userId, channelUrl, apiToken, updateCountPreferenceOfAChannelRequest);
            //Assert.IsInstanceOf(typeof(UpdateCountPreferenceOfChannelByUrlResponse), response, "response is UpdateCountPreferenceOfChannelByUrlResponse");
        }
        
        /// <summary>
        /// Test UpdatePushPreferences
        /// </summary>
        [Test]
        public void UpdatePushPreferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //UpdatePushPreferencesRequest updatePushPreferencesRequest = null;
            //var response = instance.UpdatePushPreferences(userId, apiToken, updatePushPreferencesRequest);
            //Assert.IsInstanceOf(typeof(UpdatePushPreferencesResponse), response, "response is UpdatePushPreferencesResponse");
        }
        
        /// <summary>
        /// Test UpdatePushPreferencesForAChannel
        /// </summary>
        [Test]
        public void UpdatePushPreferencesForAChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string channelUrl = null;
            //string apiToken = null;
            //UpdatePushPreferencesForAChannelRequest updatePushPreferencesForAChannelRequest = null;
            //var response = instance.UpdatePushPreferencesForAChannel(userId, channelUrl, apiToken, updatePushPreferencesForAChannelRequest);
            //Assert.IsInstanceOf(typeof(UpdatePushPreferencesForAChannelResponse), response, "response is UpdatePushPreferencesForAChannelResponse");
        }
        
        /// <summary>
        /// Test ViewAUser
        /// </summary>
        [Test]
        public void ViewAUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //bool? includeUnreadCount = null;
            //string customTypes = null;
            //string superMode = null;
            //string apiToken = null;
            //var response = instance.ViewAUser(userId, includeUnreadCount, customTypes, superMode, apiToken);
            //Assert.IsInstanceOf(typeof(SendbirdUser), response, "response is SendbirdUser");
        }
        
        /// <summary>
        /// Test ViewCountPreferenceOfAChannel
        /// </summary>
        [Test]
        public void ViewCountPreferenceOfAChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string channelUrl = null;
            //string apiToken = null;
            //var response = instance.ViewCountPreferenceOfAChannel(userId, channelUrl, apiToken);
            //Assert.IsInstanceOf(typeof(ViewCountPreferenceOfAChannelResponse), response, "response is ViewCountPreferenceOfAChannelResponse");
        }
        
        /// <summary>
        /// Test ViewNumberOfChannelsWithUnreadMessages
        /// </summary>
        [Test]
        public void ViewNumberOfChannelsWithUnreadMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string customTypes = null;
            //string superMode = null;
            //string apiToken = null;
            //var response = instance.ViewNumberOfChannelsWithUnreadMessages(userId, customTypes, superMode, apiToken);
            //Assert.IsInstanceOf(typeof(ViewNumberOfChannelsWithUnreadMessagesResponse), response, "response is ViewNumberOfChannelsWithUnreadMessagesResponse");
        }
        
        /// <summary>
        /// Test ViewNumberOfUnreadMessages
        /// </summary>
        [Test]
        public void ViewNumberOfUnreadMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string customTypes = null;
            //string superMode = null;
            //string apiToken = null;
            //var response = instance.ViewNumberOfUnreadMessages(userId, customTypes, superMode, apiToken);
            //Assert.IsInstanceOf(typeof(ViewNumberOfUnreadMessagesResponse), response, "response is ViewNumberOfUnreadMessagesResponse");
        }
        
        /// <summary>
        /// Test ViewPushPreferences
        /// </summary>
        [Test]
        public void ViewPushPreferencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string apiToken = null;
            //var response = instance.ViewPushPreferences(userId, apiToken);
            //Assert.IsInstanceOf(typeof(ViewPushPreferencesResponse), response, "response is ViewPushPreferencesResponse");
        }
        
        /// <summary>
        /// Test ViewPushPreferencesForAChannel
        /// </summary>
        [Test]
        public void ViewPushPreferencesForAChannelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string channelUrl = null;
            //string apiToken = null;
            //var response = instance.ViewPushPreferencesForAChannel(userId, channelUrl, apiToken);
            //Assert.IsInstanceOf(typeof(ViewPushPreferencesForAChannelResponse), response, "response is ViewPushPreferencesForAChannelResponse");
        }
        
        /// <summary>
        /// Test ViewWhoOwnsARegistrationOrDeviceToken
        /// </summary>
        [Test]
        public void ViewWhoOwnsARegistrationOrDeviceTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenType = null;
            //string token = null;
            //string apiToken = null;
            //var response = instance.ViewWhoOwnsARegistrationOrDeviceToken(tokenType, token, apiToken);
            //Assert.IsInstanceOf(typeof(List<MarkChannelMessagesAsReadRequest>), response, "response is List<MarkChannelMessagesAsReadRequest>");
        }
        
    }

}
