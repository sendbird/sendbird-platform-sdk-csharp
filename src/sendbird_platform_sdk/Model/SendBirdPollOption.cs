/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SendBirdPollOption
    /// </summary>
    [DataContract]
    public partial class SendBirdPollOption :  IEquatable<SendBirdPollOption>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendBirdPollOption" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="id">id.</param>
        /// <param name="partialVoters">partialVoters.</param>
        /// <param name="pollId">pollId.</param>
        /// <param name="text">text.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="voteCount">voteCount.</param>
        public SendBirdPollOption(decimal createdAt = default(decimal), string createdBy = default, decimal id = default(decimal), List<SendBirdUser> partialVoters = default(List<SendBirdUser>), decimal pollId = default(decimal), string text = default, decimal updatedAt = default(decimal), decimal voteCount = default(decimal))
        {
            this.CreatedAt = createdAt;
            this.CreatedBy = createdBy;
            this.Id = id;
            this.PartialVoters = partialVoters;
            this.PollId = pollId;
            this.Text = text;
            this.UpdatedAt = updatedAt;
            this.VoteCount = voteCount;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public decimal CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal Id { get; set; }

        /// <summary>
        /// Gets or Sets PartialVoters
        /// </summary>
        [DataMember(Name="partial_voters", EmitDefaultValue=false)]
        public List<SendBirdUser> PartialVoters { get; set; }

        /// <summary>
        /// Gets or Sets PollId
        /// </summary>
        [DataMember(Name="poll_id", EmitDefaultValue=false)]
        public decimal PollId { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public decimal UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets VoteCount
        /// </summary>
        [DataMember(Name="vote_count", EmitDefaultValue=false)]
        public decimal VoteCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendBirdPollOption {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PartialVoters: ").Append(PartialVoters).Append("\n");
            sb.Append("  PollId: ").Append(PollId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  VoteCount: ").Append(VoteCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendBirdPollOption);
        }

        /// <summary>
        /// Returns true if SendBirdPollOption instances are equal
        /// </summary>
        /// <param name="input">Instance of SendBirdPollOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendBirdPollOption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PartialVoters == input.PartialVoters ||
                    this.PartialVoters != null &&
                    input.PartialVoters != null &&
                    this.PartialVoters.SequenceEqual(input.PartialVoters)
                ) && 
                (
                    this.PollId == input.PollId ||
                    (this.PollId != null &&
                    this.PollId.Equals(input.PollId))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.VoteCount == input.VoteCount ||
                    (this.VoteCount != null &&
                    this.VoteCount.Equals(input.VoteCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PartialVoters != null)
                    hashCode = hashCode * 59 + this.PartialVoters.GetHashCode();
                if (this.PollId != null)
                    hashCode = hashCode * 59 + this.PollId.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.VoteCount != null)
                    hashCode = hashCode * 59 + this.VoteCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
