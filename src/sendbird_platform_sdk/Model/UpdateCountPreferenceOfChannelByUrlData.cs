/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// UpdateCountPreferenceOfChannelByUrlData
    /// </summary>
    [DataContract]
    public partial class UpdateCountPreferenceOfChannelByUrlData :  IEquatable<UpdateCountPreferenceOfChannelByUrlData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCountPreferenceOfChannelByUrlData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateCountPreferenceOfChannelByUrlData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCountPreferenceOfChannelByUrlData" /> class.
        /// </summary>
        /// <param name="countPreference">Determines whether to only count the number of unread messages or the number of unread mentioned messages in the specified group channel. Only the one that is chosen to be preferenced will be counted and added to the total number count after the action. A value of off indicates that both read statuses will not be counted, while all indicates that both read statuses will be counted by the system. A value of unread_message_count_only indicates that only the user&#39;s unread messages will be counted in the channel while unread_mentioned_count_only indicates that only the user&#39;s unread mentioned messages will be counted. (Default: all) (required).</param>
        public UpdateCountPreferenceOfChannelByUrlData(string countPreference = default)
        {
            // to ensure "countPreference" is required (not null)
            if (countPreference == null)
            {
                throw new InvalidDataException("countPreference is a required property for UpdateCountPreferenceOfChannelByUrlData and cannot be null");
            }
            else
            {
                this.CountPreference = countPreference;
            }

        }

        /// <summary>
        /// Determines whether to only count the number of unread messages or the number of unread mentioned messages in the specified group channel. Only the one that is chosen to be preferenced will be counted and added to the total number count after the action. A value of off indicates that both read statuses will not be counted, while all indicates that both read statuses will be counted by the system. A value of unread_message_count_only indicates that only the user&#39;s unread messages will be counted in the channel while unread_mentioned_count_only indicates that only the user&#39;s unread mentioned messages will be counted. (Default: all)
        /// </summary>
        /// <value>Determines whether to only count the number of unread messages or the number of unread mentioned messages in the specified group channel. Only the one that is chosen to be preferenced will be counted and added to the total number count after the action. A value of off indicates that both read statuses will not be counted, while all indicates that both read statuses will be counted by the system. A value of unread_message_count_only indicates that only the user&#39;s unread messages will be counted in the channel while unread_mentioned_count_only indicates that only the user&#39;s unread mentioned messages will be counted. (Default: all)</value>
        [DataMember(Name="count_preference", EmitDefaultValue=true)]
        public string CountPreference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCountPreferenceOfChannelByUrlData {\n");
            sb.Append("  CountPreference: ").Append(CountPreference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCountPreferenceOfChannelByUrlData);
        }

        /// <summary>
        /// Returns true if UpdateCountPreferenceOfChannelByUrlData instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCountPreferenceOfChannelByUrlData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCountPreferenceOfChannelByUrlData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountPreference == input.CountPreference ||
                    (this.CountPreference != null &&
                    this.CountPreference.Equals(input.CountPreference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountPreference != null)
                    hashCode = hashCode * 59 + this.CountPreference.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
