/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// UpdateChannelMetacounterData
    /// </summary>
    [DataContract]
    public partial class UpdateChannelMetacounterData :  IEquatable<UpdateChannelMetacounterData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateChannelMetacounterData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateChannelMetacounterData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateChannelMetacounterData" /> class.
        /// </summary>
        /// <param name="metacounter">Specifies a &#x60;JSON&#x60; object that stores key-value items. The key must not have a comma (,) and its length is limited to 128 characters. The value must be an integer. This property can have up to 5 items. (required).</param>
        /// <param name="mode">Specifies how to calculate the item value of the metacounter. Acceptable values are increase, decrease, and set. If set to increase, increments the item value of the metacounter by the value specified in the metacounter property, while decrease decrements. set sets the item value to the specified value exactly. (Default: set).</param>
        /// <param name="upsert">upsert.</param>
        public UpdateChannelMetacounterData(string metacounter = default, string mode = default, bool upsert = default(bool))
        {
            // to ensure "metacounter" is required (not null)
            if (metacounter == null)
            {
                throw new InvalidDataException("metacounter is a required property for UpdateChannelMetacounterData and cannot be null");
            }
            else
            {
                this.Metacounter = metacounter;
            }

            this.Mode = mode;
            this.Upsert = upsert;
        }

        /// <summary>
        /// Specifies a &#x60;JSON&#x60; object that stores key-value items. The key must not have a comma (,) and its length is limited to 128 characters. The value must be an integer. This property can have up to 5 items.
        /// </summary>
        /// <value>Specifies a &#x60;JSON&#x60; object that stores key-value items. The key must not have a comma (,) and its length is limited to 128 characters. The value must be an integer. This property can have up to 5 items.</value>
        [DataMember(Name="metacounter", EmitDefaultValue=true)]
        public string Metacounter { get; set; }

        /// <summary>
        /// Specifies how to calculate the item value of the metacounter. Acceptable values are increase, decrease, and set. If set to increase, increments the item value of the metacounter by the value specified in the metacounter property, while decrease decrements. set sets the item value to the specified value exactly. (Default: set)
        /// </summary>
        /// <value>Specifies how to calculate the item value of the metacounter. Acceptable values are increase, decrease, and set. If set to increase, increments the item value of the metacounter by the value specified in the metacounter property, while decrease decrements. set sets the item value to the specified value exactly. (Default: set)</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets Upsert
        /// </summary>
        [DataMember(Name="upsert", EmitDefaultValue=false)]
        public bool Upsert { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateChannelMetacounterData {\n");
            sb.Append("  Metacounter: ").Append(Metacounter).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Upsert: ").Append(Upsert).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateChannelMetacounterData);
        }

        /// <summary>
        /// Returns true if UpdateChannelMetacounterData instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateChannelMetacounterData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateChannelMetacounterData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Metacounter == input.Metacounter ||
                    (this.Metacounter != null &&
                    this.Metacounter.Equals(input.Metacounter))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Upsert == input.Upsert ||
                    (this.Upsert != null &&
                    this.Upsert.Equals(input.Upsert))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Metacounter != null)
                    hashCode = hashCode * 59 + this.Metacounter.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Upsert != null)
                    hashCode = hashCode * 59 + this.Upsert.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
