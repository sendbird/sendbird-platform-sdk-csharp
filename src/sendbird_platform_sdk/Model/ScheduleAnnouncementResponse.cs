/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// ScheduleAnnouncementResponse
    /// </summary>
    [DataContract]
    public partial class ScheduleAnnouncementResponse :  IEquatable<ScheduleAnnouncementResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleAnnouncementResponse" /> class.
        /// </summary>
        /// <param name="uniqueId">uniqueId.</param>
        /// <param name="announcementGroup">announcementGroup.</param>
        /// <param name="message">message.</param>
        /// <param name="enablePush">enablePush.</param>
        /// <param name="targetAt">targetAt.</param>
        /// <param name="targetUserCount">targetUserCount.</param>
        /// <param name="targetChannelCount">targetChannelCount.</param>
        /// <param name="targetChannelType">targetChannelType.</param>
        /// <param name="createChannelOptions">createChannelOptions.</param>
        /// <param name="status">status.</param>
        /// <param name="scheduledAt">scheduledAt.</param>
        /// <param name="ceaseAt">ceaseAt.</param>
        /// <param name="resumeAt">resumeAt.</param>
        /// <param name="completedAt">completedAt.</param>
        /// <param name="sentUserCount">sentUserCount.</param>
        /// <param name="sentChannelCount">sentChannelCount.</param>
        /// <param name="openCount">openCount.</param>
        /// <param name="openRate">openRate.</param>
        public ScheduleAnnouncementResponse(string uniqueId = default, string announcementGroup = default, ScheduleAnnouncementResponseMessage message = default(ScheduleAnnouncementResponseMessage), bool enablePush = default(bool), string targetAt = default, decimal targetUserCount = default(decimal), decimal targetChannelCount = default(decimal), string targetChannelType = default, ScheduleAnnouncementResponseCreateChannelOptions createChannelOptions = default(ScheduleAnnouncementResponseCreateChannelOptions), string status = default, decimal scheduledAt = default(decimal), string ceaseAt = default, string resumeAt = default, decimal completedAt = default(decimal), decimal sentUserCount = default(decimal), decimal sentChannelCount = default(decimal), decimal openCount = default(decimal), decimal openRate = default(decimal))
        {
            this.UniqueId = uniqueId;
            this.AnnouncementGroup = announcementGroup;
            this.Message = message;
            this.EnablePush = enablePush;
            this.TargetAt = targetAt;
            this.TargetUserCount = targetUserCount;
            this.TargetChannelCount = targetChannelCount;
            this.TargetChannelType = targetChannelType;
            this.CreateChannelOptions = createChannelOptions;
            this.Status = status;
            this.ScheduledAt = scheduledAt;
            this.CeaseAt = ceaseAt;
            this.ResumeAt = resumeAt;
            this.CompletedAt = completedAt;
            this.SentUserCount = sentUserCount;
            this.SentChannelCount = sentChannelCount;
            this.OpenCount = openCount;
            this.OpenRate = openRate;
        }

        /// <summary>
        /// Gets or Sets UniqueId
        /// </summary>
        [DataMember(Name="unique_id", EmitDefaultValue=false)]
        public string UniqueId { get; set; }

        /// <summary>
        /// Gets or Sets AnnouncementGroup
        /// </summary>
        [DataMember(Name="announcement_group", EmitDefaultValue=false)]
        public string AnnouncementGroup { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public ScheduleAnnouncementResponseMessage Message { get; set; }

        /// <summary>
        /// Gets or Sets EnablePush
        /// </summary>
        [DataMember(Name="enable_push", EmitDefaultValue=false)]
        public bool EnablePush { get; set; }

        /// <summary>
        /// Gets or Sets TargetAt
        /// </summary>
        [DataMember(Name="target_at", EmitDefaultValue=false)]
        public string TargetAt { get; set; }

        /// <summary>
        /// Gets or Sets TargetUserCount
        /// </summary>
        [DataMember(Name="target_user_count", EmitDefaultValue=false)]
        public decimal TargetUserCount { get; set; }

        /// <summary>
        /// Gets or Sets TargetChannelCount
        /// </summary>
        [DataMember(Name="target_channel_count", EmitDefaultValue=false)]
        public decimal TargetChannelCount { get; set; }

        /// <summary>
        /// Gets or Sets TargetChannelType
        /// </summary>
        [DataMember(Name="target_channel_type", EmitDefaultValue=false)]
        public string TargetChannelType { get; set; }

        /// <summary>
        /// Gets or Sets CreateChannelOptions
        /// </summary>
        [DataMember(Name="create_channel_options", EmitDefaultValue=false)]
        public ScheduleAnnouncementResponseCreateChannelOptions CreateChannelOptions { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledAt
        /// </summary>
        [DataMember(Name="scheduled_at", EmitDefaultValue=false)]
        public decimal ScheduledAt { get; set; }

        /// <summary>
        /// Gets or Sets CeaseAt
        /// </summary>
        [DataMember(Name="cease_at", EmitDefaultValue=false)]
        public string CeaseAt { get; set; }

        /// <summary>
        /// Gets or Sets ResumeAt
        /// </summary>
        [DataMember(Name="resume_at", EmitDefaultValue=false)]
        public string ResumeAt { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [DataMember(Name="completed_at", EmitDefaultValue=false)]
        public decimal CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets SentUserCount
        /// </summary>
        [DataMember(Name="sent_user_count", EmitDefaultValue=false)]
        public decimal SentUserCount { get; set; }

        /// <summary>
        /// Gets or Sets SentChannelCount
        /// </summary>
        [DataMember(Name="sent_channel_count", EmitDefaultValue=false)]
        public decimal SentChannelCount { get; set; }

        /// <summary>
        /// Gets or Sets OpenCount
        /// </summary>
        [DataMember(Name="open_count", EmitDefaultValue=false)]
        public decimal OpenCount { get; set; }

        /// <summary>
        /// Gets or Sets OpenRate
        /// </summary>
        [DataMember(Name="open_rate", EmitDefaultValue=false)]
        public decimal OpenRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduleAnnouncementResponse {\n");
            sb.Append("  UniqueId: ").Append(UniqueId).Append("\n");
            sb.Append("  AnnouncementGroup: ").Append(AnnouncementGroup).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  EnablePush: ").Append(EnablePush).Append("\n");
            sb.Append("  TargetAt: ").Append(TargetAt).Append("\n");
            sb.Append("  TargetUserCount: ").Append(TargetUserCount).Append("\n");
            sb.Append("  TargetChannelCount: ").Append(TargetChannelCount).Append("\n");
            sb.Append("  TargetChannelType: ").Append(TargetChannelType).Append("\n");
            sb.Append("  CreateChannelOptions: ").Append(CreateChannelOptions).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ScheduledAt: ").Append(ScheduledAt).Append("\n");
            sb.Append("  CeaseAt: ").Append(CeaseAt).Append("\n");
            sb.Append("  ResumeAt: ").Append(ResumeAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  SentUserCount: ").Append(SentUserCount).Append("\n");
            sb.Append("  SentChannelCount: ").Append(SentChannelCount).Append("\n");
            sb.Append("  OpenCount: ").Append(OpenCount).Append("\n");
            sb.Append("  OpenRate: ").Append(OpenRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleAnnouncementResponse);
        }

        /// <summary>
        /// Returns true if ScheduleAnnouncementResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleAnnouncementResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleAnnouncementResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UniqueId == input.UniqueId ||
                    (this.UniqueId != null &&
                    this.UniqueId.Equals(input.UniqueId))
                ) && 
                (
                    this.AnnouncementGroup == input.AnnouncementGroup ||
                    (this.AnnouncementGroup != null &&
                    this.AnnouncementGroup.Equals(input.AnnouncementGroup))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.EnablePush == input.EnablePush ||
                    (this.EnablePush != null &&
                    this.EnablePush.Equals(input.EnablePush))
                ) && 
                (
                    this.TargetAt == input.TargetAt ||
                    (this.TargetAt != null &&
                    this.TargetAt.Equals(input.TargetAt))
                ) && 
                (
                    this.TargetUserCount == input.TargetUserCount ||
                    (this.TargetUserCount != null &&
                    this.TargetUserCount.Equals(input.TargetUserCount))
                ) && 
                (
                    this.TargetChannelCount == input.TargetChannelCount ||
                    (this.TargetChannelCount != null &&
                    this.TargetChannelCount.Equals(input.TargetChannelCount))
                ) && 
                (
                    this.TargetChannelType == input.TargetChannelType ||
                    (this.TargetChannelType != null &&
                    this.TargetChannelType.Equals(input.TargetChannelType))
                ) && 
                (
                    this.CreateChannelOptions == input.CreateChannelOptions ||
                    (this.CreateChannelOptions != null &&
                    this.CreateChannelOptions.Equals(input.CreateChannelOptions))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ScheduledAt == input.ScheduledAt ||
                    (this.ScheduledAt != null &&
                    this.ScheduledAt.Equals(input.ScheduledAt))
                ) && 
                (
                    this.CeaseAt == input.CeaseAt ||
                    (this.CeaseAt != null &&
                    this.CeaseAt.Equals(input.CeaseAt))
                ) && 
                (
                    this.ResumeAt == input.ResumeAt ||
                    (this.ResumeAt != null &&
                    this.ResumeAt.Equals(input.ResumeAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.SentUserCount == input.SentUserCount ||
                    (this.SentUserCount != null &&
                    this.SentUserCount.Equals(input.SentUserCount))
                ) && 
                (
                    this.SentChannelCount == input.SentChannelCount ||
                    (this.SentChannelCount != null &&
                    this.SentChannelCount.Equals(input.SentChannelCount))
                ) && 
                (
                    this.OpenCount == input.OpenCount ||
                    (this.OpenCount != null &&
                    this.OpenCount.Equals(input.OpenCount))
                ) && 
                (
                    this.OpenRate == input.OpenRate ||
                    (this.OpenRate != null &&
                    this.OpenRate.Equals(input.OpenRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UniqueId != null)
                    hashCode = hashCode * 59 + this.UniqueId.GetHashCode();
                if (this.AnnouncementGroup != null)
                    hashCode = hashCode * 59 + this.AnnouncementGroup.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.EnablePush != null)
                    hashCode = hashCode * 59 + this.EnablePush.GetHashCode();
                if (this.TargetAt != null)
                    hashCode = hashCode * 59 + this.TargetAt.GetHashCode();
                if (this.TargetUserCount != null)
                    hashCode = hashCode * 59 + this.TargetUserCount.GetHashCode();
                if (this.TargetChannelCount != null)
                    hashCode = hashCode * 59 + this.TargetChannelCount.GetHashCode();
                if (this.TargetChannelType != null)
                    hashCode = hashCode * 59 + this.TargetChannelType.GetHashCode();
                if (this.CreateChannelOptions != null)
                    hashCode = hashCode * 59 + this.CreateChannelOptions.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ScheduledAt != null)
                    hashCode = hashCode * 59 + this.ScheduledAt.GetHashCode();
                if (this.CeaseAt != null)
                    hashCode = hashCode * 59 + this.CeaseAt.GetHashCode();
                if (this.ResumeAt != null)
                    hashCode = hashCode * 59 + this.ResumeAt.GetHashCode();
                if (this.CompletedAt != null)
                    hashCode = hashCode * 59 + this.CompletedAt.GetHashCode();
                if (this.SentUserCount != null)
                    hashCode = hashCode * 59 + this.SentUserCount.GetHashCode();
                if (this.SentChannelCount != null)
                    hashCode = hashCode * 59 + this.SentChannelCount.GetHashCode();
                if (this.OpenCount != null)
                    hashCode = hashCode * 59 + this.OpenCount.GetHashCode();
                if (this.OpenRate != null)
                    hashCode = hashCode * 59 + this.OpenRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
