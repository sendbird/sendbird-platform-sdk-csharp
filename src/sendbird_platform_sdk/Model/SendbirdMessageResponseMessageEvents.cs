/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SendbirdMessageResponseMessageEvents
    /// </summary>
    [DataContract]
    public partial class SendbirdMessageResponseMessageEvents :  IEquatable<SendbirdMessageResponseMessageEvents>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendbirdMessageResponseMessageEvents" /> class.
        /// </summary>
        /// <param name="sendPushNotification">sendPushNotification.</param>
        /// <param name="updateUnreadCount">updateUnreadCount.</param>
        /// <param name="updateMentionCount">updateMentionCount.</param>
        /// <param name="updateLastMessage">updateLastMessage.</param>
        public SendbirdMessageResponseMessageEvents(string sendPushNotification = default(string), bool updateUnreadCount = default(bool), bool updateMentionCount = default(bool), bool updateLastMessage = default(bool))
        {
            this.SendPushNotification = sendPushNotification;
            this.UpdateUnreadCount = updateUnreadCount;
            this.UpdateMentionCount = updateMentionCount;
            this.UpdateLastMessage = updateLastMessage;
        }

        /// <summary>
        /// Gets or Sets SendPushNotification
        /// </summary>
        [DataMember(Name="send_push_notification", EmitDefaultValue=false)]
        public string SendPushNotification { get; set; }

        /// <summary>
        /// Gets or Sets UpdateUnreadCount
        /// </summary>
        [DataMember(Name="update_unread_count", EmitDefaultValue=false)]
        public bool UpdateUnreadCount { get; set; }

        /// <summary>
        /// Gets or Sets UpdateMentionCount
        /// </summary>
        [DataMember(Name="update_mention_count", EmitDefaultValue=false)]
        public bool UpdateMentionCount { get; set; }

        /// <summary>
        /// Gets or Sets UpdateLastMessage
        /// </summary>
        [DataMember(Name="update_last_message", EmitDefaultValue=false)]
        public bool UpdateLastMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendbirdMessageResponseMessageEvents {\n");
            sb.Append("  SendPushNotification: ").Append(SendPushNotification).Append("\n");
            sb.Append("  UpdateUnreadCount: ").Append(UpdateUnreadCount).Append("\n");
            sb.Append("  UpdateMentionCount: ").Append(UpdateMentionCount).Append("\n");
            sb.Append("  UpdateLastMessage: ").Append(UpdateLastMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendbirdMessageResponseMessageEvents);
        }

        /// <summary>
        /// Returns true if SendbirdMessageResponseMessageEvents instances are equal
        /// </summary>
        /// <param name="input">Instance of SendbirdMessageResponseMessageEvents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendbirdMessageResponseMessageEvents input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SendPushNotification == input.SendPushNotification ||
                    (this.SendPushNotification != null &&
                    this.SendPushNotification.Equals(input.SendPushNotification))
                ) && 
                (
                    this.UpdateUnreadCount == input.UpdateUnreadCount ||
                    (this.UpdateUnreadCount != null &&
                    this.UpdateUnreadCount.Equals(input.UpdateUnreadCount))
                ) && 
                (
                    this.UpdateMentionCount == input.UpdateMentionCount ||
                    (this.UpdateMentionCount != null &&
                    this.UpdateMentionCount.Equals(input.UpdateMentionCount))
                ) && 
                (
                    this.UpdateLastMessage == input.UpdateLastMessage ||
                    (this.UpdateLastMessage != null &&
                    this.UpdateLastMessage.Equals(input.UpdateLastMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SendPushNotification != null)
                    hashCode = hashCode * 59 + this.SendPushNotification.GetHashCode();
                if (this.UpdateUnreadCount != null)
                    hashCode = hashCode * 59 + this.UpdateUnreadCount.GetHashCode();
                if (this.UpdateMentionCount != null)
                    hashCode = hashCode * 59 + this.UpdateMentionCount.GetHashCode();
                if (this.UpdateLastMessage != null)
                    hashCode = hashCode * 59 + this.UpdateLastMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
