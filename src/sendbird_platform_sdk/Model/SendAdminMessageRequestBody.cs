/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SendAdminMessageRequestBody
    /// </summary>
    [DataContract]
    public partial class SendAdminMessageRequestBody :  IEquatable<SendAdminMessageRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Defines MentionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MentionTypeEnum
        {
            /// <summary>
            /// Enum Users for value: users
            /// </summary>
            [EnumMember(Value = "users")]
            Users = 1,

            /// <summary>
            /// Enum Channel for value: channel
            /// </summary>
            [EnumMember(Value = "channel")]
            Channel = 2

        }

        /// <summary>
        /// Gets or Sets MentionType
        /// </summary>
        [DataMember(Name="mention_type", EmitDefaultValue=false)]
        public MentionTypeEnum? MentionType { get; set; }
        /// <summary>
        /// Specifies the type of the message. The value of ADMM represents an admin message.
        /// </summary>
        /// <value>Specifies the type of the message. The value of ADMM represents an admin message.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageTypeEnum
        {
            /// <summary>
            /// Enum ADMM for value: ADMM
            /// </summary>
            [EnumMember(Value = "ADMM")]
            ADMM = 1

        }

        /// <summary>
        /// Specifies the type of the message. The value of ADMM represents an admin message.
        /// </summary>
        /// <value>Specifies the type of the message. The value of ADMM represents an admin message.</value>
        [DataMember(Name="message_type", EmitDefaultValue=true)]
        public MessageTypeEnum MessageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendAdminMessageRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendAdminMessageRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendAdminMessageRequestBody" /> class.
        /// </summary>
        /// <param name="apnsBundleId">apnsBundleId.</param>
        /// <param name="customType">customType.</param>
        /// <param name="data">data.</param>
        /// <param name="dedupId">dedupId.</param>
        /// <param name="isSilent">isSilent.</param>
        /// <param name="mentionType">mentionType.</param>
        /// <param name="mentionedUserIds">mentionedUserIds.</param>
        /// <param name="message">message (required).</param>
        /// <param name="messageType">Specifies the type of the message. The value of ADMM represents an admin message. (required).</param>
        /// <param name="pushMessageTemplate">pushMessageTemplate.</param>
        /// <param name="sendPush">sendPush.</param>
        /// <param name="sortedMetaarray">sortedMetaarray.</param>
        public SendAdminMessageRequestBody(string apnsBundleId = default(string), string customType = default(string), string data = default(string), string dedupId = default(string), bool isSilent = default(bool), MentionTypeEnum? mentionType = default(MentionTypeEnum?), List<string> mentionedUserIds = default(List<string>), string message = default(string), MessageTypeEnum messageType = default(MessageTypeEnum), SendTextMessageRequestBodyPushMessageTemplate pushMessageTemplate = default(SendTextMessageRequestBodyPushMessageTemplate), bool sendPush = default(bool), List<SendbirdSortedMetaarrayInner> sortedMetaarray = default(List<SendbirdSortedMetaarrayInner>))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for SendAdminMessageRequestBody and cannot be null");
            }
            else
            {
                this.Message = message;
            }

            // to ensure "messageType" is required (not null)
            if (messageType == null)
            {
                throw new InvalidDataException("messageType is a required property for SendAdminMessageRequestBody and cannot be null");
            }
            else
            {
                this.MessageType = messageType;
            }

            this.ApnsBundleId = apnsBundleId;
            this.CustomType = customType;
            this.Data = data;
            this.DedupId = dedupId;
            this.IsSilent = isSilent;
            this.MentionType = mentionType;
            this.MentionedUserIds = mentionedUserIds;
            this.PushMessageTemplate = pushMessageTemplate;
            this.SendPush = sendPush;
            this.SortedMetaarray = sortedMetaarray;
        }

        /// <summary>
        /// Gets or Sets ApnsBundleId
        /// </summary>
        [DataMember(Name="apns_bundle_id", EmitDefaultValue=false)]
        public string ApnsBundleId { get; set; }

        /// <summary>
        /// Gets or Sets CustomType
        /// </summary>
        [DataMember(Name="custom_type", EmitDefaultValue=false)]
        public string CustomType { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets DedupId
        /// </summary>
        [DataMember(Name="dedup_id", EmitDefaultValue=false)]
        public string DedupId { get; set; }

        /// <summary>
        /// Gets or Sets IsSilent
        /// </summary>
        [DataMember(Name="is_silent", EmitDefaultValue=false)]
        public bool IsSilent { get; set; }


        /// <summary>
        /// Gets or Sets MentionedUserIds
        /// </summary>
        [DataMember(Name="mentioned_user_ids", EmitDefaultValue=false)]
        public List<string> MentionedUserIds { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }


        /// <summary>
        /// Gets or Sets PushMessageTemplate
        /// </summary>
        [DataMember(Name="push_message_template", EmitDefaultValue=false)]
        public SendTextMessageRequestBodyPushMessageTemplate PushMessageTemplate { get; set; }

        /// <summary>
        /// Gets or Sets SendPush
        /// </summary>
        [DataMember(Name="send_push", EmitDefaultValue=false)]
        public bool SendPush { get; set; }

        /// <summary>
        /// Gets or Sets SortedMetaarray
        /// </summary>
        [DataMember(Name="sorted_metaarray", EmitDefaultValue=false)]
        public List<SendbirdSortedMetaarrayInner> SortedMetaarray { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendAdminMessageRequestBody {\n");
            sb.Append("  ApnsBundleId: ").Append(ApnsBundleId).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DedupId: ").Append(DedupId).Append("\n");
            sb.Append("  IsSilent: ").Append(IsSilent).Append("\n");
            sb.Append("  MentionType: ").Append(MentionType).Append("\n");
            sb.Append("  MentionedUserIds: ").Append(MentionedUserIds).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  PushMessageTemplate: ").Append(PushMessageTemplate).Append("\n");
            sb.Append("  SendPush: ").Append(SendPush).Append("\n");
            sb.Append("  SortedMetaarray: ").Append(SortedMetaarray).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendAdminMessageRequestBody);
        }

        /// <summary>
        /// Returns true if SendAdminMessageRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SendAdminMessageRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendAdminMessageRequestBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApnsBundleId == input.ApnsBundleId ||
                    (this.ApnsBundleId != null &&
                    this.ApnsBundleId.Equals(input.ApnsBundleId))
                ) && 
                (
                    this.CustomType == input.CustomType ||
                    (this.CustomType != null &&
                    this.CustomType.Equals(input.CustomType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.DedupId == input.DedupId ||
                    (this.DedupId != null &&
                    this.DedupId.Equals(input.DedupId))
                ) && 
                (
                    this.IsSilent == input.IsSilent ||
                    (this.IsSilent != null &&
                    this.IsSilent.Equals(input.IsSilent))
                ) && 
                (
                    this.MentionType == input.MentionType ||
                    (this.MentionType != null &&
                    this.MentionType.Equals(input.MentionType))
                ) && 
                (
                    this.MentionedUserIds == input.MentionedUserIds ||
                    this.MentionedUserIds != null &&
                    input.MentionedUserIds != null &&
                    this.MentionedUserIds.SequenceEqual(input.MentionedUserIds)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.PushMessageTemplate == input.PushMessageTemplate ||
                    (this.PushMessageTemplate != null &&
                    this.PushMessageTemplate.Equals(input.PushMessageTemplate))
                ) && 
                (
                    this.SendPush == input.SendPush ||
                    (this.SendPush != null &&
                    this.SendPush.Equals(input.SendPush))
                ) && 
                (
                    this.SortedMetaarray == input.SortedMetaarray ||
                    this.SortedMetaarray != null &&
                    input.SortedMetaarray != null &&
                    this.SortedMetaarray.SequenceEqual(input.SortedMetaarray)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApnsBundleId != null)
                    hashCode = hashCode * 59 + this.ApnsBundleId.GetHashCode();
                if (this.CustomType != null)
                    hashCode = hashCode * 59 + this.CustomType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.DedupId != null)
                    hashCode = hashCode * 59 + this.DedupId.GetHashCode();
                if (this.IsSilent != null)
                    hashCode = hashCode * 59 + this.IsSilent.GetHashCode();
                if (this.MentionType != null)
                    hashCode = hashCode * 59 + this.MentionType.GetHashCode();
                if (this.MentionedUserIds != null)
                    hashCode = hashCode * 59 + this.MentionedUserIds.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.MessageType != null)
                    hashCode = hashCode * 59 + this.MessageType.GetHashCode();
                if (this.PushMessageTemplate != null)
                    hashCode = hashCode * 59 + this.PushMessageTemplate.GetHashCode();
                if (this.SendPush != null)
                    hashCode = hashCode * 59 + this.SendPush.GetHashCode();
                if (this.SortedMetaarray != null)
                    hashCode = hashCode * 59 + this.SortedMetaarray.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
