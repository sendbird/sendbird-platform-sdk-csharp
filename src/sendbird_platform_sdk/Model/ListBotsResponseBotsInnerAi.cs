/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// ListBotsResponseBotsInnerAi
    /// </summary>
    [DataContract]
    public partial class ListBotsResponseBotsInnerAi :  IEquatable<ListBotsResponseBotsInnerAi>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListBotsResponseBotsInnerAi" /> class.
        /// </summary>
        /// <param name="backend">backend.</param>
        /// <param name="feedback">feedback.</param>
        /// <param name="frequencyPenalty">frequencyPenalty.</param>
        /// <param name="instructionMode">instructionMode.</param>
        /// <param name="maxTokens">maxTokens.</param>
        /// <param name="model">model.</param>
        /// <param name="presencePenalty">presencePenalty.</param>
        /// <param name="stream">stream.</param>
        /// <param name="systemMessage">systemMessage.</param>
        /// <param name="systemMessageForContextPrefix">systemMessageForContextPrefix.</param>
        /// <param name="temperature">temperature.</param>
        /// <param name="topP">topP.</param>
        public ListBotsResponseBotsInnerAi(string backend = default(string), bool feedback = default(bool), int frequencyPenalty = default(int), Object instructionMode = default(Object), int maxTokens = default(int), string model = default(string), int presencePenalty = default(int), bool stream = default(bool), string systemMessage = default(string), string systemMessageForContextPrefix = default(string), decimal temperature = default(decimal), int topP = default(int))
        {
            this.InstructionMode = instructionMode;
            this.Backend = backend;
            this.Feedback = feedback;
            this.FrequencyPenalty = frequencyPenalty;
            this.InstructionMode = instructionMode;
            this.MaxTokens = maxTokens;
            this.Model = model;
            this.PresencePenalty = presencePenalty;
            this.Stream = stream;
            this.SystemMessage = systemMessage;
            this.SystemMessageForContextPrefix = systemMessageForContextPrefix;
            this.Temperature = temperature;
            this.TopP = topP;
        }

        /// <summary>
        /// Gets or Sets Backend
        /// </summary>
        [DataMember(Name="backend", EmitDefaultValue=false)]
        public string Backend { get; set; }

        /// <summary>
        /// Gets or Sets Feedback
        /// </summary>
        [DataMember(Name="feedback", EmitDefaultValue=false)]
        public bool Feedback { get; set; }

        /// <summary>
        /// Gets or Sets FrequencyPenalty
        /// </summary>
        [DataMember(Name="frequency_penalty", EmitDefaultValue=false)]
        public int FrequencyPenalty { get; set; }

        /// <summary>
        /// Gets or Sets InstructionMode
        /// </summary>
        [DataMember(Name="instruction_mode", EmitDefaultValue=true)]
        public Object InstructionMode { get; set; }

        /// <summary>
        /// Gets or Sets MaxTokens
        /// </summary>
        [DataMember(Name="max_tokens", EmitDefaultValue=false)]
        public int MaxTokens { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets PresencePenalty
        /// </summary>
        [DataMember(Name="presence_penalty", EmitDefaultValue=false)]
        public int PresencePenalty { get; set; }

        /// <summary>
        /// Gets or Sets Stream
        /// </summary>
        [DataMember(Name="stream", EmitDefaultValue=false)]
        public bool Stream { get; set; }

        /// <summary>
        /// Gets or Sets SystemMessage
        /// </summary>
        [DataMember(Name="system_message", EmitDefaultValue=false)]
        public string SystemMessage { get; set; }

        /// <summary>
        /// Gets or Sets SystemMessageForContextPrefix
        /// </summary>
        [DataMember(Name="system_message_for_context_prefix", EmitDefaultValue=false)]
        public string SystemMessageForContextPrefix { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name="temperature", EmitDefaultValue=false)]
        public decimal Temperature { get; set; }

        /// <summary>
        /// Gets or Sets TopP
        /// </summary>
        [DataMember(Name="top_p", EmitDefaultValue=false)]
        public int TopP { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListBotsResponseBotsInnerAi {\n");
            sb.Append("  Backend: ").Append(Backend).Append("\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("  FrequencyPenalty: ").Append(FrequencyPenalty).Append("\n");
            sb.Append("  InstructionMode: ").Append(InstructionMode).Append("\n");
            sb.Append("  MaxTokens: ").Append(MaxTokens).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  PresencePenalty: ").Append(PresencePenalty).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("  SystemMessage: ").Append(SystemMessage).Append("\n");
            sb.Append("  SystemMessageForContextPrefix: ").Append(SystemMessageForContextPrefix).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  TopP: ").Append(TopP).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListBotsResponseBotsInnerAi);
        }

        /// <summary>
        /// Returns true if ListBotsResponseBotsInnerAi instances are equal
        /// </summary>
        /// <param name="input">Instance of ListBotsResponseBotsInnerAi to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListBotsResponseBotsInnerAi input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Backend == input.Backend ||
                    (this.Backend != null &&
                    this.Backend.Equals(input.Backend))
                ) && 
                (
                    this.Feedback == input.Feedback ||
                    (this.Feedback != null &&
                    this.Feedback.Equals(input.Feedback))
                ) && 
                (
                    this.FrequencyPenalty == input.FrequencyPenalty ||
                    (this.FrequencyPenalty != null &&
                    this.FrequencyPenalty.Equals(input.FrequencyPenalty))
                ) && 
                (
                    this.InstructionMode == input.InstructionMode ||
                    (this.InstructionMode != null &&
                    this.InstructionMode.Equals(input.InstructionMode))
                ) && 
                (
                    this.MaxTokens == input.MaxTokens ||
                    (this.MaxTokens != null &&
                    this.MaxTokens.Equals(input.MaxTokens))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.PresencePenalty == input.PresencePenalty ||
                    (this.PresencePenalty != null &&
                    this.PresencePenalty.Equals(input.PresencePenalty))
                ) && 
                (
                    this.Stream == input.Stream ||
                    (this.Stream != null &&
                    this.Stream.Equals(input.Stream))
                ) && 
                (
                    this.SystemMessage == input.SystemMessage ||
                    (this.SystemMessage != null &&
                    this.SystemMessage.Equals(input.SystemMessage))
                ) && 
                (
                    this.SystemMessageForContextPrefix == input.SystemMessageForContextPrefix ||
                    (this.SystemMessageForContextPrefix != null &&
                    this.SystemMessageForContextPrefix.Equals(input.SystemMessageForContextPrefix))
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                ) && 
                (
                    this.TopP == input.TopP ||
                    (this.TopP != null &&
                    this.TopP.Equals(input.TopP))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Backend != null)
                    hashCode = hashCode * 59 + this.Backend.GetHashCode();
                if (this.Feedback != null)
                    hashCode = hashCode * 59 + this.Feedback.GetHashCode();
                if (this.FrequencyPenalty != null)
                    hashCode = hashCode * 59 + this.FrequencyPenalty.GetHashCode();
                if (this.InstructionMode != null)
                    hashCode = hashCode * 59 + this.InstructionMode.GetHashCode();
                if (this.MaxTokens != null)
                    hashCode = hashCode * 59 + this.MaxTokens.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.PresencePenalty != null)
                    hashCode = hashCode * 59 + this.PresencePenalty.GetHashCode();
                if (this.Stream != null)
                    hashCode = hashCode * 59 + this.Stream.GetHashCode();
                if (this.SystemMessage != null)
                    hashCode = hashCode * 59 + this.SystemMessage.GetHashCode();
                if (this.SystemMessageForContextPrefix != null)
                    hashCode = hashCode * 59 + this.SystemMessageForContextPrefix.GetHashCode();
                if (this.Temperature != null)
                    hashCode = hashCode * 59 + this.Temperature.GetHashCode();
                if (this.TopP != null)
                    hashCode = hashCode * 59 + this.TopP.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
