/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// ScheduleAnnouncementData
    /// </summary>
    [DataContract]
    public partial class ScheduleAnnouncementData :  IEquatable<ScheduleAnnouncementData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleAnnouncementData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScheduleAnnouncementData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleAnnouncementData" /> class.
        /// </summary>
        /// <param name="message">message (required).</param>
        /// <param name="messageType">Specifies the type of the message, which can be either MESG for a text message and ADMM for an admin message..</param>
        /// <param name="userId">Specifies the unique ID of the sender when the message.type is MESG. When the message.type value is ADMM, this property is not effective..</param>
        /// <param name="content">Specifies the content of the message..</param>
        /// <param name="targetAt">Specifies the target channels to send the announcement to. Acceptable values are the following: &lt;br/&gt; - sender_all_channels (Default): sends the announcement to all of the sender&#39;s group channels.&lt;br /&gt;- target_channels: sends the announcement to all target group channels. When the &#x60;message.type&#x60; of the announcement is ADMM, this is the only valid option. &lt;br /&gt; - target_users_included_channels: sends the announcement to group channels consisting of the sender, target users, and other members. &lt;br/&gt; - target_users_only_channels: sends the announcement to group channels consisting of the sender and target users only. (required).</param>
        /// <param name="targetList">Specifies an array of one or more target user IDs or target channel URLs to send the announcement to when the target_at is  target_channels, target_users_only_channels, or target_users_included_channels.&lt;br /&gt;&lt;br /&gt;  When the target_at value is sender_all_channels, this property is not effective. (required).</param>
        /// <param name="targetChannelType">Determines which type of group channel to send the announcement to, based on the target_at and target_list. This property is effective only when the target_at is either target_users_only_channels or target_users_included_channels and the target_list is specified. Acceptable values are limited to the following:&lt;br/&gt;- all: send the announcement to all channels that have all target users and the sender in them, regardless of channel type.&lt;br/&gt;- distinct (default): sends this announcement to the distinct channels. Distinct channels continue to use the same existing channels whenever someone attempts to create a new channel with the same members.&lt;br/&gt;- non-distinct: sends this announcement to the non-distinct channels. Non-distinct channels always create a new channel even if there is an existing channel with the same members.&lt;br/&gt;&lt;br/&gt; The distinct and non-distinct channels are a subtype of group channels, determined by the [is_distinct](/docs/chat/v3/platform-api/guides/group-channel#2-types-of-a-channel-3-resource-representation) property. (required).</param>
        /// <param name="uniqueId">Specifies the unique ID of the new announcement. The unique_id will be automatically created unless specified..</param>
        /// <param name="messageCustomType">Specifies the custom message type of the message of the new announcement..</param>
        /// <param name="messageData">Specifies additional message information such as custom font size, font type or &#x60;JSON&#x60; formatted string..</param>
        /// <param name="createChannel">Determines whether to create a new channel if there is no existing channel that matches with the target options including target_at and target_list. By specifying the create_channel_options, you can configure the properties of newly created channels. (Default: false).</param>
        /// <param name="announcementGroup">Specifies the announcement group that the new announcement belongs to.&lt;br/&gt; &lt;br/&gt; This property is effective only when the target_at is either target_users_only_channels or target_users_included_channels..</param>
        /// <param name="createChannelOptions">A newly created channel configuration..</param>
        /// <param name="createChannelOptionsName">Specifies the name of channels to be created. (Default: Group Channel).</param>
        /// <param name="createChannelOptionsCoverUrl">Specifies the URL of the cover image for the new channels..</param>
        /// <param name="createChannelOptionsCustomType">Specifies the custom channel type of the new channels..</param>
        /// <param name="createChannelOptionsData">Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string..</param>
        /// <param name="createChannelOptionsDistinct">Determines whether to create a [distinct](/docs/chat/v3/platform-api/guides/channel-types#2-group-channel) channel. (Default: true).</param>
        /// <param name="scheduledAt">Specifies the time to start the announcement, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. If not specified, the default is the timestamp of when the request was delivered to Sendbird server. (Default: current timestamp).</param>
        /// <param name="ceaseAt">Specifies the time to temporarily put the announcement on hold in UTC. The string is represented in HHMM format. This should be specified in conjunction with the resume_at property.&lt;br/&gt;&lt;br/&gt; If both the cease_at and resume_at are not specified, Sendbird server starts to send the announcement at the time of the scheduled_at above..</param>
        /// <param name="resumeAt">Specifies the time to automatically resume the on-hold announcement in UTC. The string is represented in HHMM format. This should be specified in conjunction with the cease_at property above.&lt;br/&gt;&lt;br/&gt; If both the cease_at and resume_at are not specified, Sendbird server starts to send the announcement at the time of the scheduled_at above..</param>
        /// <param name="endAt">Specifies the time to permanently end the announcement, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous##2-timestamps) format. If this property is specified, the announcement ends even when the announcement is not sent to all its targets. &lt;br/&gt;&lt;br/&gt; For the announcement to run safely, the end_at time should be set at least 10 minutes later than the scheduled_at time..</param>
        /// <param name="enablePush">Determines whether to turn on push notification for the announcement. If set to true, push notifications will be sent for the announcement. (Default: true).</param>
        /// <param name="assignSenderAsChannelInviter">Determines whether to assign an announcement sender as an inviter of the newly created channels. (Default: false).</param>
        public ScheduleAnnouncementData(ScheduleAnnouncementDataMessage message = default(ScheduleAnnouncementDataMessage), string messageType = default, string userId = default, string content = default, string targetAt = default, List<string> targetList = default, string targetChannelType = default, string uniqueId = default, string messageCustomType = default, string messageData = default, bool createChannel = default(bool), string announcementGroup = default, string createChannelOptions = default, string createChannelOptionsName = default, string createChannelOptionsCoverUrl = default, string createChannelOptionsCustomType = default, string createChannelOptionsData = default, string createChannelOptionsDistinct = default, int scheduledAt = default(int), string ceaseAt = default, string resumeAt = default, int endAt = default(int), bool enablePush = default(bool), bool assignSenderAsChannelInviter = default(bool))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for ScheduleAnnouncementData and cannot be null");
            }
            else
            {
                this.Message = message;
            }

            // to ensure "targetAt" is required (not null)
            if (targetAt == null)
            {
                throw new InvalidDataException("targetAt is a required property for ScheduleAnnouncementData and cannot be null");
            }
            else
            {
                this.TargetAt = targetAt;
            }

            // to ensure "targetList" is required (not null)
            if (targetList == null)
            {
                throw new InvalidDataException("targetList is a required property for ScheduleAnnouncementData and cannot be null");
            }
            else
            {
                this.TargetList = targetList;
            }

            // to ensure "targetChannelType" is required (not null)
            if (targetChannelType == null)
            {
                throw new InvalidDataException("targetChannelType is a required property for ScheduleAnnouncementData and cannot be null");
            }
            else
            {
                this.TargetChannelType = targetChannelType;
            }

            this.MessageType = messageType;
            this.UserId = userId;
            this.Content = content;
            this.UniqueId = uniqueId;
            this.MessageCustomType = messageCustomType;
            this.MessageData = messageData;
            this.CreateChannel = createChannel;
            this.AnnouncementGroup = announcementGroup;
            this.CreateChannelOptions = createChannelOptions;
            this.CreateChannelOptionsName = createChannelOptionsName;
            this.CreateChannelOptionsCoverUrl = createChannelOptionsCoverUrl;
            this.CreateChannelOptionsCustomType = createChannelOptionsCustomType;
            this.CreateChannelOptionsData = createChannelOptionsData;
            this.CreateChannelOptionsDistinct = createChannelOptionsDistinct;
            this.ScheduledAt = scheduledAt;
            this.CeaseAt = ceaseAt;
            this.ResumeAt = resumeAt;
            this.EndAt = endAt;
            this.EnablePush = enablePush;
            this.AssignSenderAsChannelInviter = assignSenderAsChannelInviter;
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public ScheduleAnnouncementDataMessage Message { get; set; }

        /// <summary>
        /// Specifies the type of the message, which can be either MESG for a text message and ADMM for an admin message.
        /// </summary>
        /// <value>Specifies the type of the message, which can be either MESG for a text message and ADMM for an admin message.</value>
        [DataMember(Name="message_type", EmitDefaultValue=false)]
        public string MessageType { get; set; }

        /// <summary>
        /// Specifies the unique ID of the sender when the message.type is MESG. When the message.type value is ADMM, this property is not effective.
        /// </summary>
        /// <value>Specifies the unique ID of the sender when the message.type is MESG. When the message.type value is ADMM, this property is not effective.</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Specifies the content of the message.
        /// </summary>
        /// <value>Specifies the content of the message.</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Specifies the target channels to send the announcement to. Acceptable values are the following: &lt;br/&gt; - sender_all_channels (Default): sends the announcement to all of the sender&#39;s group channels.&lt;br /&gt;- target_channels: sends the announcement to all target group channels. When the &#x60;message.type&#x60; of the announcement is ADMM, this is the only valid option. &lt;br /&gt; - target_users_included_channels: sends the announcement to group channels consisting of the sender, target users, and other members. &lt;br/&gt; - target_users_only_channels: sends the announcement to group channels consisting of the sender and target users only.
        /// </summary>
        /// <value>Specifies the target channels to send the announcement to. Acceptable values are the following: &lt;br/&gt; - sender_all_channels (Default): sends the announcement to all of the sender&#39;s group channels.&lt;br /&gt;- target_channels: sends the announcement to all target group channels. When the &#x60;message.type&#x60; of the announcement is ADMM, this is the only valid option. &lt;br /&gt; - target_users_included_channels: sends the announcement to group channels consisting of the sender, target users, and other members. &lt;br/&gt; - target_users_only_channels: sends the announcement to group channels consisting of the sender and target users only.</value>
        [DataMember(Name="target_at", EmitDefaultValue=true)]
        public string TargetAt { get; set; }

        /// <summary>
        /// Specifies an array of one or more target user IDs or target channel URLs to send the announcement to when the target_at is  target_channels, target_users_only_channels, or target_users_included_channels.&lt;br /&gt;&lt;br /&gt;  When the target_at value is sender_all_channels, this property is not effective.
        /// </summary>
        /// <value>Specifies an array of one or more target user IDs or target channel URLs to send the announcement to when the target_at is  target_channels, target_users_only_channels, or target_users_included_channels.&lt;br /&gt;&lt;br /&gt;  When the target_at value is sender_all_channels, this property is not effective.</value>
        [DataMember(Name="target_list", EmitDefaultValue=true)]
        public List<string> TargetList { get; set; }

        /// <summary>
        /// Determines which type of group channel to send the announcement to, based on the target_at and target_list. This property is effective only when the target_at is either target_users_only_channels or target_users_included_channels and the target_list is specified. Acceptable values are limited to the following:&lt;br/&gt;- all: send the announcement to all channels that have all target users and the sender in them, regardless of channel type.&lt;br/&gt;- distinct (default): sends this announcement to the distinct channels. Distinct channels continue to use the same existing channels whenever someone attempts to create a new channel with the same members.&lt;br/&gt;- non-distinct: sends this announcement to the non-distinct channels. Non-distinct channels always create a new channel even if there is an existing channel with the same members.&lt;br/&gt;&lt;br/&gt; The distinct and non-distinct channels are a subtype of group channels, determined by the [is_distinct](/docs/chat/v3/platform-api/guides/group-channel#2-types-of-a-channel-3-resource-representation) property.
        /// </summary>
        /// <value>Determines which type of group channel to send the announcement to, based on the target_at and target_list. This property is effective only when the target_at is either target_users_only_channels or target_users_included_channels and the target_list is specified. Acceptable values are limited to the following:&lt;br/&gt;- all: send the announcement to all channels that have all target users and the sender in them, regardless of channel type.&lt;br/&gt;- distinct (default): sends this announcement to the distinct channels. Distinct channels continue to use the same existing channels whenever someone attempts to create a new channel with the same members.&lt;br/&gt;- non-distinct: sends this announcement to the non-distinct channels. Non-distinct channels always create a new channel even if there is an existing channel with the same members.&lt;br/&gt;&lt;br/&gt; The distinct and non-distinct channels are a subtype of group channels, determined by the [is_distinct](/docs/chat/v3/platform-api/guides/group-channel#2-types-of-a-channel-3-resource-representation) property.</value>
        [DataMember(Name="target_channel_type", EmitDefaultValue=true)]
        public string TargetChannelType { get; set; }

        /// <summary>
        /// Specifies the unique ID of the new announcement. The unique_id will be automatically created unless specified.
        /// </summary>
        /// <value>Specifies the unique ID of the new announcement. The unique_id will be automatically created unless specified.</value>
        [DataMember(Name="unique_id", EmitDefaultValue=false)]
        public string UniqueId { get; set; }

        /// <summary>
        /// Specifies the custom message type of the message of the new announcement.
        /// </summary>
        /// <value>Specifies the custom message type of the message of the new announcement.</value>
        [DataMember(Name="message.custom_type", EmitDefaultValue=false)]
        public string MessageCustomType { get; set; }

        /// <summary>
        /// Specifies additional message information such as custom font size, font type or &#x60;JSON&#x60; formatted string.
        /// </summary>
        /// <value>Specifies additional message information such as custom font size, font type or &#x60;JSON&#x60; formatted string.</value>
        [DataMember(Name="message.data", EmitDefaultValue=false)]
        public string MessageData { get; set; }

        /// <summary>
        /// Determines whether to create a new channel if there is no existing channel that matches with the target options including target_at and target_list. By specifying the create_channel_options, you can configure the properties of newly created channels. (Default: false)
        /// </summary>
        /// <value>Determines whether to create a new channel if there is no existing channel that matches with the target options including target_at and target_list. By specifying the create_channel_options, you can configure the properties of newly created channels. (Default: false)</value>
        [DataMember(Name="create_channel", EmitDefaultValue=false)]
        public bool CreateChannel { get; set; }

        /// <summary>
        /// Specifies the announcement group that the new announcement belongs to.&lt;br/&gt; &lt;br/&gt; This property is effective only when the target_at is either target_users_only_channels or target_users_included_channels.
        /// </summary>
        /// <value>Specifies the announcement group that the new announcement belongs to.&lt;br/&gt; &lt;br/&gt; This property is effective only when the target_at is either target_users_only_channels or target_users_included_channels.</value>
        [DataMember(Name="announcement_group", EmitDefaultValue=false)]
        public string AnnouncementGroup { get; set; }

        /// <summary>
        /// A newly created channel configuration.
        /// </summary>
        /// <value>A newly created channel configuration.</value>
        [DataMember(Name="create_channel_options", EmitDefaultValue=false)]
        public string CreateChannelOptions { get; set; }

        /// <summary>
        /// Specifies the name of channels to be created. (Default: Group Channel)
        /// </summary>
        /// <value>Specifies the name of channels to be created. (Default: Group Channel)</value>
        [DataMember(Name="create_channel_options.name", EmitDefaultValue=false)]
        public string CreateChannelOptionsName { get; set; }

        /// <summary>
        /// Specifies the URL of the cover image for the new channels.
        /// </summary>
        /// <value>Specifies the URL of the cover image for the new channels.</value>
        [DataMember(Name="create_channel_options.cover_url", EmitDefaultValue=false)]
        public string CreateChannelOptionsCoverUrl { get; set; }

        /// <summary>
        /// Specifies the custom channel type of the new channels.
        /// </summary>
        /// <value>Specifies the custom channel type of the new channels.</value>
        [DataMember(Name="create_channel_options.custom_type", EmitDefaultValue=false)]
        public string CreateChannelOptionsCustomType { get; set; }

        /// <summary>
        /// Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string.
        /// </summary>
        /// <value>Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string.</value>
        [DataMember(Name="create_channel_options.data", EmitDefaultValue=false)]
        public string CreateChannelOptionsData { get; set; }

        /// <summary>
        /// Determines whether to create a [distinct](/docs/chat/v3/platform-api/guides/channel-types#2-group-channel) channel. (Default: true)
        /// </summary>
        /// <value>Determines whether to create a [distinct](/docs/chat/v3/platform-api/guides/channel-types#2-group-channel) channel. (Default: true)</value>
        [DataMember(Name="create_channel_options.distinct", EmitDefaultValue=false)]
        public string CreateChannelOptionsDistinct { get; set; }

        /// <summary>
        /// Specifies the time to start the announcement, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. If not specified, the default is the timestamp of when the request was delivered to Sendbird server. (Default: current timestamp)
        /// </summary>
        /// <value>Specifies the time to start the announcement, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. If not specified, the default is the timestamp of when the request was delivered to Sendbird server. (Default: current timestamp)</value>
        [DataMember(Name="scheduled_at", EmitDefaultValue=false)]
        public int ScheduledAt { get; set; }

        /// <summary>
        /// Specifies the time to temporarily put the announcement on hold in UTC. The string is represented in HHMM format. This should be specified in conjunction with the resume_at property.&lt;br/&gt;&lt;br/&gt; If both the cease_at and resume_at are not specified, Sendbird server starts to send the announcement at the time of the scheduled_at above.
        /// </summary>
        /// <value>Specifies the time to temporarily put the announcement on hold in UTC. The string is represented in HHMM format. This should be specified in conjunction with the resume_at property.&lt;br/&gt;&lt;br/&gt; If both the cease_at and resume_at are not specified, Sendbird server starts to send the announcement at the time of the scheduled_at above.</value>
        [DataMember(Name="cease_at", EmitDefaultValue=false)]
        public string CeaseAt { get; set; }

        /// <summary>
        /// Specifies the time to automatically resume the on-hold announcement in UTC. The string is represented in HHMM format. This should be specified in conjunction with the cease_at property above.&lt;br/&gt;&lt;br/&gt; If both the cease_at and resume_at are not specified, Sendbird server starts to send the announcement at the time of the scheduled_at above.
        /// </summary>
        /// <value>Specifies the time to automatically resume the on-hold announcement in UTC. The string is represented in HHMM format. This should be specified in conjunction with the cease_at property above.&lt;br/&gt;&lt;br/&gt; If both the cease_at and resume_at are not specified, Sendbird server starts to send the announcement at the time of the scheduled_at above.</value>
        [DataMember(Name="resume_at", EmitDefaultValue=false)]
        public string ResumeAt { get; set; }

        /// <summary>
        /// Specifies the time to permanently end the announcement, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous##2-timestamps) format. If this property is specified, the announcement ends even when the announcement is not sent to all its targets. &lt;br/&gt;&lt;br/&gt; For the announcement to run safely, the end_at time should be set at least 10 minutes later than the scheduled_at time.
        /// </summary>
        /// <value>Specifies the time to permanently end the announcement, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous##2-timestamps) format. If this property is specified, the announcement ends even when the announcement is not sent to all its targets. &lt;br/&gt;&lt;br/&gt; For the announcement to run safely, the end_at time should be set at least 10 minutes later than the scheduled_at time.</value>
        [DataMember(Name="end_at", EmitDefaultValue=false)]
        public int EndAt { get; set; }

        /// <summary>
        /// Determines whether to turn on push notification for the announcement. If set to true, push notifications will be sent for the announcement. (Default: true)
        /// </summary>
        /// <value>Determines whether to turn on push notification for the announcement. If set to true, push notifications will be sent for the announcement. (Default: true)</value>
        [DataMember(Name="enable_push", EmitDefaultValue=false)]
        public bool EnablePush { get; set; }

        /// <summary>
        /// Determines whether to assign an announcement sender as an inviter of the newly created channels. (Default: false)
        /// </summary>
        /// <value>Determines whether to assign an announcement sender as an inviter of the newly created channels. (Default: false)</value>
        [DataMember(Name="assign_sender_as_channel_inviter", EmitDefaultValue=false)]
        public bool AssignSenderAsChannelInviter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduleAnnouncementData {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  TargetAt: ").Append(TargetAt).Append("\n");
            sb.Append("  TargetList: ").Append(TargetList).Append("\n");
            sb.Append("  TargetChannelType: ").Append(TargetChannelType).Append("\n");
            sb.Append("  UniqueId: ").Append(UniqueId).Append("\n");
            sb.Append("  MessageCustomType: ").Append(MessageCustomType).Append("\n");
            sb.Append("  MessageData: ").Append(MessageData).Append("\n");
            sb.Append("  CreateChannel: ").Append(CreateChannel).Append("\n");
            sb.Append("  AnnouncementGroup: ").Append(AnnouncementGroup).Append("\n");
            sb.Append("  CreateChannelOptions: ").Append(CreateChannelOptions).Append("\n");
            sb.Append("  CreateChannelOptionsName: ").Append(CreateChannelOptionsName).Append("\n");
            sb.Append("  CreateChannelOptionsCoverUrl: ").Append(CreateChannelOptionsCoverUrl).Append("\n");
            sb.Append("  CreateChannelOptionsCustomType: ").Append(CreateChannelOptionsCustomType).Append("\n");
            sb.Append("  CreateChannelOptionsData: ").Append(CreateChannelOptionsData).Append("\n");
            sb.Append("  CreateChannelOptionsDistinct: ").Append(CreateChannelOptionsDistinct).Append("\n");
            sb.Append("  ScheduledAt: ").Append(ScheduledAt).Append("\n");
            sb.Append("  CeaseAt: ").Append(CeaseAt).Append("\n");
            sb.Append("  ResumeAt: ").Append(ResumeAt).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  EnablePush: ").Append(EnablePush).Append("\n");
            sb.Append("  AssignSenderAsChannelInviter: ").Append(AssignSenderAsChannelInviter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleAnnouncementData);
        }

        /// <summary>
        /// Returns true if ScheduleAnnouncementData instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleAnnouncementData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleAnnouncementData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.TargetAt == input.TargetAt ||
                    (this.TargetAt != null &&
                    this.TargetAt.Equals(input.TargetAt))
                ) && 
                (
                    this.TargetList == input.TargetList ||
                    this.TargetList != null &&
                    input.TargetList != null &&
                    this.TargetList.SequenceEqual(input.TargetList)
                ) && 
                (
                    this.TargetChannelType == input.TargetChannelType ||
                    (this.TargetChannelType != null &&
                    this.TargetChannelType.Equals(input.TargetChannelType))
                ) && 
                (
                    this.UniqueId == input.UniqueId ||
                    (this.UniqueId != null &&
                    this.UniqueId.Equals(input.UniqueId))
                ) && 
                (
                    this.MessageCustomType == input.MessageCustomType ||
                    (this.MessageCustomType != null &&
                    this.MessageCustomType.Equals(input.MessageCustomType))
                ) && 
                (
                    this.MessageData == input.MessageData ||
                    (this.MessageData != null &&
                    this.MessageData.Equals(input.MessageData))
                ) && 
                (
                    this.CreateChannel == input.CreateChannel ||
                    (this.CreateChannel != null &&
                    this.CreateChannel.Equals(input.CreateChannel))
                ) && 
                (
                    this.AnnouncementGroup == input.AnnouncementGroup ||
                    (this.AnnouncementGroup != null &&
                    this.AnnouncementGroup.Equals(input.AnnouncementGroup))
                ) && 
                (
                    this.CreateChannelOptions == input.CreateChannelOptions ||
                    (this.CreateChannelOptions != null &&
                    this.CreateChannelOptions.Equals(input.CreateChannelOptions))
                ) && 
                (
                    this.CreateChannelOptionsName == input.CreateChannelOptionsName ||
                    (this.CreateChannelOptionsName != null &&
                    this.CreateChannelOptionsName.Equals(input.CreateChannelOptionsName))
                ) && 
                (
                    this.CreateChannelOptionsCoverUrl == input.CreateChannelOptionsCoverUrl ||
                    (this.CreateChannelOptionsCoverUrl != null &&
                    this.CreateChannelOptionsCoverUrl.Equals(input.CreateChannelOptionsCoverUrl))
                ) && 
                (
                    this.CreateChannelOptionsCustomType == input.CreateChannelOptionsCustomType ||
                    (this.CreateChannelOptionsCustomType != null &&
                    this.CreateChannelOptionsCustomType.Equals(input.CreateChannelOptionsCustomType))
                ) && 
                (
                    this.CreateChannelOptionsData == input.CreateChannelOptionsData ||
                    (this.CreateChannelOptionsData != null &&
                    this.CreateChannelOptionsData.Equals(input.CreateChannelOptionsData))
                ) && 
                (
                    this.CreateChannelOptionsDistinct == input.CreateChannelOptionsDistinct ||
                    (this.CreateChannelOptionsDistinct != null &&
                    this.CreateChannelOptionsDistinct.Equals(input.CreateChannelOptionsDistinct))
                ) && 
                (
                    this.ScheduledAt == input.ScheduledAt ||
                    (this.ScheduledAt != null &&
                    this.ScheduledAt.Equals(input.ScheduledAt))
                ) && 
                (
                    this.CeaseAt == input.CeaseAt ||
                    (this.CeaseAt != null &&
                    this.CeaseAt.Equals(input.CeaseAt))
                ) && 
                (
                    this.ResumeAt == input.ResumeAt ||
                    (this.ResumeAt != null &&
                    this.ResumeAt.Equals(input.ResumeAt))
                ) && 
                (
                    this.EndAt == input.EndAt ||
                    (this.EndAt != null &&
                    this.EndAt.Equals(input.EndAt))
                ) && 
                (
                    this.EnablePush == input.EnablePush ||
                    (this.EnablePush != null &&
                    this.EnablePush.Equals(input.EnablePush))
                ) && 
                (
                    this.AssignSenderAsChannelInviter == input.AssignSenderAsChannelInviter ||
                    (this.AssignSenderAsChannelInviter != null &&
                    this.AssignSenderAsChannelInviter.Equals(input.AssignSenderAsChannelInviter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.MessageType != null)
                    hashCode = hashCode * 59 + this.MessageType.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.TargetAt != null)
                    hashCode = hashCode * 59 + this.TargetAt.GetHashCode();
                if (this.TargetList != null)
                    hashCode = hashCode * 59 + this.TargetList.GetHashCode();
                if (this.TargetChannelType != null)
                    hashCode = hashCode * 59 + this.TargetChannelType.GetHashCode();
                if (this.UniqueId != null)
                    hashCode = hashCode * 59 + this.UniqueId.GetHashCode();
                if (this.MessageCustomType != null)
                    hashCode = hashCode * 59 + this.MessageCustomType.GetHashCode();
                if (this.MessageData != null)
                    hashCode = hashCode * 59 + this.MessageData.GetHashCode();
                if (this.CreateChannel != null)
                    hashCode = hashCode * 59 + this.CreateChannel.GetHashCode();
                if (this.AnnouncementGroup != null)
                    hashCode = hashCode * 59 + this.AnnouncementGroup.GetHashCode();
                if (this.CreateChannelOptions != null)
                    hashCode = hashCode * 59 + this.CreateChannelOptions.GetHashCode();
                if (this.CreateChannelOptionsName != null)
                    hashCode = hashCode * 59 + this.CreateChannelOptionsName.GetHashCode();
                if (this.CreateChannelOptionsCoverUrl != null)
                    hashCode = hashCode * 59 + this.CreateChannelOptionsCoverUrl.GetHashCode();
                if (this.CreateChannelOptionsCustomType != null)
                    hashCode = hashCode * 59 + this.CreateChannelOptionsCustomType.GetHashCode();
                if (this.CreateChannelOptionsData != null)
                    hashCode = hashCode * 59 + this.CreateChannelOptionsData.GetHashCode();
                if (this.CreateChannelOptionsDistinct != null)
                    hashCode = hashCode * 59 + this.CreateChannelOptionsDistinct.GetHashCode();
                if (this.ScheduledAt != null)
                    hashCode = hashCode * 59 + this.ScheduledAt.GetHashCode();
                if (this.CeaseAt != null)
                    hashCode = hashCode * 59 + this.CeaseAt.GetHashCode();
                if (this.ResumeAt != null)
                    hashCode = hashCode * 59 + this.ResumeAt.GetHashCode();
                if (this.EndAt != null)
                    hashCode = hashCode * 59 + this.EndAt.GetHashCode();
                if (this.EnablePush != null)
                    hashCode = hashCode * 59 + this.EnablePush.GetHashCode();
                if (this.AssignSenderAsChannelInviter != null)
                    hashCode = hashCode * 59 + this.AssignSenderAsChannelInviter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
