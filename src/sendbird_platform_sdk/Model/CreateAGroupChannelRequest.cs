/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// CreateAGroupChannelRequest
    /// </summary>
    [DataContract]
    public partial class CreateAGroupChannelRequest :  IEquatable<CreateAGroupChannelRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAGroupChannelRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAGroupChannelRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAGroupChannelRequest" /> class.
        /// </summary>
        /// <param name="accessCode">accessCode.</param>
        /// <param name="blockSdkUserChannelJoin">blockSdkUserChannelJoin.</param>
        /// <param name="channelUrl">channelUrl.</param>
        /// <param name="coverFile">Uploads a file for the channel cover image..</param>
        /// <param name="coverUrl">coverUrl.</param>
        /// <param name="customType">customType.</param>
        /// <param name="data">data.</param>
        /// <param name="hiddenStatus">Specifies one or more key-value pair items which set the channel&#39;s hidden status for each user. The key should be a user_id and the value should be their hidden status. Acceptable values are limited to the following:&lt;br /&gt;- unhidden (default): the channel is included in when retrieving a list of group channels.&lt;br /&gt;- hidden_allow_auto_unhide: the channel automatically gets unhidden when receiving a new message.&lt;br /&gt;- hidden_prevent_auto_unhide: the channel keeps hidden though receiving a new message..</param>
        /// <param name="invitationStatus">Specifies one or more key-value pair items which set the invitation status of each user invited to the channel. The key should be a user_id and the value should be their joining status. Acceptable values are joined, invited_by_friend, and invited_by_non_friend. (Default: joined).</param>
        /// <param name="inviterId">inviterId.</param>
        /// <param name="isDistinct">isDistinct.</param>
        /// <param name="isEphemeral">isEphemeral.</param>
        /// <param name="isPublic">isPublic.</param>
        /// <param name="isSuper">isSuper.</param>
        /// <param name="name">name.</param>
        /// <param name="operatorIds">operatorIds.</param>
        /// <param name="strict">strict.</param>
        /// <param name="userIds">userIds.</param>
        /// <param name="users">users (required).</param>
        public CreateAGroupChannelRequest(string accessCode = default(string), bool? blockSdkUserChannelJoin = default(bool?), string channelUrl = default(string), System.IO.Stream coverFile = default(System.IO.Stream), string coverUrl = default(string), string customType = default(string), string data = default(string), Object hiddenStatus = default(Object), Object invitationStatus = default(Object), string inviterId = default(string), bool isDistinct = default(bool), bool isEphemeral = default(bool), bool isPublic = default(bool), bool isSuper = default(bool), string name = default(string), List<string> operatorIds = default(List<string>), bool strict = default(bool), List<string> userIds = default(List<string>), List<SendbirdUser> users = default(List<SendbirdUser>))
        {
            this.AccessCode = accessCode;
            this.BlockSdkUserChannelJoin = blockSdkUserChannelJoin;
            // to ensure "users" is required (not null)
            if (users == null)
            {
                throw new InvalidDataException("users is a required property for CreateAGroupChannelRequest and cannot be null");
            }
            else
            {
                this.Users = users;
            }

            this.AccessCode = accessCode;
            this.BlockSdkUserChannelJoin = blockSdkUserChannelJoin;
            this.ChannelUrl = channelUrl;
            this.CoverFile = coverFile;
            this.CoverUrl = coverUrl;
            this.CustomType = customType;
            this.Data = data;
            this.HiddenStatus = hiddenStatus;
            this.InvitationStatus = invitationStatus;
            this.InviterId = inviterId;
            this.IsDistinct = isDistinct;
            this.IsEphemeral = isEphemeral;
            this.IsPublic = isPublic;
            this.IsSuper = isSuper;
            this.Name = name;
            this.OperatorIds = operatorIds;
            this.Strict = strict;
            this.UserIds = userIds;
        }

        /// <summary>
        /// Gets or Sets AccessCode
        /// </summary>
        [DataMember(Name="access_code", EmitDefaultValue=true)]
        public string AccessCode { get; set; }

        /// <summary>
        /// Gets or Sets BlockSdkUserChannelJoin
        /// </summary>
        [DataMember(Name="block_sdk_user_channel_join", EmitDefaultValue=true)]
        public bool? BlockSdkUserChannelJoin { get; set; }

        /// <summary>
        /// Gets or Sets ChannelUrl
        /// </summary>
        [DataMember(Name="channel_url", EmitDefaultValue=false)]
        public string ChannelUrl { get; set; }

        /// <summary>
        /// Uploads a file for the channel cover image.
        /// </summary>
        /// <value>Uploads a file for the channel cover image.</value>
        [DataMember(Name="cover_file", EmitDefaultValue=false)]
        public System.IO.Stream CoverFile { get; set; }

        /// <summary>
        /// Gets or Sets CoverUrl
        /// </summary>
        [DataMember(Name="cover_url", EmitDefaultValue=false)]
        public string CoverUrl { get; set; }

        /// <summary>
        /// Gets or Sets CustomType
        /// </summary>
        [DataMember(Name="custom_type", EmitDefaultValue=false)]
        public string CustomType { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Specifies one or more key-value pair items which set the channel&#39;s hidden status for each user. The key should be a user_id and the value should be their hidden status. Acceptable values are limited to the following:&lt;br /&gt;- unhidden (default): the channel is included in when retrieving a list of group channels.&lt;br /&gt;- hidden_allow_auto_unhide: the channel automatically gets unhidden when receiving a new message.&lt;br /&gt;- hidden_prevent_auto_unhide: the channel keeps hidden though receiving a new message.
        /// </summary>
        /// <value>Specifies one or more key-value pair items which set the channel&#39;s hidden status for each user. The key should be a user_id and the value should be their hidden status. Acceptable values are limited to the following:&lt;br /&gt;- unhidden (default): the channel is included in when retrieving a list of group channels.&lt;br /&gt;- hidden_allow_auto_unhide: the channel automatically gets unhidden when receiving a new message.&lt;br /&gt;- hidden_prevent_auto_unhide: the channel keeps hidden though receiving a new message.</value>
        [DataMember(Name="hidden_status", EmitDefaultValue=false)]
        public Object HiddenStatus { get; set; }

        /// <summary>
        /// Specifies one or more key-value pair items which set the invitation status of each user invited to the channel. The key should be a user_id and the value should be their joining status. Acceptable values are joined, invited_by_friend, and invited_by_non_friend. (Default: joined)
        /// </summary>
        /// <value>Specifies one or more key-value pair items which set the invitation status of each user invited to the channel. The key should be a user_id and the value should be their joining status. Acceptable values are joined, invited_by_friend, and invited_by_non_friend. (Default: joined)</value>
        [DataMember(Name="invitation_status", EmitDefaultValue=false)]
        public Object InvitationStatus { get; set; }

        /// <summary>
        /// Gets or Sets InviterId
        /// </summary>
        [DataMember(Name="inviter_id", EmitDefaultValue=false)]
        public string InviterId { get; set; }

        /// <summary>
        /// Gets or Sets IsDistinct
        /// </summary>
        [DataMember(Name="is_distinct", EmitDefaultValue=false)]
        public bool IsDistinct { get; set; }

        /// <summary>
        /// Gets or Sets IsEphemeral
        /// </summary>
        [DataMember(Name="is_ephemeral", EmitDefaultValue=false)]
        public bool IsEphemeral { get; set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name="is_public", EmitDefaultValue=false)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets IsSuper
        /// </summary>
        [DataMember(Name="is_super", EmitDefaultValue=false)]
        public bool IsSuper { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OperatorIds
        /// </summary>
        [DataMember(Name="operator_ids", EmitDefaultValue=false)]
        public List<string> OperatorIds { get; set; }

        /// <summary>
        /// Gets or Sets Strict
        /// </summary>
        [DataMember(Name="strict", EmitDefaultValue=false)]
        public bool Strict { get; set; }

        /// <summary>
        /// Gets or Sets UserIds
        /// </summary>
        [DataMember(Name="user_ids", EmitDefaultValue=false)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=true)]
        public List<SendbirdUser> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAGroupChannelRequest {\n");
            sb.Append("  AccessCode: ").Append(AccessCode).Append("\n");
            sb.Append("  BlockSdkUserChannelJoin: ").Append(BlockSdkUserChannelJoin).Append("\n");
            sb.Append("  ChannelUrl: ").Append(ChannelUrl).Append("\n");
            sb.Append("  CoverFile: ").Append(CoverFile).Append("\n");
            sb.Append("  CoverUrl: ").Append(CoverUrl).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  HiddenStatus: ").Append(HiddenStatus).Append("\n");
            sb.Append("  InvitationStatus: ").Append(InvitationStatus).Append("\n");
            sb.Append("  InviterId: ").Append(InviterId).Append("\n");
            sb.Append("  IsDistinct: ").Append(IsDistinct).Append("\n");
            sb.Append("  IsEphemeral: ").Append(IsEphemeral).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  IsSuper: ").Append(IsSuper).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OperatorIds: ").Append(OperatorIds).Append("\n");
            sb.Append("  Strict: ").Append(Strict).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAGroupChannelRequest);
        }

        /// <summary>
        /// Returns true if CreateAGroupChannelRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAGroupChannelRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAGroupChannelRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessCode == input.AccessCode ||
                    (this.AccessCode != null &&
                    this.AccessCode.Equals(input.AccessCode))
                ) && 
                (
                    this.BlockSdkUserChannelJoin == input.BlockSdkUserChannelJoin ||
                    (this.BlockSdkUserChannelJoin != null &&
                    this.BlockSdkUserChannelJoin.Equals(input.BlockSdkUserChannelJoin))
                ) && 
                (
                    this.ChannelUrl == input.ChannelUrl ||
                    (this.ChannelUrl != null &&
                    this.ChannelUrl.Equals(input.ChannelUrl))
                ) && 
                (
                    this.CoverFile == input.CoverFile ||
                    (this.CoverFile != null &&
                    this.CoverFile.Equals(input.CoverFile))
                ) && 
                (
                    this.CoverUrl == input.CoverUrl ||
                    (this.CoverUrl != null &&
                    this.CoverUrl.Equals(input.CoverUrl))
                ) && 
                (
                    this.CustomType == input.CustomType ||
                    (this.CustomType != null &&
                    this.CustomType.Equals(input.CustomType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.HiddenStatus == input.HiddenStatus ||
                    (this.HiddenStatus != null &&
                    this.HiddenStatus.Equals(input.HiddenStatus))
                ) && 
                (
                    this.InvitationStatus == input.InvitationStatus ||
                    (this.InvitationStatus != null &&
                    this.InvitationStatus.Equals(input.InvitationStatus))
                ) && 
                (
                    this.InviterId == input.InviterId ||
                    (this.InviterId != null &&
                    this.InviterId.Equals(input.InviterId))
                ) && 
                (
                    this.IsDistinct == input.IsDistinct ||
                    (this.IsDistinct != null &&
                    this.IsDistinct.Equals(input.IsDistinct))
                ) && 
                (
                    this.IsEphemeral == input.IsEphemeral ||
                    (this.IsEphemeral != null &&
                    this.IsEphemeral.Equals(input.IsEphemeral))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.IsSuper == input.IsSuper ||
                    (this.IsSuper != null &&
                    this.IsSuper.Equals(input.IsSuper))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OperatorIds == input.OperatorIds ||
                    this.OperatorIds != null &&
                    input.OperatorIds != null &&
                    this.OperatorIds.SequenceEqual(input.OperatorIds)
                ) && 
                (
                    this.Strict == input.Strict ||
                    (this.Strict != null &&
                    this.Strict.Equals(input.Strict))
                ) && 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    input.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessCode != null)
                    hashCode = hashCode * 59 + this.AccessCode.GetHashCode();
                if (this.BlockSdkUserChannelJoin != null)
                    hashCode = hashCode * 59 + this.BlockSdkUserChannelJoin.GetHashCode();
                if (this.ChannelUrl != null)
                    hashCode = hashCode * 59 + this.ChannelUrl.GetHashCode();
                if (this.CoverFile != null)
                    hashCode = hashCode * 59 + this.CoverFile.GetHashCode();
                if (this.CoverUrl != null)
                    hashCode = hashCode * 59 + this.CoverUrl.GetHashCode();
                if (this.CustomType != null)
                    hashCode = hashCode * 59 + this.CustomType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.HiddenStatus != null)
                    hashCode = hashCode * 59 + this.HiddenStatus.GetHashCode();
                if (this.InvitationStatus != null)
                    hashCode = hashCode * 59 + this.InvitationStatus.GetHashCode();
                if (this.InviterId != null)
                    hashCode = hashCode * 59 + this.InviterId.GetHashCode();
                if (this.IsDistinct != null)
                    hashCode = hashCode * 59 + this.IsDistinct.GetHashCode();
                if (this.IsEphemeral != null)
                    hashCode = hashCode * 59 + this.IsEphemeral.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.IsSuper != null)
                    hashCode = hashCode * 59 + this.IsSuper.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OperatorIds != null)
                    hashCode = hashCode * 59 + this.OperatorIds.GetHashCode();
                if (this.Strict != null)
                    hashCode = hashCode * 59 + this.Strict.GetHashCode();
                if (this.UserIds != null)
                    hashCode = hashCode * 59 + this.UserIds.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
