/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SendBirdFileMessageParams
    /// </summary>
    [DataContract]
    public partial class SendBirdFileMessageParams :  IEquatable<SendBirdFileMessageParams>, IValidatableObject
    {
        /// <summary>
        /// Defines MentionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MentionTypeEnum
        {
            /// <summary>
            /// Enum Channel for value: channel
            /// </summary>
            [EnumMember(Value = "channel")]
            Channel = 1,

            /// <summary>
            /// Enum Users for value: users
            /// </summary>
            [EnumMember(Value = "users")]
            Users = 2

        }

        /// <summary>
        /// Gets or Sets MentionType
        /// </summary>
        [DataMember(Name="mention_type", EmitDefaultValue=false)]
        public MentionTypeEnum? MentionType { get; set; }
        /// <summary>
        /// Defines PushNotificationDeliveryOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PushNotificationDeliveryOptionEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,

            /// <summary>
            /// Enum Suppress for value: suppress
            /// </summary>
            [EnumMember(Value = "suppress")]
            Suppress = 2

        }

        /// <summary>
        /// Gets or Sets PushNotificationDeliveryOption
        /// </summary>
        [DataMember(Name="push_notification_delivery_option", EmitDefaultValue=false)]
        public PushNotificationDeliveryOptionEnum? PushNotificationDeliveryOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendBirdFileMessageParams" /> class.
        /// </summary>
        /// <param name="appleCriticalAlertOptions">appleCriticalAlertOptions.</param>
        /// <param name="customType">customType.</param>
        /// <param name="data">data.</param>
        /// <param name="file">file.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="fileSize">fileSize.</param>
        /// <param name="fileUrl">fileUrl.</param>
        /// <param name="isReplyToChannel">isReplyToChannel.</param>
        /// <param name="mentionType">mentionType.</param>
        /// <param name="mentionedUserIds">mentionedUserIds.</param>
        /// <param name="mentionedUsers">mentionedUsers.</param>
        /// <param name="metaArrayKeys">metaArrayKeys.</param>
        /// <param name="metaArrays">metaArrays.</param>
        /// <param name="mimeType">mimeType.</param>
        /// <param name="parentMessageId">parentMessageId.</param>
        /// <param name="pushNotificationDeliveryOption">pushNotificationDeliveryOption.</param>
        /// <param name="thumbnailSizes">thumbnailSizes.</param>
        public SendBirdFileMessageParams(SendBirdAppleCriticalAlertOptions appleCriticalAlertOptions = default(SendBirdAppleCriticalAlertOptions), string customType = default, string data = default, Blob file = default(Blob), string fileName = default, decimal fileSize = default(decimal), string fileUrl = default, bool isReplyToChannel = default(bool), MentionTypeEnum? mentionType = default(MentionTypeEnum?), List<string> mentionedUserIds = default, List<SendBirdUser> mentionedUsers = default(List<SendBirdUser>), List<string> metaArrayKeys = default, List<SendBirdMessageMetaArray> metaArrays = default(List<SendBirdMessageMetaArray>), string mimeType = default, decimal parentMessageId = default(decimal), PushNotificationDeliveryOptionEnum? pushNotificationDeliveryOption = default(PushNotificationDeliveryOptionEnum?), List<SendBirdThumbnailSize> thumbnailSizes = default(List<SendBirdThumbnailSize>))
        {
            this.AppleCriticalAlertOptions = appleCriticalAlertOptions;
            this.CustomType = customType;
            this.Data = data;
            this.File = file;
            this.FileName = fileName;
            this.FileSize = fileSize;
            this.FileUrl = fileUrl;
            this.IsReplyToChannel = isReplyToChannel;
            this.MentionType = mentionType;
            this.MentionedUserIds = mentionedUserIds;
            this.MentionedUsers = mentionedUsers;
            this.MetaArrayKeys = metaArrayKeys;
            this.MetaArrays = metaArrays;
            this.MimeType = mimeType;
            this.ParentMessageId = parentMessageId;
            this.PushNotificationDeliveryOption = pushNotificationDeliveryOption;
            this.ThumbnailSizes = thumbnailSizes;
        }

        /// <summary>
        /// Gets or Sets AppleCriticalAlertOptions
        /// </summary>
        [DataMember(Name="apple_critical_alert_options", EmitDefaultValue=false)]
        public SendBirdAppleCriticalAlertOptions AppleCriticalAlertOptions { get; set; }

        /// <summary>
        /// Gets or Sets CustomType
        /// </summary>
        [DataMember(Name="custom_type", EmitDefaultValue=false)]
        public string CustomType { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public Blob File { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name="file_size", EmitDefaultValue=false)]
        public decimal FileSize { get; set; }

        /// <summary>
        /// Gets or Sets FileUrl
        /// </summary>
        [DataMember(Name="file_url", EmitDefaultValue=false)]
        public string FileUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsReplyToChannel
        /// </summary>
        [DataMember(Name="is_reply_to_channel", EmitDefaultValue=false)]
        public bool IsReplyToChannel { get; set; }


        /// <summary>
        /// Gets or Sets MentionedUserIds
        /// </summary>
        [DataMember(Name="mentioned_user_ids", EmitDefaultValue=false)]
        public List<string> MentionedUserIds { get; set; }

        /// <summary>
        /// Gets or Sets MentionedUsers
        /// </summary>
        [DataMember(Name="mentioned_users", EmitDefaultValue=false)]
        public List<SendBirdUser> MentionedUsers { get; set; }

        /// <summary>
        /// Gets or Sets MetaArrayKeys
        /// </summary>
        [DataMember(Name="meta_array_keys", EmitDefaultValue=false)]
        public List<string> MetaArrayKeys { get; set; }

        /// <summary>
        /// Gets or Sets MetaArrays
        /// </summary>
        [DataMember(Name="meta_arrays", EmitDefaultValue=false)]
        public List<SendBirdMessageMetaArray> MetaArrays { get; set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [DataMember(Name="mime_type", EmitDefaultValue=false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets ParentMessageId
        /// </summary>
        [DataMember(Name="parent_message_id", EmitDefaultValue=false)]
        public decimal ParentMessageId { get; set; }


        /// <summary>
        /// Gets or Sets ThumbnailSizes
        /// </summary>
        [DataMember(Name="thumbnail_sizes", EmitDefaultValue=false)]
        public List<SendBirdThumbnailSize> ThumbnailSizes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendBirdFileMessageParams {\n");
            sb.Append("  AppleCriticalAlertOptions: ").Append(AppleCriticalAlertOptions).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("  IsReplyToChannel: ").Append(IsReplyToChannel).Append("\n");
            sb.Append("  MentionType: ").Append(MentionType).Append("\n");
            sb.Append("  MentionedUserIds: ").Append(MentionedUserIds).Append("\n");
            sb.Append("  MentionedUsers: ").Append(MentionedUsers).Append("\n");
            sb.Append("  MetaArrayKeys: ").Append(MetaArrayKeys).Append("\n");
            sb.Append("  MetaArrays: ").Append(MetaArrays).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  ParentMessageId: ").Append(ParentMessageId).Append("\n");
            sb.Append("  PushNotificationDeliveryOption: ").Append(PushNotificationDeliveryOption).Append("\n");
            sb.Append("  ThumbnailSizes: ").Append(ThumbnailSizes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendBirdFileMessageParams);
        }

        /// <summary>
        /// Returns true if SendBirdFileMessageParams instances are equal
        /// </summary>
        /// <param name="input">Instance of SendBirdFileMessageParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendBirdFileMessageParams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppleCriticalAlertOptions == input.AppleCriticalAlertOptions ||
                    (this.AppleCriticalAlertOptions != null &&
                    this.AppleCriticalAlertOptions.Equals(input.AppleCriticalAlertOptions))
                ) && 
                (
                    this.CustomType == input.CustomType ||
                    (this.CustomType != null &&
                    this.CustomType.Equals(input.CustomType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.FileUrl == input.FileUrl ||
                    (this.FileUrl != null &&
                    this.FileUrl.Equals(input.FileUrl))
                ) && 
                (
                    this.IsReplyToChannel == input.IsReplyToChannel ||
                    (this.IsReplyToChannel != null &&
                    this.IsReplyToChannel.Equals(input.IsReplyToChannel))
                ) && 
                (
                    this.MentionType == input.MentionType ||
                    (this.MentionType != null &&
                    this.MentionType.Equals(input.MentionType))
                ) && 
                (
                    this.MentionedUserIds == input.MentionedUserIds ||
                    this.MentionedUserIds != null &&
                    input.MentionedUserIds != null &&
                    this.MentionedUserIds.SequenceEqual(input.MentionedUserIds)
                ) && 
                (
                    this.MentionedUsers == input.MentionedUsers ||
                    this.MentionedUsers != null &&
                    input.MentionedUsers != null &&
                    this.MentionedUsers.SequenceEqual(input.MentionedUsers)
                ) && 
                (
                    this.MetaArrayKeys == input.MetaArrayKeys ||
                    this.MetaArrayKeys != null &&
                    input.MetaArrayKeys != null &&
                    this.MetaArrayKeys.SequenceEqual(input.MetaArrayKeys)
                ) && 
                (
                    this.MetaArrays == input.MetaArrays ||
                    this.MetaArrays != null &&
                    input.MetaArrays != null &&
                    this.MetaArrays.SequenceEqual(input.MetaArrays)
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.ParentMessageId == input.ParentMessageId ||
                    (this.ParentMessageId != null &&
                    this.ParentMessageId.Equals(input.ParentMessageId))
                ) && 
                (
                    this.PushNotificationDeliveryOption == input.PushNotificationDeliveryOption ||
                    (this.PushNotificationDeliveryOption != null &&
                    this.PushNotificationDeliveryOption.Equals(input.PushNotificationDeliveryOption))
                ) && 
                (
                    this.ThumbnailSizes == input.ThumbnailSizes ||
                    this.ThumbnailSizes != null &&
                    input.ThumbnailSizes != null &&
                    this.ThumbnailSizes.SequenceEqual(input.ThumbnailSizes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppleCriticalAlertOptions != null)
                    hashCode = hashCode * 59 + this.AppleCriticalAlertOptions.GetHashCode();
                if (this.CustomType != null)
                    hashCode = hashCode * 59 + this.CustomType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.File != null)
                    hashCode = hashCode * 59 + this.File.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.FileUrl != null)
                    hashCode = hashCode * 59 + this.FileUrl.GetHashCode();
                if (this.IsReplyToChannel != null)
                    hashCode = hashCode * 59 + this.IsReplyToChannel.GetHashCode();
                if (this.MentionType != null)
                    hashCode = hashCode * 59 + this.MentionType.GetHashCode();
                if (this.MentionedUserIds != null)
                    hashCode = hashCode * 59 + this.MentionedUserIds.GetHashCode();
                if (this.MentionedUsers != null)
                    hashCode = hashCode * 59 + this.MentionedUsers.GetHashCode();
                if (this.MetaArrayKeys != null)
                    hashCode = hashCode * 59 + this.MetaArrayKeys.GetHashCode();
                if (this.MetaArrays != null)
                    hashCode = hashCode * 59 + this.MetaArrays.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.ParentMessageId != null)
                    hashCode = hashCode * 59 + this.ParentMessageId.GetHashCode();
                if (this.PushNotificationDeliveryOption != null)
                    hashCode = hashCode * 59 + this.PushNotificationDeliveryOption.GetHashCode();
                if (this.ThumbnailSizes != null)
                    hashCode = hashCode * 59 + this.ThumbnailSizes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
