/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SendMessageData
    /// </summary>
    [DataContract]
    public partial class SendMessageData :  IEquatable<SendMessageData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMessageData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendMessageData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMessageData" /> class.
        /// </summary>
        /// <param name="userId">Specifies the user ID of the sender. (required).</param>
        /// <param name="channelType">Specifies the type of the channel. Either open_channels or group_channels..</param>
        /// <param name="channelUrl">Specifies the URL of the channel to send a message to..</param>
        /// <param name="messageType">Specifies the type of the message as MESG, FILE or ADMM (required).</param>
        /// <param name="message">Specifies the content of the message. (required).</param>
        /// <param name="customType">Specifies a custom message type which is used for message grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views..</param>
        /// <param name="data">Specifies additional message information such as custom font size, font type or &#x60;JSON&#x60; formatted string..</param>
        /// <param name="sendPush">Determines whether to send a push notification for the message to the members of the channel (applicable to group channels only). Unlike text and file messages, a push notification for an admin message is not sent by default. (Default: true).</param>
        /// <param name="mentionType">Specifies the mentioning type which indicates the user scope who will get a notification for the message. Acceptable values are users and channel. If set to users, only the specified users with the mentioned_users property below will get notified. If set to channel, all users in the channel will get notified. (Default: users).</param>
        /// <param name="mentionedUserIds">Specifies an array of one or more IDs of the users who will get a notification for the message..</param>
        /// <param name="isSilent">Determines whether to send a message without updating some of the channel properties. If a message is sent in a channel, with this property set to true, the channel&#39;s last_message is updated only for the sender while its unread_message_count remains unchanged for all channel members. Also, the message doesn&#39;t send a push notification to message receivers. If the message is sent to a hidden channel, the channel still remains hidden. (Default: false)&lt;/br&gt;&lt;/br&gt;  Once the value of this property is set, it can&#39;t be reverted..</param>
        /// <param name="sortedMetaarray">Specifies a &#x60;JSON&#x60; object of one or more key-values items which store additional message information. Each item consists of a key and the values in an array. Items are saved and will be returned in the exact order they&#39;ve been specified..</param>
        /// <param name="createdAt">Specifies the time that the message was sent, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. This property can be used when migrating the messages of other system to Sendbird server. If specified, the server sets the message&#39;s creation time as the property value..</param>
        /// <param name="dedupId">Specifies the unique message ID created by other system. In general, this property is used to prevent the same message data from getting inserted when migrating the messages of the other system to Sendbird server. If specified, the server performs a duplicate check using the property value..</param>
        /// <param name="apnsBundleId">Specifies the bundle ID of the client app in order to send a push notification to iOS devices. You can find this in Settings &gt; Chat &gt; Notifications &gt; Push notification services.</param>
        /// <param name="sound">Specifies the name of the file that sounds for critical alerts..</param>
        /// <param name="volume">Specifies the volume of the critical alert sound. The volume ranges from 0.0 to 1.0, which indicates silent and full volume, respectively. (Default 1.0).</param>
        /// <param name="url">url.</param>
        /// <param name="file">file.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="fileSize">fileSize.</param>
        /// <param name="fileType">fileType.</param>
        /// <param name="thumbnails">thumbnails.</param>
        /// <param name="thumbnail1">thumbnail1.</param>
        /// <param name="thumbnail2">thumbnail2.</param>
        /// <param name="thumbnail3">thumbnail3.</param>
        public SendMessageData(string userId = default, string channelType = default, string channelUrl = default, string messageType = default, string message = default, string customType = default, string data = default, bool sendPush = default(bool), string mentionType = default, List<string> mentionedUserIds = default, bool isSilent = default(bool), string sortedMetaarray = default, int createdAt = default(int), string dedupId = default, string apnsBundleId = default, string sound = default, decimal volume = default(decimal), string url = default, string file = default, string fileName = default, decimal fileSize = default(decimal), string fileType = default, List<string> thumbnails = default, string thumbnail1 = default, string thumbnail2 = default, string thumbnail3 = default)
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for SendMessageData and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }

            // to ensure "messageType" is required (not null)
            if (messageType == null)
            {
                throw new InvalidDataException("messageType is a required property for SendMessageData and cannot be null");
            }
            else
            {
                this.MessageType = messageType;
            }

            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for SendMessageData and cannot be null");
            }
            else
            {
                this.Message = message;
            }

            this.ChannelType = channelType;
            this.ChannelUrl = channelUrl;
            this.CustomType = customType;
            this.Data = data;
            this.SendPush = sendPush;
            this.MentionType = mentionType;
            this.MentionedUserIds = mentionedUserIds;
            this.IsSilent = isSilent;
            this.SortedMetaarray = sortedMetaarray;
            this.CreatedAt = createdAt;
            this.DedupId = dedupId;
            this.ApnsBundleId = apnsBundleId;
            this.Sound = sound;
            this.Volume = volume;
            this.Url = url;
            this.File = file;
            this.FileName = fileName;
            this.FileSize = fileSize;
            this.FileType = fileType;
            this.Thumbnails = thumbnails;
            this.Thumbnail1 = thumbnail1;
            this.Thumbnail2 = thumbnail2;
            this.Thumbnail3 = thumbnail3;
        }

        /// <summary>
        /// Specifies the user ID of the sender.
        /// </summary>
        /// <value>Specifies the user ID of the sender.</value>
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public string UserId { get; set; }

        /// <summary>
        /// Specifies the type of the channel. Either open_channels or group_channels.
        /// </summary>
        /// <value>Specifies the type of the channel. Either open_channels or group_channels.</value>
        [DataMember(Name="channel_type", EmitDefaultValue=false)]
        public string ChannelType { get; set; }

        /// <summary>
        /// Specifies the URL of the channel to send a message to.
        /// </summary>
        /// <value>Specifies the URL of the channel to send a message to.</value>
        [DataMember(Name="channel_url", EmitDefaultValue=false)]
        public string ChannelUrl { get; set; }

        /// <summary>
        /// Specifies the type of the message as MESG, FILE or ADMM
        /// </summary>
        /// <value>Specifies the type of the message as MESG, FILE or ADMM</value>
        [DataMember(Name="message_type", EmitDefaultValue=true)]
        public string MessageType { get; set; }

        /// <summary>
        /// Specifies the content of the message.
        /// </summary>
        /// <value>Specifies the content of the message.</value>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// Specifies a custom message type which is used for message grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views.
        /// </summary>
        /// <value>Specifies a custom message type which is used for message grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views.</value>
        [DataMember(Name="custom_type", EmitDefaultValue=false)]
        public string CustomType { get; set; }

        /// <summary>
        /// Specifies additional message information such as custom font size, font type or &#x60;JSON&#x60; formatted string.
        /// </summary>
        /// <value>Specifies additional message information such as custom font size, font type or &#x60;JSON&#x60; formatted string.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Determines whether to send a push notification for the message to the members of the channel (applicable to group channels only). Unlike text and file messages, a push notification for an admin message is not sent by default. (Default: true)
        /// </summary>
        /// <value>Determines whether to send a push notification for the message to the members of the channel (applicable to group channels only). Unlike text and file messages, a push notification for an admin message is not sent by default. (Default: true)</value>
        [DataMember(Name="send_push", EmitDefaultValue=false)]
        public bool SendPush { get; set; }

        /// <summary>
        /// Specifies the mentioning type which indicates the user scope who will get a notification for the message. Acceptable values are users and channel. If set to users, only the specified users with the mentioned_users property below will get notified. If set to channel, all users in the channel will get notified. (Default: users)
        /// </summary>
        /// <value>Specifies the mentioning type which indicates the user scope who will get a notification for the message. Acceptable values are users and channel. If set to users, only the specified users with the mentioned_users property below will get notified. If set to channel, all users in the channel will get notified. (Default: users)</value>
        [DataMember(Name="mention_type", EmitDefaultValue=false)]
        public string MentionType { get; set; }

        /// <summary>
        /// Specifies an array of one or more IDs of the users who will get a notification for the message.
        /// </summary>
        /// <value>Specifies an array of one or more IDs of the users who will get a notification for the message.</value>
        [DataMember(Name="mentioned_user_ids", EmitDefaultValue=false)]
        public List<string> MentionedUserIds { get; set; }

        /// <summary>
        /// Determines whether to send a message without updating some of the channel properties. If a message is sent in a channel, with this property set to true, the channel&#39;s last_message is updated only for the sender while its unread_message_count remains unchanged for all channel members. Also, the message doesn&#39;t send a push notification to message receivers. If the message is sent to a hidden channel, the channel still remains hidden. (Default: false)&lt;/br&gt;&lt;/br&gt;  Once the value of this property is set, it can&#39;t be reverted.
        /// </summary>
        /// <value>Determines whether to send a message without updating some of the channel properties. If a message is sent in a channel, with this property set to true, the channel&#39;s last_message is updated only for the sender while its unread_message_count remains unchanged for all channel members. Also, the message doesn&#39;t send a push notification to message receivers. If the message is sent to a hidden channel, the channel still remains hidden. (Default: false)&lt;/br&gt;&lt;/br&gt;  Once the value of this property is set, it can&#39;t be reverted.</value>
        [DataMember(Name="is_silent", EmitDefaultValue=false)]
        public bool IsSilent { get; set; }

        /// <summary>
        /// Specifies a &#x60;JSON&#x60; object of one or more key-values items which store additional message information. Each item consists of a key and the values in an array. Items are saved and will be returned in the exact order they&#39;ve been specified.
        /// </summary>
        /// <value>Specifies a &#x60;JSON&#x60; object of one or more key-values items which store additional message information. Each item consists of a key and the values in an array. Items are saved and will be returned in the exact order they&#39;ve been specified.</value>
        [DataMember(Name="sorted_metaarray", EmitDefaultValue=false)]
        public string SortedMetaarray { get; set; }

        /// <summary>
        /// Specifies the time that the message was sent, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. This property can be used when migrating the messages of other system to Sendbird server. If specified, the server sets the message&#39;s creation time as the property value.
        /// </summary>
        /// <value>Specifies the time that the message was sent, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. This property can be used when migrating the messages of other system to Sendbird server. If specified, the server sets the message&#39;s creation time as the property value.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Specifies the unique message ID created by other system. In general, this property is used to prevent the same message data from getting inserted when migrating the messages of the other system to Sendbird server. If specified, the server performs a duplicate check using the property value.
        /// </summary>
        /// <value>Specifies the unique message ID created by other system. In general, this property is used to prevent the same message data from getting inserted when migrating the messages of the other system to Sendbird server. If specified, the server performs a duplicate check using the property value.</value>
        [DataMember(Name="dedup_id", EmitDefaultValue=false)]
        public string DedupId { get; set; }

        /// <summary>
        /// Specifies the bundle ID of the client app in order to send a push notification to iOS devices. You can find this in Settings &gt; Chat &gt; Notifications &gt; Push notification services
        /// </summary>
        /// <value>Specifies the bundle ID of the client app in order to send a push notification to iOS devices. You can find this in Settings &gt; Chat &gt; Notifications &gt; Push notification services</value>
        [DataMember(Name="apns_bundle_id", EmitDefaultValue=false)]
        public string ApnsBundleId { get; set; }

        /// <summary>
        /// Specifies the name of the file that sounds for critical alerts.
        /// </summary>
        /// <value>Specifies the name of the file that sounds for critical alerts.</value>
        [DataMember(Name="sound", EmitDefaultValue=false)]
        public string Sound { get; set; }

        /// <summary>
        /// Specifies the volume of the critical alert sound. The volume ranges from 0.0 to 1.0, which indicates silent and full volume, respectively. (Default 1.0)
        /// </summary>
        /// <value>Specifies the volume of the critical alert sound. The volume ranges from 0.0 to 1.0, which indicates silent and full volume, respectively. (Default 1.0)</value>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public decimal Volume { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public string File { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="file_name", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name="file_size", EmitDefaultValue=false)]
        public decimal FileSize { get; set; }

        /// <summary>
        /// Gets or Sets FileType
        /// </summary>
        [DataMember(Name="file_type", EmitDefaultValue=false)]
        public string FileType { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnails
        /// </summary>
        [DataMember(Name="thumbnails", EmitDefaultValue=false)]
        public List<string> Thumbnails { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail1
        /// </summary>
        [DataMember(Name="thumbnail1", EmitDefaultValue=false)]
        public string Thumbnail1 { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail2
        /// </summary>
        [DataMember(Name="thumbnail2", EmitDefaultValue=false)]
        public string Thumbnail2 { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail3
        /// </summary>
        [DataMember(Name="thumbnail3", EmitDefaultValue=false)]
        public string Thumbnail3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendMessageData {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ChannelType: ").Append(ChannelType).Append("\n");
            sb.Append("  ChannelUrl: ").Append(ChannelUrl).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  SendPush: ").Append(SendPush).Append("\n");
            sb.Append("  MentionType: ").Append(MentionType).Append("\n");
            sb.Append("  MentionedUserIds: ").Append(MentionedUserIds).Append("\n");
            sb.Append("  IsSilent: ").Append(IsSilent).Append("\n");
            sb.Append("  SortedMetaarray: ").Append(SortedMetaarray).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DedupId: ").Append(DedupId).Append("\n");
            sb.Append("  ApnsBundleId: ").Append(ApnsBundleId).Append("\n");
            sb.Append("  Sound: ").Append(Sound).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FileType: ").Append(FileType).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  Thumbnail1: ").Append(Thumbnail1).Append("\n");
            sb.Append("  Thumbnail2: ").Append(Thumbnail2).Append("\n");
            sb.Append("  Thumbnail3: ").Append(Thumbnail3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendMessageData);
        }

        /// <summary>
        /// Returns true if SendMessageData instances are equal
        /// </summary>
        /// <param name="input">Instance of SendMessageData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendMessageData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ChannelType == input.ChannelType ||
                    (this.ChannelType != null &&
                    this.ChannelType.Equals(input.ChannelType))
                ) && 
                (
                    this.ChannelUrl == input.ChannelUrl ||
                    (this.ChannelUrl != null &&
                    this.ChannelUrl.Equals(input.ChannelUrl))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.CustomType == input.CustomType ||
                    (this.CustomType != null &&
                    this.CustomType.Equals(input.CustomType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.SendPush == input.SendPush ||
                    (this.SendPush != null &&
                    this.SendPush.Equals(input.SendPush))
                ) && 
                (
                    this.MentionType == input.MentionType ||
                    (this.MentionType != null &&
                    this.MentionType.Equals(input.MentionType))
                ) && 
                (
                    this.MentionedUserIds == input.MentionedUserIds ||
                    this.MentionedUserIds != null &&
                    input.MentionedUserIds != null &&
                    this.MentionedUserIds.SequenceEqual(input.MentionedUserIds)
                ) && 
                (
                    this.IsSilent == input.IsSilent ||
                    (this.IsSilent != null &&
                    this.IsSilent.Equals(input.IsSilent))
                ) && 
                (
                    this.SortedMetaarray == input.SortedMetaarray ||
                    (this.SortedMetaarray != null &&
                    this.SortedMetaarray.Equals(input.SortedMetaarray))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DedupId == input.DedupId ||
                    (this.DedupId != null &&
                    this.DedupId.Equals(input.DedupId))
                ) && 
                (
                    this.ApnsBundleId == input.ApnsBundleId ||
                    (this.ApnsBundleId != null &&
                    this.ApnsBundleId.Equals(input.ApnsBundleId))
                ) && 
                (
                    this.Sound == input.Sound ||
                    (this.Sound != null &&
                    this.Sound.Equals(input.Sound))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.FileType == input.FileType ||
                    (this.FileType != null &&
                    this.FileType.Equals(input.FileType))
                ) && 
                (
                    this.Thumbnails == input.Thumbnails ||
                    this.Thumbnails != null &&
                    input.Thumbnails != null &&
                    this.Thumbnails.SequenceEqual(input.Thumbnails)
                ) && 
                (
                    this.Thumbnail1 == input.Thumbnail1 ||
                    (this.Thumbnail1 != null &&
                    this.Thumbnail1.Equals(input.Thumbnail1))
                ) && 
                (
                    this.Thumbnail2 == input.Thumbnail2 ||
                    (this.Thumbnail2 != null &&
                    this.Thumbnail2.Equals(input.Thumbnail2))
                ) && 
                (
                    this.Thumbnail3 == input.Thumbnail3 ||
                    (this.Thumbnail3 != null &&
                    this.Thumbnail3.Equals(input.Thumbnail3))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.ChannelType != null)
                    hashCode = hashCode * 59 + this.ChannelType.GetHashCode();
                if (this.ChannelUrl != null)
                    hashCode = hashCode * 59 + this.ChannelUrl.GetHashCode();
                if (this.MessageType != null)
                    hashCode = hashCode * 59 + this.MessageType.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.CustomType != null)
                    hashCode = hashCode * 59 + this.CustomType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.SendPush != null)
                    hashCode = hashCode * 59 + this.SendPush.GetHashCode();
                if (this.MentionType != null)
                    hashCode = hashCode * 59 + this.MentionType.GetHashCode();
                if (this.MentionedUserIds != null)
                    hashCode = hashCode * 59 + this.MentionedUserIds.GetHashCode();
                if (this.IsSilent != null)
                    hashCode = hashCode * 59 + this.IsSilent.GetHashCode();
                if (this.SortedMetaarray != null)
                    hashCode = hashCode * 59 + this.SortedMetaarray.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DedupId != null)
                    hashCode = hashCode * 59 + this.DedupId.GetHashCode();
                if (this.ApnsBundleId != null)
                    hashCode = hashCode * 59 + this.ApnsBundleId.GetHashCode();
                if (this.Sound != null)
                    hashCode = hashCode * 59 + this.Sound.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.File != null)
                    hashCode = hashCode * 59 + this.File.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.FileType != null)
                    hashCode = hashCode * 59 + this.FileType.GetHashCode();
                if (this.Thumbnails != null)
                    hashCode = hashCode * 59 + this.Thumbnails.GetHashCode();
                if (this.Thumbnail1 != null)
                    hashCode = hashCode * 59 + this.Thumbnail1.GetHashCode();
                if (this.Thumbnail2 != null)
                    hashCode = hashCode * 59 + this.Thumbnail2.GetHashCode();
                if (this.Thumbnail3 != null)
                    hashCode = hashCode * 59 + this.Thumbnail3.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
