/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// UpdateUserByIdData
    /// </summary>
    [DataContract]
    public partial class UpdateUserByIdData :  IEquatable<UpdateUserByIdData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateUserByIdData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateUserByIdData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateUserByIdData" /> class.
        /// </summary>
        /// <param name="userId">Specifies the unique ID of the user to update. (required).</param>
        /// <param name="nickname">Specifies the user&#39;s nickname. The length is limited to 80 characters. (required).</param>
        /// <param name="profileUrl">Specifies the URL of the user&#39;s profile image. The length is limited to 2,048 characters.&lt;br /&gt;&lt;br /&gt; The [domain filter](/docs/chat/v3/platform-api/guides/filter-and-moderation#2-domain-filter) filters out the request if the value of this property matches the filter&#39;s domain set. (required).</param>
        /// <param name="profileFile">Uploads the file of the user&#39;s profile image. An acceptable image is limited to &#x60;JPG&#x60; (.jpg), &#x60;JPEG&#x60; (.jpeg), or &#x60;PNG&#x60; (.png) file of up to 25 MB..</param>
        /// <param name="issueAccessToken">Determines whether to revoke the existing access token and create a new one for the user. If true, an opaque string token is issued and provided upon creation, which should be passed whenever the user logs in. If false, an access token is not required when the user logs in. (Default: false).</param>
        /// <param name="issueSessionToken">Determines whether to add a new session token for the user. If true, an opaque string token is issued and provided upon creation, which should be passed whenever the user logs in. If false, a session token is not required when the user logs in. (Default: false).</param>
        /// <param name="sessionTokenExpiresAt">Specifies the time for the issued session token to expire in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. The length should be 13. If not specified and the issue_session_token property above is true, the value of this property is set to the sum of the current timestamp and 604800000 by default, which indicates that the token will be valid for the next 7 days starting from the current timestamp..</param>
        /// <param name="isActive">Determines whether to activate or deactivate the user within the application..</param>
        /// <param name="lastSeenAt">Specifies the time when the user goes offline, to indicate when they were last online, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format..</param>
        /// <param name="discoveryKeys">Specifies an array of unique keys of the user which is provided to Sendbird server for discovering friends. By using the keys, the server can identify and match the user with other users..</param>
        /// <param name="preferredLanguages">Specifies an array of one or more [language codes](/docs/chat/v3/platform-api/guides/miscellaneous#2-language-codes-for-auto-translation) to translate notification messages to preferred languages. Up to 4 languages can be set for the user. If messages are sent in one of the preferred languages, notification messages won&#39;t be translated. If messages are sent in a language other than the preferred languages, notification messages will be translated into the first language in the array. In addition, the messages translated into other preferred languages will be provided in the &#x60;sendbird&#x60; property of a notification message payload..</param>
        /// <param name="leaveAllWhenDeactivated">Determines whether the user leaves all joined group channels upon deactivation. Note that this value is true by default. Use in conjunction with the is_active property above..</param>
        public UpdateUserByIdData(string userId = default, string nickname = default, string profileUrl = default, System.IO.Stream profileFile = default(System.IO.Stream), bool issueAccessToken = default(bool), bool issueSessionToken = default(bool), int sessionTokenExpiresAt = default(int), bool isActive = default(bool), int lastSeenAt = default(int), List<string> discoveryKeys = default, List<string> preferredLanguages = default, bool leaveAllWhenDeactivated = default(bool))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for UpdateUserByIdData and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }

            // to ensure "nickname" is required (not null)
            if (nickname == null)
            {
                throw new InvalidDataException("nickname is a required property for UpdateUserByIdData and cannot be null");
            }
            else
            {
                this.Nickname = nickname;
            }

            // to ensure "profileUrl" is required (not null)
            if (profileUrl == null)
            {
                throw new InvalidDataException("profileUrl is a required property for UpdateUserByIdData and cannot be null");
            }
            else
            {
                this.ProfileUrl = profileUrl;
            }

            this.ProfileFile = profileFile;
            this.IssueAccessToken = issueAccessToken;
            this.IssueSessionToken = issueSessionToken;
            this.SessionTokenExpiresAt = sessionTokenExpiresAt;
            this.IsActive = isActive;
            this.LastSeenAt = lastSeenAt;
            this.DiscoveryKeys = discoveryKeys;
            this.PreferredLanguages = preferredLanguages;
            this.LeaveAllWhenDeactivated = leaveAllWhenDeactivated;
        }

        /// <summary>
        /// Specifies the unique ID of the user to update.
        /// </summary>
        /// <value>Specifies the unique ID of the user to update.</value>
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public string UserId { get; set; }

        /// <summary>
        /// Specifies the user&#39;s nickname. The length is limited to 80 characters.
        /// </summary>
        /// <value>Specifies the user&#39;s nickname. The length is limited to 80 characters.</value>
        [DataMember(Name="nickname", EmitDefaultValue=true)]
        public string Nickname { get; set; }

        /// <summary>
        /// Specifies the URL of the user&#39;s profile image. The length is limited to 2,048 characters.&lt;br /&gt;&lt;br /&gt; The [domain filter](/docs/chat/v3/platform-api/guides/filter-and-moderation#2-domain-filter) filters out the request if the value of this property matches the filter&#39;s domain set.
        /// </summary>
        /// <value>Specifies the URL of the user&#39;s profile image. The length is limited to 2,048 characters.&lt;br /&gt;&lt;br /&gt; The [domain filter](/docs/chat/v3/platform-api/guides/filter-and-moderation#2-domain-filter) filters out the request if the value of this property matches the filter&#39;s domain set.</value>
        [DataMember(Name="profile_url", EmitDefaultValue=true)]
        public string ProfileUrl { get; set; }

        /// <summary>
        /// Uploads the file of the user&#39;s profile image. An acceptable image is limited to &#x60;JPG&#x60; (.jpg), &#x60;JPEG&#x60; (.jpeg), or &#x60;PNG&#x60; (.png) file of up to 25 MB.
        /// </summary>
        /// <value>Uploads the file of the user&#39;s profile image. An acceptable image is limited to &#x60;JPG&#x60; (.jpg), &#x60;JPEG&#x60; (.jpeg), or &#x60;PNG&#x60; (.png) file of up to 25 MB.</value>
        [DataMember(Name="profile_file", EmitDefaultValue=false)]
        public System.IO.Stream ProfileFile { get; set; }

        /// <summary>
        /// Determines whether to revoke the existing access token and create a new one for the user. If true, an opaque string token is issued and provided upon creation, which should be passed whenever the user logs in. If false, an access token is not required when the user logs in. (Default: false)
        /// </summary>
        /// <value>Determines whether to revoke the existing access token and create a new one for the user. If true, an opaque string token is issued and provided upon creation, which should be passed whenever the user logs in. If false, an access token is not required when the user logs in. (Default: false)</value>
        [DataMember(Name="issue_access_token", EmitDefaultValue=false)]
        public bool IssueAccessToken { get; set; }

        /// <summary>
        /// Determines whether to add a new session token for the user. If true, an opaque string token is issued and provided upon creation, which should be passed whenever the user logs in. If false, a session token is not required when the user logs in. (Default: false)
        /// </summary>
        /// <value>Determines whether to add a new session token for the user. If true, an opaque string token is issued and provided upon creation, which should be passed whenever the user logs in. If false, a session token is not required when the user logs in. (Default: false)</value>
        [DataMember(Name="issue_session_token", EmitDefaultValue=false)]
        public bool IssueSessionToken { get; set; }

        /// <summary>
        /// Specifies the time for the issued session token to expire in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. The length should be 13. If not specified and the issue_session_token property above is true, the value of this property is set to the sum of the current timestamp and 604800000 by default, which indicates that the token will be valid for the next 7 days starting from the current timestamp.
        /// </summary>
        /// <value>Specifies the time for the issued session token to expire in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format. The length should be 13. If not specified and the issue_session_token property above is true, the value of this property is set to the sum of the current timestamp and 604800000 by default, which indicates that the token will be valid for the next 7 days starting from the current timestamp.</value>
        [DataMember(Name="session_token_expires_at", EmitDefaultValue=false)]
        public int SessionTokenExpiresAt { get; set; }

        /// <summary>
        /// Determines whether to activate or deactivate the user within the application.
        /// </summary>
        /// <value>Determines whether to activate or deactivate the user within the application.</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Specifies the time when the user goes offline, to indicate when they were last online, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format.
        /// </summary>
        /// <value>Specifies the time when the user goes offline, to indicate when they were last online, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format.</value>
        [DataMember(Name="last_seen_at", EmitDefaultValue=false)]
        public int LastSeenAt { get; set; }

        /// <summary>
        /// Specifies an array of unique keys of the user which is provided to Sendbird server for discovering friends. By using the keys, the server can identify and match the user with other users.
        /// </summary>
        /// <value>Specifies an array of unique keys of the user which is provided to Sendbird server for discovering friends. By using the keys, the server can identify and match the user with other users.</value>
        [DataMember(Name="discovery_keys", EmitDefaultValue=false)]
        public List<string> DiscoveryKeys { get; set; }

        /// <summary>
        /// Specifies an array of one or more [language codes](/docs/chat/v3/platform-api/guides/miscellaneous#2-language-codes-for-auto-translation) to translate notification messages to preferred languages. Up to 4 languages can be set for the user. If messages are sent in one of the preferred languages, notification messages won&#39;t be translated. If messages are sent in a language other than the preferred languages, notification messages will be translated into the first language in the array. In addition, the messages translated into other preferred languages will be provided in the &#x60;sendbird&#x60; property of a notification message payload.
        /// </summary>
        /// <value>Specifies an array of one or more [language codes](/docs/chat/v3/platform-api/guides/miscellaneous#2-language-codes-for-auto-translation) to translate notification messages to preferred languages. Up to 4 languages can be set for the user. If messages are sent in one of the preferred languages, notification messages won&#39;t be translated. If messages are sent in a language other than the preferred languages, notification messages will be translated into the first language in the array. In addition, the messages translated into other preferred languages will be provided in the &#x60;sendbird&#x60; property of a notification message payload.</value>
        [DataMember(Name="preferred_languages", EmitDefaultValue=false)]
        public List<string> PreferredLanguages { get; set; }

        /// <summary>
        /// Determines whether the user leaves all joined group channels upon deactivation. Note that this value is true by default. Use in conjunction with the is_active property above.
        /// </summary>
        /// <value>Determines whether the user leaves all joined group channels upon deactivation. Note that this value is true by default. Use in conjunction with the is_active property above.</value>
        [DataMember(Name="leave_all_when_deactivated", EmitDefaultValue=false)]
        public bool LeaveAllWhenDeactivated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateUserByIdData {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  ProfileUrl: ").Append(ProfileUrl).Append("\n");
            sb.Append("  ProfileFile: ").Append(ProfileFile).Append("\n");
            sb.Append("  IssueAccessToken: ").Append(IssueAccessToken).Append("\n");
            sb.Append("  IssueSessionToken: ").Append(IssueSessionToken).Append("\n");
            sb.Append("  SessionTokenExpiresAt: ").Append(SessionTokenExpiresAt).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastSeenAt: ").Append(LastSeenAt).Append("\n");
            sb.Append("  DiscoveryKeys: ").Append(DiscoveryKeys).Append("\n");
            sb.Append("  PreferredLanguages: ").Append(PreferredLanguages).Append("\n");
            sb.Append("  LeaveAllWhenDeactivated: ").Append(LeaveAllWhenDeactivated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateUserByIdData);
        }

        /// <summary>
        /// Returns true if UpdateUserByIdData instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateUserByIdData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateUserByIdData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.ProfileUrl == input.ProfileUrl ||
                    (this.ProfileUrl != null &&
                    this.ProfileUrl.Equals(input.ProfileUrl))
                ) && 
                (
                    this.ProfileFile == input.ProfileFile ||
                    (this.ProfileFile != null &&
                    this.ProfileFile.Equals(input.ProfileFile))
                ) && 
                (
                    this.IssueAccessToken == input.IssueAccessToken ||
                    (this.IssueAccessToken != null &&
                    this.IssueAccessToken.Equals(input.IssueAccessToken))
                ) && 
                (
                    this.IssueSessionToken == input.IssueSessionToken ||
                    (this.IssueSessionToken != null &&
                    this.IssueSessionToken.Equals(input.IssueSessionToken))
                ) && 
                (
                    this.SessionTokenExpiresAt == input.SessionTokenExpiresAt ||
                    (this.SessionTokenExpiresAt != null &&
                    this.SessionTokenExpiresAt.Equals(input.SessionTokenExpiresAt))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.LastSeenAt == input.LastSeenAt ||
                    (this.LastSeenAt != null &&
                    this.LastSeenAt.Equals(input.LastSeenAt))
                ) && 
                (
                    this.DiscoveryKeys == input.DiscoveryKeys ||
                    this.DiscoveryKeys != null &&
                    input.DiscoveryKeys != null &&
                    this.DiscoveryKeys.SequenceEqual(input.DiscoveryKeys)
                ) && 
                (
                    this.PreferredLanguages == input.PreferredLanguages ||
                    this.PreferredLanguages != null &&
                    input.PreferredLanguages != null &&
                    this.PreferredLanguages.SequenceEqual(input.PreferredLanguages)
                ) && 
                (
                    this.LeaveAllWhenDeactivated == input.LeaveAllWhenDeactivated ||
                    (this.LeaveAllWhenDeactivated != null &&
                    this.LeaveAllWhenDeactivated.Equals(input.LeaveAllWhenDeactivated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.ProfileUrl != null)
                    hashCode = hashCode * 59 + this.ProfileUrl.GetHashCode();
                if (this.ProfileFile != null)
                    hashCode = hashCode * 59 + this.ProfileFile.GetHashCode();
                if (this.IssueAccessToken != null)
                    hashCode = hashCode * 59 + this.IssueAccessToken.GetHashCode();
                if (this.IssueSessionToken != null)
                    hashCode = hashCode * 59 + this.IssueSessionToken.GetHashCode();
                if (this.SessionTokenExpiresAt != null)
                    hashCode = hashCode * 59 + this.SessionTokenExpiresAt.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.LastSeenAt != null)
                    hashCode = hashCode * 59 + this.LastSeenAt.GetHashCode();
                if (this.DiscoveryKeys != null)
                    hashCode = hashCode * 59 + this.DiscoveryKeys.GetHashCode();
                if (this.PreferredLanguages != null)
                    hashCode = hashCode * 59 + this.PreferredLanguages.GetHashCode();
                if (this.LeaveAllWhenDeactivated != null)
                    hashCode = hashCode * 59 + this.LeaveAllWhenDeactivated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
