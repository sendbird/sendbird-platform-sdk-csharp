/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// UpdatePushPreferencesForAChannelRequest
    /// </summary>
    [DataContract]
    public partial class UpdatePushPreferencesForAChannelRequest :  IEquatable<UpdatePushPreferencesForAChannelRequest>, IValidatableObject
    {
        /// <summary>
        /// The type of notifications trigger applies to group channels when a user is disconnected from Sendbird server. Acceptable values are the following: - default (default): Indicates that a user&#39;s notifications trigger setting applies to the specified channel. - all: Indicates that a user receives notifications for all new messages. - mention_only: Indicates that a user only receives notifications for mentioned messages. - off: Indicates that a user doesn&#39;t receive any notifications.
        /// </summary>
        /// <value>The type of notifications trigger applies to group channels when a user is disconnected from Sendbird server. Acceptable values are the following: - default (default): Indicates that a user&#39;s notifications trigger setting applies to the specified channel. - all: Indicates that a user receives notifications for all new messages. - mention_only: Indicates that a user only receives notifications for mentioned messages. - off: Indicates that a user doesn&#39;t receive any notifications.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PushTriggerOptionEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,

            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 2,

            /// <summary>
            /// Enum Mentiononly for value: mention_only
            /// </summary>
            [EnumMember(Value = "mention_only")]
            Mentiononly = 3,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 4

        }

        /// <summary>
        /// The type of notifications trigger applies to group channels when a user is disconnected from Sendbird server. Acceptable values are the following: - default (default): Indicates that a user&#39;s notifications trigger setting applies to the specified channel. - all: Indicates that a user receives notifications for all new messages. - mention_only: Indicates that a user only receives notifications for mentioned messages. - off: Indicates that a user doesn&#39;t receive any notifications.
        /// </summary>
        /// <value>The type of notifications trigger applies to group channels when a user is disconnected from Sendbird server. Acceptable values are the following: - default (default): Indicates that a user&#39;s notifications trigger setting applies to the specified channel. - all: Indicates that a user receives notifications for all new messages. - mention_only: Indicates that a user only receives notifications for mentioned messages. - off: Indicates that a user doesn&#39;t receive any notifications.</value>
        [DataMember(Name="push_trigger_option", EmitDefaultValue=true)]
        public PushTriggerOptionEnum PushTriggerOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePushPreferencesForAChannelRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdatePushPreferencesForAChannelRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePushPreferencesForAChannelRequest" /> class.
        /// </summary>
        /// <param name="pushTriggerOption">The type of notifications trigger applies to group channels when a user is disconnected from Sendbird server. Acceptable values are the following: - default (default): Indicates that a user&#39;s notifications trigger setting applies to the specified channel. - all: Indicates that a user receives notifications for all new messages. - mention_only: Indicates that a user only receives notifications for mentioned messages. - off: Indicates that a user doesn&#39;t receive any notifications. (required).</param>
        /// <param name="pushSound">pushSound.</param>
        public UpdatePushPreferencesForAChannelRequest(PushTriggerOptionEnum pushTriggerOption = default(PushTriggerOptionEnum), string pushSound = default(string))
        {
            // to ensure "pushTriggerOption" is required (not null)
            if (pushTriggerOption == null)
            {
                throw new InvalidDataException("pushTriggerOption is a required property for UpdatePushPreferencesForAChannelRequest and cannot be null");
            }
            else
            {
                this.PushTriggerOption = pushTriggerOption;
            }

            this.PushSound = pushSound;
        }


        /// <summary>
        /// Gets or Sets PushSound
        /// </summary>
        [DataMember(Name="push_sound", EmitDefaultValue=false)]
        public string PushSound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdatePushPreferencesForAChannelRequest {\n");
            sb.Append("  PushTriggerOption: ").Append(PushTriggerOption).Append("\n");
            sb.Append("  PushSound: ").Append(PushSound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdatePushPreferencesForAChannelRequest);
        }

        /// <summary>
        /// Returns true if UpdatePushPreferencesForAChannelRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdatePushPreferencesForAChannelRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePushPreferencesForAChannelRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PushTriggerOption == input.PushTriggerOption ||
                    (this.PushTriggerOption != null &&
                    this.PushTriggerOption.Equals(input.PushTriggerOption))
                ) && 
                (
                    this.PushSound == input.PushSound ||
                    (this.PushSound != null &&
                    this.PushSound.Equals(input.PushSound))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PushTriggerOption != null)
                    hashCode = hashCode * 59 + this.PushTriggerOption.GetHashCode();
                if (this.PushSound != null)
                    hashCode = hashCode * 59 + this.PushSound.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
