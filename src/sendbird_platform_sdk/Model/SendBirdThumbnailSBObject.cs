/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SendBirdThumbnailSBObject
    /// </summary>
    [DataContract]
    public partial class SendBirdThumbnailSBObject :  IEquatable<SendBirdThumbnailSBObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendBirdThumbnailSBObject" /> class.
        /// </summary>
        /// <param name="height">height.</param>
        /// <param name="plainUrl">plainUrl.</param>
        /// <param name="realHeight">realHeight.</param>
        /// <param name="realWidth">realWidth.</param>
        /// <param name="url">url.</param>
        /// <param name="width">width.</param>
        public SendBirdThumbnailSBObject(decimal height = default(decimal), string plainUrl = default, decimal realHeight = default(decimal), decimal realWidth = default(decimal), string url = default, decimal width = default(decimal))
        {
            this.Height = height;
            this.PlainUrl = plainUrl;
            this.RealHeight = realHeight;
            this.RealWidth = realWidth;
            this.Url = url;
            this.Width = width;
        }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public decimal Height { get; set; }

        /// <summary>
        /// Gets or Sets PlainUrl
        /// </summary>
        [DataMember(Name="plain_url", EmitDefaultValue=false)]
        public string PlainUrl { get; set; }

        /// <summary>
        /// Gets or Sets RealHeight
        /// </summary>
        [DataMember(Name="real_height", EmitDefaultValue=false)]
        public decimal RealHeight { get; set; }

        /// <summary>
        /// Gets or Sets RealWidth
        /// </summary>
        [DataMember(Name="real_width", EmitDefaultValue=false)]
        public decimal RealWidth { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public decimal Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendBirdThumbnailSBObject {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  PlainUrl: ").Append(PlainUrl).Append("\n");
            sb.Append("  RealHeight: ").Append(RealHeight).Append("\n");
            sb.Append("  RealWidth: ").Append(RealWidth).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendBirdThumbnailSBObject);
        }

        /// <summary>
        /// Returns true if SendBirdThumbnailSBObject instances are equal
        /// </summary>
        /// <param name="input">Instance of SendBirdThumbnailSBObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendBirdThumbnailSBObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.PlainUrl == input.PlainUrl ||
                    (this.PlainUrl != null &&
                    this.PlainUrl.Equals(input.PlainUrl))
                ) && 
                (
                    this.RealHeight == input.RealHeight ||
                    (this.RealHeight != null &&
                    this.RealHeight.Equals(input.RealHeight))
                ) && 
                (
                    this.RealWidth == input.RealWidth ||
                    (this.RealWidth != null &&
                    this.RealWidth.Equals(input.RealWidth))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.PlainUrl != null)
                    hashCode = hashCode * 59 + this.PlainUrl.GetHashCode();
                if (this.RealHeight != null)
                    hashCode = hashCode * 59 + this.RealHeight.GetHashCode();
                if (this.RealWidth != null)
                    hashCode = hashCode * 59 + this.RealWidth.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
