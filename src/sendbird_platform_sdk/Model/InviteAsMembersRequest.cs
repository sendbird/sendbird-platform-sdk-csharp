/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// InviteAsMembersRequest
    /// </summary>
    [DataContract]
    public partial class InviteAsMembersRequest :  IEquatable<InviteAsMembersRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteAsMembersRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InviteAsMembersRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InviteAsMembersRequest" /> class.
        /// </summary>
        /// <param name="hiddenStatus">Specifies one or more key-value pair items which set the channel&#39;s hidden status for each user. The key should be a user_id and the value should be their hidden status. Acceptable values are limited to the following:&lt;br /&gt;- unhidden (default): the channel is included in when retrieving a list of group channels.&lt;br /&gt;- hidden_allow_auto_unhide: the channel automatically gets unhidden when receiving a new message.&lt;br /&gt;- hidden_prevent_auto_unhide: the channel keeps hidden though receiving a new message..</param>
        /// <param name="invitationStatus">Specifies one or more key-value pair items which set the invitation status of each user invited to the channel. The key should be a user_id and the value should be their joining status. Acceptable values are joined, invited_by_friend, and invited_by_non_friend. (Default: joined).</param>
        /// <param name="inviterId">inviterId.</param>
        /// <param name="userIds">userIds (required).</param>
        public InviteAsMembersRequest(Object hiddenStatus = default(Object), Object invitationStatus = default(Object), string inviterId = default(string), List<string> userIds = default(List<string>))
        {
            // to ensure "userIds" is required (not null)
            if (userIds == null)
            {
                throw new InvalidDataException("userIds is a required property for InviteAsMembersRequest and cannot be null");
            }
            else
            {
                this.UserIds = userIds;
            }

            this.HiddenStatus = hiddenStatus;
            this.InvitationStatus = invitationStatus;
            this.InviterId = inviterId;
        }

        /// <summary>
        /// Specifies one or more key-value pair items which set the channel&#39;s hidden status for each user. The key should be a user_id and the value should be their hidden status. Acceptable values are limited to the following:&lt;br /&gt;- unhidden (default): the channel is included in when retrieving a list of group channels.&lt;br /&gt;- hidden_allow_auto_unhide: the channel automatically gets unhidden when receiving a new message.&lt;br /&gt;- hidden_prevent_auto_unhide: the channel keeps hidden though receiving a new message.
        /// </summary>
        /// <value>Specifies one or more key-value pair items which set the channel&#39;s hidden status for each user. The key should be a user_id and the value should be their hidden status. Acceptable values are limited to the following:&lt;br /&gt;- unhidden (default): the channel is included in when retrieving a list of group channels.&lt;br /&gt;- hidden_allow_auto_unhide: the channel automatically gets unhidden when receiving a new message.&lt;br /&gt;- hidden_prevent_auto_unhide: the channel keeps hidden though receiving a new message.</value>
        [DataMember(Name="hidden_status", EmitDefaultValue=false)]
        public Object HiddenStatus { get; set; }

        /// <summary>
        /// Specifies one or more key-value pair items which set the invitation status of each user invited to the channel. The key should be a user_id and the value should be their joining status. Acceptable values are joined, invited_by_friend, and invited_by_non_friend. (Default: joined)
        /// </summary>
        /// <value>Specifies one or more key-value pair items which set the invitation status of each user invited to the channel. The key should be a user_id and the value should be their joining status. Acceptable values are joined, invited_by_friend, and invited_by_non_friend. (Default: joined)</value>
        [DataMember(Name="invitation_status", EmitDefaultValue=false)]
        public Object InvitationStatus { get; set; }

        /// <summary>
        /// Gets or Sets InviterId
        /// </summary>
        [DataMember(Name="inviter_id", EmitDefaultValue=false)]
        public string InviterId { get; set; }

        /// <summary>
        /// Gets or Sets UserIds
        /// </summary>
        [DataMember(Name="user_ids", EmitDefaultValue=true)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InviteAsMembersRequest {\n");
            sb.Append("  HiddenStatus: ").Append(HiddenStatus).Append("\n");
            sb.Append("  InvitationStatus: ").Append(InvitationStatus).Append("\n");
            sb.Append("  InviterId: ").Append(InviterId).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InviteAsMembersRequest);
        }

        /// <summary>
        /// Returns true if InviteAsMembersRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InviteAsMembersRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InviteAsMembersRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HiddenStatus == input.HiddenStatus ||
                    (this.HiddenStatus != null &&
                    this.HiddenStatus.Equals(input.HiddenStatus))
                ) && 
                (
                    this.InvitationStatus == input.InvitationStatus ||
                    (this.InvitationStatus != null &&
                    this.InvitationStatus.Equals(input.InvitationStatus))
                ) && 
                (
                    this.InviterId == input.InviterId ||
                    (this.InviterId != null &&
                    this.InviterId.Equals(input.InviterId))
                ) && 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    input.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HiddenStatus != null)
                    hashCode = hashCode * 59 + this.HiddenStatus.GetHashCode();
                if (this.InvitationStatus != null)
                    hashCode = hashCode * 59 + this.InvitationStatus.GetHashCode();
                if (this.InviterId != null)
                    hashCode = hashCode * 59 + this.InviterId.GetHashCode();
                if (this.UserIds != null)
                    hashCode = hashCode * 59 + this.UserIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
