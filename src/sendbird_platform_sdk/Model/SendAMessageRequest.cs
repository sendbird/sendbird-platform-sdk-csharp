/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SendAMessageRequest
    /// </summary>
    [DataContract]
    public partial class SendAMessageRequest :  IEquatable<SendAMessageRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines MentionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MentionTypeEnum
        {
            /// <summary>
            /// Enum Users for value: users
            /// </summary>
            [EnumMember(Value = "users")]
            Users = 1,

            /// <summary>
            /// Enum Channel for value: channel
            /// </summary>
            [EnumMember(Value = "channel")]
            Channel = 2

        }

        /// <summary>
        /// Gets or Sets MentionType
        /// </summary>
        [DataMember(Name="mention_type", EmitDefaultValue=false)]
        public MentionTypeEnum? MentionType { get; set; }
        /// <summary>
        /// Specifies the type of the message. The value of ADMM represents an admin message.
        /// </summary>
        /// <value>Specifies the type of the message. The value of ADMM represents an admin message.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageTypeEnum
        {
            /// <summary>
            /// Enum ADMM for value: ADMM
            /// </summary>
            [EnumMember(Value = "ADMM")]
            ADMM = 1

        }

        /// <summary>
        /// Specifies the type of the message. The value of ADMM represents an admin message.
        /// </summary>
        /// <value>Specifies the type of the message. The value of ADMM represents an admin message.</value>
        [DataMember(Name="message_type", EmitDefaultValue=true)]
        public MessageTypeEnum MessageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendAMessageRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendAMessageRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendAMessageRequest" /> class.
        /// </summary>
        /// <param name="apnsBundleId">apnsBundleId.</param>
        /// <param name="appleCriticalAlertOptions">appleCriticalAlertOptions.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="customType">customType.</param>
        /// <param name="data">data.</param>
        /// <param name="dedupId">dedupId.</param>
        /// <param name="includePollDetails">includePollDetails.</param>
        /// <param name="isSilent">isSilent.</param>
        /// <param name="markAsRead">markAsRead.</param>
        /// <param name="mentionType">mentionType.</param>
        /// <param name="mentionedUserIds">mentionedUserIds.</param>
        /// <param name="message">message (required).</param>
        /// <param name="messageType">Specifies the type of the message. The value of ADMM represents an admin message. (required).</param>
        /// <param name="pollId">pollId.</param>
        /// <param name="pushMessageTemplate">pushMessageTemplate.</param>
        /// <param name="sendPush">sendPush.</param>
        /// <param name="sortedMetaarray">sortedMetaarray.</param>
        /// <param name="sound">sound.</param>
        /// <param name="volume">volume.</param>
        /// <param name="files">files (required).</param>
        /// <param name="requireAuth">Determines whether to require an authentication key to verify if the file is being properly accessed. Only the user who uploaded the file or users who are in the channel where the file was uploaded should have access. The authentication key managed internally by the Sendbird system is generated every time a user logs in to the Sendbird server and is valid for three days starting from the last login. If set to false, Sendbird tries to access a file without any key. To access encrypted files, such as the files in the Sendbird server which are by default encrypted, the property must be set to true. (Default: false) The require_auth parameter only works if the file or URL is managed by Sendbird, which means that when you upload files using multipart format or provide URLs that point to the files hosted on the Sendbird server. However, if the file is hosted on a server or service that is not managed by Sendbird, access control and authentication for the file should be handled by the respective server or service hosting the file..</param>
        /// <param name="thumbnail1">thumbnail1.</param>
        /// <param name="thumbnail2">thumbnail2.</param>
        /// <param name="thumbnail3">thumbnail3.</param>
        /// <param name="thumbnails">thumbnails.</param>
        public SendAMessageRequest(string apnsBundleId = default(string), Object appleCriticalAlertOptions = default(Object), long createdAt = default(long), string customType = default(string), string data = default(string), string dedupId = default(string), bool includePollDetails = default(bool), bool isSilent = default(bool), bool markAsRead = default(bool), MentionTypeEnum? mentionType = default(MentionTypeEnum?), List<string> mentionedUserIds = default(List<string>), string message = default(string), MessageTypeEnum messageType = default(MessageTypeEnum), int pollId = default(int), SendTextMessageRequestBodyPushMessageTemplate pushMessageTemplate = default(SendTextMessageRequestBodyPushMessageTemplate), bool sendPush = default(bool), List<SendbirdSortedMetaarrayInner> sortedMetaarray = default(List<SendbirdSortedMetaarrayInner>), string sound = default(string), decimal volume = default(decimal), SendbirdFile files = default(SendbirdFile), bool requireAuth = default(bool), string thumbnail1 = default(string), string thumbnail2 = default(string), string thumbnail3 = default(string), List<string> thumbnails = default(List<string>))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for SendAMessageRequest and cannot be null");
            }
            else
            {
                this.Message = message;
            }

            // to ensure "messageType" is required (not null)
            if (messageType == null)
            {
                throw new InvalidDataException("messageType is a required property for SendAMessageRequest and cannot be null");
            }
            else
            {
                this.MessageType = messageType;
            }

            // to ensure "files" is required (not null)
            if (files == null)
            {
                throw new InvalidDataException("files is a required property for SendAMessageRequest and cannot be null");
            }
            else
            {
                this.Files = files;
            }

            this.ApnsBundleId = apnsBundleId;
            this.AppleCriticalAlertOptions = appleCriticalAlertOptions;
            this.CreatedAt = createdAt;
            this.CustomType = customType;
            this.Data = data;
            this.DedupId = dedupId;
            this.IncludePollDetails = includePollDetails;
            this.IsSilent = isSilent;
            this.MarkAsRead = markAsRead;
            this.MentionType = mentionType;
            this.MentionedUserIds = mentionedUserIds;
            this.PollId = pollId;
            this.PushMessageTemplate = pushMessageTemplate;
            this.SendPush = sendPush;
            this.SortedMetaarray = sortedMetaarray;
            this.Sound = sound;
            this.Volume = volume;
            this.RequireAuth = requireAuth;
            this.Thumbnail1 = thumbnail1;
            this.Thumbnail2 = thumbnail2;
            this.Thumbnail3 = thumbnail3;
            this.Thumbnails = thumbnails;
        }

        /// <summary>
        /// Gets or Sets ApnsBundleId
        /// </summary>
        [DataMember(Name="apns_bundle_id", EmitDefaultValue=false)]
        public string ApnsBundleId { get; set; }

        /// <summary>
        /// Gets or Sets AppleCriticalAlertOptions
        /// </summary>
        [DataMember(Name="apple_critical_alert_options", EmitDefaultValue=false)]
        public Object AppleCriticalAlertOptions { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CustomType
        /// </summary>
        [DataMember(Name="custom_type", EmitDefaultValue=false)]
        public string CustomType { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets DedupId
        /// </summary>
        [DataMember(Name="dedup_id", EmitDefaultValue=false)]
        public string DedupId { get; set; }

        /// <summary>
        /// Gets or Sets IncludePollDetails
        /// </summary>
        [DataMember(Name="include_poll_details", EmitDefaultValue=false)]
        public bool IncludePollDetails { get; set; }

        /// <summary>
        /// Gets or Sets IsSilent
        /// </summary>
        [DataMember(Name="is_silent", EmitDefaultValue=false)]
        public bool IsSilent { get; set; }

        /// <summary>
        /// Gets or Sets MarkAsRead
        /// </summary>
        [DataMember(Name="mark_as_read", EmitDefaultValue=false)]
        public bool MarkAsRead { get; set; }


        /// <summary>
        /// Gets or Sets MentionedUserIds
        /// </summary>
        [DataMember(Name="mentioned_user_ids", EmitDefaultValue=false)]
        public List<string> MentionedUserIds { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }


        /// <summary>
        /// Gets or Sets PollId
        /// </summary>
        [DataMember(Name="poll_id", EmitDefaultValue=false)]
        public int PollId { get; set; }

        /// <summary>
        /// Gets or Sets PushMessageTemplate
        /// </summary>
        [DataMember(Name="push_message_template", EmitDefaultValue=false)]
        public SendTextMessageRequestBodyPushMessageTemplate PushMessageTemplate { get; set; }

        /// <summary>
        /// Gets or Sets SendPush
        /// </summary>
        [DataMember(Name="send_push", EmitDefaultValue=false)]
        public bool SendPush { get; set; }

        /// <summary>
        /// Gets or Sets SortedMetaarray
        /// </summary>
        [DataMember(Name="sorted_metaarray", EmitDefaultValue=false)]
        public List<SendbirdSortedMetaarrayInner> SortedMetaarray { get; set; }

        /// <summary>
        /// Gets or Sets Sound
        /// </summary>
        [DataMember(Name="sound", EmitDefaultValue=false)]
        public string Sound { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public decimal Volume { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=true)]
        public SendbirdFile Files { get; set; }

        /// <summary>
        /// Determines whether to require an authentication key to verify if the file is being properly accessed. Only the user who uploaded the file or users who are in the channel where the file was uploaded should have access. The authentication key managed internally by the Sendbird system is generated every time a user logs in to the Sendbird server and is valid for three days starting from the last login. If set to false, Sendbird tries to access a file without any key. To access encrypted files, such as the files in the Sendbird server which are by default encrypted, the property must be set to true. (Default: false) The require_auth parameter only works if the file or URL is managed by Sendbird, which means that when you upload files using multipart format or provide URLs that point to the files hosted on the Sendbird server. However, if the file is hosted on a server or service that is not managed by Sendbird, access control and authentication for the file should be handled by the respective server or service hosting the file.
        /// </summary>
        /// <value>Determines whether to require an authentication key to verify if the file is being properly accessed. Only the user who uploaded the file or users who are in the channel where the file was uploaded should have access. The authentication key managed internally by the Sendbird system is generated every time a user logs in to the Sendbird server and is valid for three days starting from the last login. If set to false, Sendbird tries to access a file without any key. To access encrypted files, such as the files in the Sendbird server which are by default encrypted, the property must be set to true. (Default: false) The require_auth parameter only works if the file or URL is managed by Sendbird, which means that when you upload files using multipart format or provide URLs that point to the files hosted on the Sendbird server. However, if the file is hosted on a server or service that is not managed by Sendbird, access control and authentication for the file should be handled by the respective server or service hosting the file.</value>
        [DataMember(Name="require_auth", EmitDefaultValue=false)]
        public bool RequireAuth { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail1
        /// </summary>
        [DataMember(Name="thumbnail1", EmitDefaultValue=false)]
        public string Thumbnail1 { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail2
        /// </summary>
        [DataMember(Name="thumbnail2", EmitDefaultValue=false)]
        public string Thumbnail2 { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail3
        /// </summary>
        [DataMember(Name="thumbnail3", EmitDefaultValue=false)]
        public string Thumbnail3 { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnails
        /// </summary>
        [DataMember(Name="thumbnails", EmitDefaultValue=false)]
        public List<string> Thumbnails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendAMessageRequest {\n");
            sb.Append("  ApnsBundleId: ").Append(ApnsBundleId).Append("\n");
            sb.Append("  AppleCriticalAlertOptions: ").Append(AppleCriticalAlertOptions).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DedupId: ").Append(DedupId).Append("\n");
            sb.Append("  IncludePollDetails: ").Append(IncludePollDetails).Append("\n");
            sb.Append("  IsSilent: ").Append(IsSilent).Append("\n");
            sb.Append("  MarkAsRead: ").Append(MarkAsRead).Append("\n");
            sb.Append("  MentionType: ").Append(MentionType).Append("\n");
            sb.Append("  MentionedUserIds: ").Append(MentionedUserIds).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  PollId: ").Append(PollId).Append("\n");
            sb.Append("  PushMessageTemplate: ").Append(PushMessageTemplate).Append("\n");
            sb.Append("  SendPush: ").Append(SendPush).Append("\n");
            sb.Append("  SortedMetaarray: ").Append(SortedMetaarray).Append("\n");
            sb.Append("  Sound: ").Append(Sound).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  RequireAuth: ").Append(RequireAuth).Append("\n");
            sb.Append("  Thumbnail1: ").Append(Thumbnail1).Append("\n");
            sb.Append("  Thumbnail2: ").Append(Thumbnail2).Append("\n");
            sb.Append("  Thumbnail3: ").Append(Thumbnail3).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendAMessageRequest);
        }

        /// <summary>
        /// Returns true if SendAMessageRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SendAMessageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendAMessageRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApnsBundleId == input.ApnsBundleId ||
                    (this.ApnsBundleId != null &&
                    this.ApnsBundleId.Equals(input.ApnsBundleId))
                ) && 
                (
                    this.AppleCriticalAlertOptions == input.AppleCriticalAlertOptions ||
                    (this.AppleCriticalAlertOptions != null &&
                    this.AppleCriticalAlertOptions.Equals(input.AppleCriticalAlertOptions))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CustomType == input.CustomType ||
                    (this.CustomType != null &&
                    this.CustomType.Equals(input.CustomType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.DedupId == input.DedupId ||
                    (this.DedupId != null &&
                    this.DedupId.Equals(input.DedupId))
                ) && 
                (
                    this.IncludePollDetails == input.IncludePollDetails ||
                    (this.IncludePollDetails != null &&
                    this.IncludePollDetails.Equals(input.IncludePollDetails))
                ) && 
                (
                    this.IsSilent == input.IsSilent ||
                    (this.IsSilent != null &&
                    this.IsSilent.Equals(input.IsSilent))
                ) && 
                (
                    this.MarkAsRead == input.MarkAsRead ||
                    (this.MarkAsRead != null &&
                    this.MarkAsRead.Equals(input.MarkAsRead))
                ) && 
                (
                    this.MentionType == input.MentionType ||
                    (this.MentionType != null &&
                    this.MentionType.Equals(input.MentionType))
                ) && 
                (
                    this.MentionedUserIds == input.MentionedUserIds ||
                    this.MentionedUserIds != null &&
                    input.MentionedUserIds != null &&
                    this.MentionedUserIds.SequenceEqual(input.MentionedUserIds)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.PollId == input.PollId ||
                    (this.PollId != null &&
                    this.PollId.Equals(input.PollId))
                ) && 
                (
                    this.PushMessageTemplate == input.PushMessageTemplate ||
                    (this.PushMessageTemplate != null &&
                    this.PushMessageTemplate.Equals(input.PushMessageTemplate))
                ) && 
                (
                    this.SendPush == input.SendPush ||
                    (this.SendPush != null &&
                    this.SendPush.Equals(input.SendPush))
                ) && 
                (
                    this.SortedMetaarray == input.SortedMetaarray ||
                    this.SortedMetaarray != null &&
                    input.SortedMetaarray != null &&
                    this.SortedMetaarray.SequenceEqual(input.SortedMetaarray)
                ) && 
                (
                    this.Sound == input.Sound ||
                    (this.Sound != null &&
                    this.Sound.Equals(input.Sound))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.Files == input.Files ||
                    (this.Files != null &&
                    this.Files.Equals(input.Files))
                ) && 
                (
                    this.RequireAuth == input.RequireAuth ||
                    (this.RequireAuth != null &&
                    this.RequireAuth.Equals(input.RequireAuth))
                ) && 
                (
                    this.Thumbnail1 == input.Thumbnail1 ||
                    (this.Thumbnail1 != null &&
                    this.Thumbnail1.Equals(input.Thumbnail1))
                ) && 
                (
                    this.Thumbnail2 == input.Thumbnail2 ||
                    (this.Thumbnail2 != null &&
                    this.Thumbnail2.Equals(input.Thumbnail2))
                ) && 
                (
                    this.Thumbnail3 == input.Thumbnail3 ||
                    (this.Thumbnail3 != null &&
                    this.Thumbnail3.Equals(input.Thumbnail3))
                ) && 
                (
                    this.Thumbnails == input.Thumbnails ||
                    this.Thumbnails != null &&
                    input.Thumbnails != null &&
                    this.Thumbnails.SequenceEqual(input.Thumbnails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApnsBundleId != null)
                    hashCode = hashCode * 59 + this.ApnsBundleId.GetHashCode();
                if (this.AppleCriticalAlertOptions != null)
                    hashCode = hashCode * 59 + this.AppleCriticalAlertOptions.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CustomType != null)
                    hashCode = hashCode * 59 + this.CustomType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.DedupId != null)
                    hashCode = hashCode * 59 + this.DedupId.GetHashCode();
                if (this.IncludePollDetails != null)
                    hashCode = hashCode * 59 + this.IncludePollDetails.GetHashCode();
                if (this.IsSilent != null)
                    hashCode = hashCode * 59 + this.IsSilent.GetHashCode();
                if (this.MarkAsRead != null)
                    hashCode = hashCode * 59 + this.MarkAsRead.GetHashCode();
                if (this.MentionType != null)
                    hashCode = hashCode * 59 + this.MentionType.GetHashCode();
                if (this.MentionedUserIds != null)
                    hashCode = hashCode * 59 + this.MentionedUserIds.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.MessageType != null)
                    hashCode = hashCode * 59 + this.MessageType.GetHashCode();
                if (this.PollId != null)
                    hashCode = hashCode * 59 + this.PollId.GetHashCode();
                if (this.PushMessageTemplate != null)
                    hashCode = hashCode * 59 + this.PushMessageTemplate.GetHashCode();
                if (this.SendPush != null)
                    hashCode = hashCode * 59 + this.SendPush.GetHashCode();
                if (this.SortedMetaarray != null)
                    hashCode = hashCode * 59 + this.SortedMetaarray.GetHashCode();
                if (this.Sound != null)
                    hashCode = hashCode * 59 + this.Sound.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                if (this.RequireAuth != null)
                    hashCode = hashCode * 59 + this.RequireAuth.GetHashCode();
                if (this.Thumbnail1 != null)
                    hashCode = hashCode * 59 + this.Thumbnail1.GetHashCode();
                if (this.Thumbnail2 != null)
                    hashCode = hashCode * 59 + this.Thumbnail2.GetHashCode();
                if (this.Thumbnail3 != null)
                    hashCode = hashCode * 59 + this.Thumbnail3.GetHashCode();
                if (this.Thumbnails != null)
                    hashCode = hashCode * 59 + this.Thumbnails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
