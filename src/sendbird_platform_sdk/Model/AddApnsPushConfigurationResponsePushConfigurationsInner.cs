/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// AddApnsPushConfigurationResponsePushConfigurationsInner
    /// </summary>
    [DataContract]
    public partial class AddApnsPushConfigurationResponsePushConfigurationsInner :  IEquatable<AddApnsPushConfigurationResponsePushConfigurationsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddApnsPushConfigurationResponsePushConfigurationsInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="pushType">pushType.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="apnsCerEnvType">apnsCerEnvType.</param>
        /// <param name="apnsExpiration">apnsExpiration.</param>
        /// <param name="apnsName">apnsName.</param>
        /// <param name="hasUnreadCountBadge">hasUnreadCountBadge.</param>
        /// <param name="contentAvailable">contentAvailable.</param>
        /// <param name="mutableContent">mutableContent.</param>
        /// <param name="pushSound">pushSound.</param>
        public AddApnsPushConfigurationResponsePushConfigurationsInner(string id = default, string pushType = default, decimal createdAt = default(decimal), string apnsCerEnvType = default, decimal apnsExpiration = default(decimal), string apnsName = default, decimal hasUnreadCountBadge = default(decimal), bool contentAvailable = default(bool), bool mutableContent = default(bool), string pushSound = default)
        {
            this.Id = id;
            this.PushType = pushType;
            this.CreatedAt = createdAt;
            this.ApnsCerEnvType = apnsCerEnvType;
            this.ApnsExpiration = apnsExpiration;
            this.ApnsName = apnsName;
            this.HasUnreadCountBadge = hasUnreadCountBadge;
            this.ContentAvailable = contentAvailable;
            this.MutableContent = mutableContent;
            this.PushSound = pushSound;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PushType
        /// </summary>
        [DataMember(Name="push_type", EmitDefaultValue=false)]
        public string PushType { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public decimal CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ApnsCerEnvType
        /// </summary>
        [DataMember(Name="apns_cer_env_type", EmitDefaultValue=false)]
        public string ApnsCerEnvType { get; set; }

        /// <summary>
        /// Gets or Sets ApnsExpiration
        /// </summary>
        [DataMember(Name="apns_expiration", EmitDefaultValue=false)]
        public decimal ApnsExpiration { get; set; }

        /// <summary>
        /// Gets or Sets ApnsName
        /// </summary>
        [DataMember(Name="apns_name", EmitDefaultValue=false)]
        public string ApnsName { get; set; }

        /// <summary>
        /// Gets or Sets HasUnreadCountBadge
        /// </summary>
        [DataMember(Name="has_unread_count_badge", EmitDefaultValue=false)]
        public decimal HasUnreadCountBadge { get; set; }

        /// <summary>
        /// Gets or Sets ContentAvailable
        /// </summary>
        [DataMember(Name="content_available", EmitDefaultValue=false)]
        public bool ContentAvailable { get; set; }

        /// <summary>
        /// Gets or Sets MutableContent
        /// </summary>
        [DataMember(Name="mutable_content", EmitDefaultValue=false)]
        public bool MutableContent { get; set; }

        /// <summary>
        /// Gets or Sets PushSound
        /// </summary>
        [DataMember(Name="push_sound", EmitDefaultValue=false)]
        public string PushSound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddApnsPushConfigurationResponsePushConfigurationsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PushType: ").Append(PushType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ApnsCerEnvType: ").Append(ApnsCerEnvType).Append("\n");
            sb.Append("  ApnsExpiration: ").Append(ApnsExpiration).Append("\n");
            sb.Append("  ApnsName: ").Append(ApnsName).Append("\n");
            sb.Append("  HasUnreadCountBadge: ").Append(HasUnreadCountBadge).Append("\n");
            sb.Append("  ContentAvailable: ").Append(ContentAvailable).Append("\n");
            sb.Append("  MutableContent: ").Append(MutableContent).Append("\n");
            sb.Append("  PushSound: ").Append(PushSound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddApnsPushConfigurationResponsePushConfigurationsInner);
        }

        /// <summary>
        /// Returns true if AddApnsPushConfigurationResponsePushConfigurationsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of AddApnsPushConfigurationResponsePushConfigurationsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddApnsPushConfigurationResponsePushConfigurationsInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PushType == input.PushType ||
                    (this.PushType != null &&
                    this.PushType.Equals(input.PushType))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ApnsCerEnvType == input.ApnsCerEnvType ||
                    (this.ApnsCerEnvType != null &&
                    this.ApnsCerEnvType.Equals(input.ApnsCerEnvType))
                ) && 
                (
                    this.ApnsExpiration == input.ApnsExpiration ||
                    (this.ApnsExpiration != null &&
                    this.ApnsExpiration.Equals(input.ApnsExpiration))
                ) && 
                (
                    this.ApnsName == input.ApnsName ||
                    (this.ApnsName != null &&
                    this.ApnsName.Equals(input.ApnsName))
                ) && 
                (
                    this.HasUnreadCountBadge == input.HasUnreadCountBadge ||
                    (this.HasUnreadCountBadge != null &&
                    this.HasUnreadCountBadge.Equals(input.HasUnreadCountBadge))
                ) && 
                (
                    this.ContentAvailable == input.ContentAvailable ||
                    (this.ContentAvailable != null &&
                    this.ContentAvailable.Equals(input.ContentAvailable))
                ) && 
                (
                    this.MutableContent == input.MutableContent ||
                    (this.MutableContent != null &&
                    this.MutableContent.Equals(input.MutableContent))
                ) && 
                (
                    this.PushSound == input.PushSound ||
                    (this.PushSound != null &&
                    this.PushSound.Equals(input.PushSound))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PushType != null)
                    hashCode = hashCode * 59 + this.PushType.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ApnsCerEnvType != null)
                    hashCode = hashCode * 59 + this.ApnsCerEnvType.GetHashCode();
                if (this.ApnsExpiration != null)
                    hashCode = hashCode * 59 + this.ApnsExpiration.GetHashCode();
                if (this.ApnsName != null)
                    hashCode = hashCode * 59 + this.ApnsName.GetHashCode();
                if (this.HasUnreadCountBadge != null)
                    hashCode = hashCode * 59 + this.HasUnreadCountBadge.GetHashCode();
                if (this.ContentAvailable != null)
                    hashCode = hashCode * 59 + this.ContentAvailable.GetHashCode();
                if (this.MutableContent != null)
                    hashCode = hashCode * 59 + this.MutableContent.GetHashCode();
                if (this.PushSound != null)
                    hashCode = hashCode * 59 + this.PushSound.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
