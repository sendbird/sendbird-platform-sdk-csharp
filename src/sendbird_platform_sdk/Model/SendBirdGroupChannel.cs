/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SendBirdGroupChannel
    /// </summary>
    [DataContract]
    public partial class SendBirdGroupChannel :  IEquatable<SendBirdGroupChannel>, IValidatableObject
    {
        /// <summary>
        /// Defines HiddenState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HiddenStateEnum
        {
            /// <summary>
            /// Enum Hiddenallowautounhide for value: hidden_allow_auto_unhide
            /// </summary>
            [EnumMember(Value = "hidden_allow_auto_unhide")]
            Hiddenallowautounhide = 1,

            /// <summary>
            /// Enum Hiddenpreventautounhide for value: hidden_prevent_auto_unhide
            /// </summary>
            [EnumMember(Value = "hidden_prevent_auto_unhide")]
            Hiddenpreventautounhide = 2,

            /// <summary>
            /// Enum Unhidden for value: unhidden
            /// </summary>
            [EnumMember(Value = "unhidden")]
            Unhidden = 3

        }

        /// <summary>
        /// Gets or Sets HiddenState
        /// </summary>
        [DataMember(Name="hidden_state", EmitDefaultValue=false)]
        public HiddenStateEnum? HiddenState { get; set; }
        /// <summary>
        /// Defines MyMemberState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MyMemberStateEnum
        {
            /// <summary>
            /// Enum Invited for value: invited
            /// </summary>
            [EnumMember(Value = "invited")]
            Invited = 1,

            /// <summary>
            /// Enum Joined for value: joined
            /// </summary>
            [EnumMember(Value = "joined")]
            Joined = 2,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 3

        }

        /// <summary>
        /// Gets or Sets MyMemberState
        /// </summary>
        [DataMember(Name="my_member_state", EmitDefaultValue=false)]
        public MyMemberStateEnum? MyMemberState { get; set; }
        /// <summary>
        /// Defines MyMutedState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MyMutedStateEnum
        {
            /// <summary>
            /// Enum Muted for value: muted
            /// </summary>
            [EnumMember(Value = "muted")]
            Muted = 1,

            /// <summary>
            /// Enum Unmuted for value: unmuted
            /// </summary>
            [EnumMember(Value = "unmuted")]
            Unmuted = 2

        }

        /// <summary>
        /// Gets or Sets MyMutedState
        /// </summary>
        [DataMember(Name="my_muted_state", EmitDefaultValue=false)]
        public MyMutedStateEnum? MyMutedState { get; set; }
        /// <summary>
        /// Defines MyPushTriggerOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MyPushTriggerOptionEnum
        {
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,

            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 2,

            /// <summary>
            /// Enum Mentiononly for value: mention_only
            /// </summary>
            [EnumMember(Value = "mention_only")]
            Mentiononly = 3,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 4

        }

        /// <summary>
        /// Gets or Sets MyPushTriggerOption
        /// </summary>
        [DataMember(Name="my_push_trigger_option", EmitDefaultValue=false)]
        public MyPushTriggerOptionEnum? MyPushTriggerOption { get; set; }
        /// <summary>
        /// Defines MyRole
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MyRoleEnum
        {
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 1,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 2,

            /// <summary>
            /// Enum Operator for value: operator
            /// </summary>
            [EnumMember(Value = "operator")]
            Operator = 3

        }

        /// <summary>
        /// Gets or Sets MyRole
        /// </summary>
        [DataMember(Name="my_role", EmitDefaultValue=false)]
        public MyRoleEnum? MyRole { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendBirdGroupChannel" /> class.
        /// </summary>
        /// <param name="channelUrl">channelUrl.</param>
        /// <param name="coverUrl">coverUrl.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="creator">creator.</param>
        /// <param name="customType">customType.</param>
        /// <param name="data">data.</param>
        /// <param name="disappearingMessage">disappearingMessage.</param>
        /// <param name="freeze">freeze.</param>
        /// <param name="ignoreProfanityFilter">ignoreProfanityFilter.</param>
        /// <param name="hiddenState">hiddenState.</param>
        /// <param name="invitedAt">invitedAt.</param>
        /// <param name="inviter">inviter.</param>
        /// <param name="isAccessCodeRequired">isAccessCodeRequired.</param>
        /// <param name="isBroadcast">isBroadcast.</param>
        /// <param name="isCreated">isCreated.</param>
        /// <param name="isDiscoverable">isDiscoverable.</param>
        /// <param name="isDistinct">isDistinct.</param>
        /// <param name="isEphemeral">isEphemeral.</param>
        /// <param name="isFrozen">isFrozen.</param>
        /// <param name="isHidden">isHidden.</param>
        /// <param name="isPublic">isPublic.</param>
        /// <param name="isPushEnabled">isPushEnabled.</param>
        /// <param name="isSuper">isSuper.</param>
        /// <param name="joinedAt">joinedAt.</param>
        /// <param name="joinedMemberCount">joinedMemberCount.</param>
        /// <param name="lastMessage">lastMessage.</param>
        /// <param name="maxLengthMessage">maxLengthMessage.</param>
        /// <param name="memberCount">memberCount.</param>
        /// <param name="members">members.</param>
        /// <param name="messageOffsetTimestamp">messageOffsetTimestamp.</param>
        /// <param name="messageSurvivalSeconds">messageSurvivalSeconds.</param>
        /// <param name="myCountPreference">myCountPreference.</param>
        /// <param name="myLastRead">myLastRead.</param>
        /// <param name="myMemberState">myMemberState.</param>
        /// <param name="myMutedState">myMutedState.</param>
        /// <param name="myPushTriggerOption">myPushTriggerOption.</param>
        /// <param name="myRole">myRole.</param>
        /// <param name="name">name.</param>
        /// <param name="operators">operators.</param>
        /// <param name="smsFallback">smsFallback.</param>
        /// <param name="unreadMentionCount">unreadMentionCount.</param>
        /// <param name="unreadMessageCount">unreadMessageCount.</param>
        /// <param name="channel">channel.</param>
        public SendBirdGroupChannel(string channelUrl = default, string coverUrl = default, decimal createdAt = default(decimal), SendBirdGroupChannelCreatedBy createdBy = default(SendBirdGroupChannelCreatedBy), SendBirdUser creator = default(SendBirdUser), string customType = default, string data = default, SendBirdGroupChannelDisappearingMessage disappearingMessage = default(SendBirdGroupChannelDisappearingMessage), bool freeze = default(bool), bool ignoreProfanityFilter = default(bool), HiddenStateEnum? hiddenState = default(HiddenStateEnum?), decimal invitedAt = default(decimal), SendBirdGroupChannelInviter inviter = default(SendBirdGroupChannelInviter), bool isAccessCodeRequired = default(bool), bool isBroadcast = default(bool), bool isCreated = default(bool), bool isDiscoverable = default(bool), bool isDistinct = default(bool), bool isEphemeral = default(bool), bool isFrozen = default(bool), bool isHidden = default(bool), bool isPublic = default(bool), bool isPushEnabled = default(bool), bool isSuper = default(bool), decimal joinedAt = default(decimal), decimal joinedMemberCount = default(decimal), SendBirdGroupChannelLastMessage lastMessage = default(SendBirdGroupChannelLastMessage), decimal maxLengthMessage = default(decimal), decimal memberCount = default(decimal), List<SendBirdMember> members = default(List<SendBirdMember>), decimal messageOffsetTimestamp = default(decimal), decimal messageSurvivalSeconds = default(decimal), string myCountPreference = default, decimal myLastRead = default(decimal), MyMemberStateEnum? myMemberState = default(MyMemberStateEnum?), MyMutedStateEnum? myMutedState = default(MyMutedStateEnum?), MyPushTriggerOptionEnum? myPushTriggerOption = default(MyPushTriggerOptionEnum?), MyRoleEnum? myRole = default(MyRoleEnum?), string name = default, List<Object> operators = default(List<Object>), SendBirdGroupChannelSmsFallback smsFallback = default(SendBirdGroupChannelSmsFallback), decimal unreadMentionCount = default(decimal), decimal unreadMessageCount = default(decimal), SendBirdGroupChannelChannel channel = default(SendBirdGroupChannelChannel))
        {
            this.CreatedBy = createdBy;
            this.ChannelUrl = channelUrl;
            this.CoverUrl = coverUrl;
            this.CreatedAt = createdAt;
            this.CreatedBy = createdBy;
            this.Creator = creator;
            this.CustomType = customType;
            this.Data = data;
            this.DisappearingMessage = disappearingMessage;
            this.Freeze = freeze;
            this.IgnoreProfanityFilter = ignoreProfanityFilter;
            this.HiddenState = hiddenState;
            this.InvitedAt = invitedAt;
            this.Inviter = inviter;
            this.IsAccessCodeRequired = isAccessCodeRequired;
            this.IsBroadcast = isBroadcast;
            this.IsCreated = isCreated;
            this.IsDiscoverable = isDiscoverable;
            this.IsDistinct = isDistinct;
            this.IsEphemeral = isEphemeral;
            this.IsFrozen = isFrozen;
            this.IsHidden = isHidden;
            this.IsPublic = isPublic;
            this.IsPushEnabled = isPushEnabled;
            this.IsSuper = isSuper;
            this.JoinedAt = joinedAt;
            this.JoinedMemberCount = joinedMemberCount;
            this.LastMessage = lastMessage;
            this.MaxLengthMessage = maxLengthMessage;
            this.MemberCount = memberCount;
            this.Members = members;
            this.MessageOffsetTimestamp = messageOffsetTimestamp;
            this.MessageSurvivalSeconds = messageSurvivalSeconds;
            this.MyCountPreference = myCountPreference;
            this.MyLastRead = myLastRead;
            this.MyMemberState = myMemberState;
            this.MyMutedState = myMutedState;
            this.MyPushTriggerOption = myPushTriggerOption;
            this.MyRole = myRole;
            this.Name = name;
            this.Operators = operators;
            this.SmsFallback = smsFallback;
            this.UnreadMentionCount = unreadMentionCount;
            this.UnreadMessageCount = unreadMessageCount;
            this.Channel = channel;
        }

        /// <summary>
        /// Gets or Sets ChannelUrl
        /// </summary>
        [DataMember(Name="channel_url", EmitDefaultValue=false)]
        public string ChannelUrl { get; set; }

        /// <summary>
        /// Gets or Sets CoverUrl
        /// </summary>
        [DataMember(Name="cover_url", EmitDefaultValue=false)]
        public string CoverUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public decimal CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=true)]
        public SendBirdGroupChannelCreatedBy CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public SendBirdUser Creator { get; set; }

        /// <summary>
        /// Gets or Sets CustomType
        /// </summary>
        [DataMember(Name="custom_type", EmitDefaultValue=false)]
        public string CustomType { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets DisappearingMessage
        /// </summary>
        [DataMember(Name="disappearing_message", EmitDefaultValue=false)]
        public SendBirdGroupChannelDisappearingMessage DisappearingMessage { get; set; }

        /// <summary>
        /// Gets or Sets Freeze
        /// </summary>
        [DataMember(Name="freeze", EmitDefaultValue=false)]
        public bool Freeze { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreProfanityFilter
        /// </summary>
        [DataMember(Name="ignore_profanity_filter", EmitDefaultValue=false)]
        public bool IgnoreProfanityFilter { get; set; }


        /// <summary>
        /// Gets or Sets InvitedAt
        /// </summary>
        [DataMember(Name="invited_at", EmitDefaultValue=false)]
        public decimal InvitedAt { get; set; }

        /// <summary>
        /// Gets or Sets Inviter
        /// </summary>
        [DataMember(Name="inviter", EmitDefaultValue=false)]
        public SendBirdGroupChannelInviter Inviter { get; set; }

        /// <summary>
        /// Gets or Sets IsAccessCodeRequired
        /// </summary>
        [DataMember(Name="is_access_code_required", EmitDefaultValue=false)]
        public bool IsAccessCodeRequired { get; set; }

        /// <summary>
        /// Gets or Sets IsBroadcast
        /// </summary>
        [DataMember(Name="is_broadcast", EmitDefaultValue=false)]
        public bool IsBroadcast { get; set; }

        /// <summary>
        /// Gets or Sets IsCreated
        /// </summary>
        [DataMember(Name="is_created", EmitDefaultValue=false)]
        public bool IsCreated { get; set; }

        /// <summary>
        /// Gets or Sets IsDiscoverable
        /// </summary>
        [DataMember(Name="is_discoverable", EmitDefaultValue=false)]
        public bool IsDiscoverable { get; set; }

        /// <summary>
        /// Gets or Sets IsDistinct
        /// </summary>
        [DataMember(Name="is_distinct", EmitDefaultValue=false)]
        public bool IsDistinct { get; set; }

        /// <summary>
        /// Gets or Sets IsEphemeral
        /// </summary>
        [DataMember(Name="is_ephemeral", EmitDefaultValue=false)]
        public bool IsEphemeral { get; set; }

        /// <summary>
        /// Gets or Sets IsFrozen
        /// </summary>
        [DataMember(Name="is_frozen", EmitDefaultValue=false)]
        public bool IsFrozen { get; set; }

        /// <summary>
        /// Gets or Sets IsHidden
        /// </summary>
        [DataMember(Name="is_hidden", EmitDefaultValue=false)]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name="is_public", EmitDefaultValue=false)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets IsPushEnabled
        /// </summary>
        [DataMember(Name="is_push_enabled", EmitDefaultValue=false)]
        public bool IsPushEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsSuper
        /// </summary>
        [DataMember(Name="is_super", EmitDefaultValue=false)]
        public bool IsSuper { get; set; }

        /// <summary>
        /// Gets or Sets JoinedAt
        /// </summary>
        [DataMember(Name="joined_at", EmitDefaultValue=false)]
        public decimal JoinedAt { get; set; }

        /// <summary>
        /// Gets or Sets JoinedMemberCount
        /// </summary>
        [DataMember(Name="joined_member_count", EmitDefaultValue=false)]
        public decimal JoinedMemberCount { get; set; }

        /// <summary>
        /// Gets or Sets LastMessage
        /// </summary>
        [DataMember(Name="last_message", EmitDefaultValue=false)]
        public SendBirdGroupChannelLastMessage LastMessage { get; set; }

        /// <summary>
        /// Gets or Sets MaxLengthMessage
        /// </summary>
        [DataMember(Name="max_length_message", EmitDefaultValue=false)]
        public decimal MaxLengthMessage { get; set; }

        /// <summary>
        /// Gets or Sets MemberCount
        /// </summary>
        [DataMember(Name="member_count", EmitDefaultValue=false)]
        public decimal MemberCount { get; set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<SendBirdMember> Members { get; set; }

        /// <summary>
        /// Gets or Sets MessageOffsetTimestamp
        /// </summary>
        [DataMember(Name="message_offset_timestamp", EmitDefaultValue=false)]
        public decimal MessageOffsetTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets MessageSurvivalSeconds
        /// </summary>
        [DataMember(Name="message_survival_seconds", EmitDefaultValue=false)]
        public decimal MessageSurvivalSeconds { get; set; }

        /// <summary>
        /// Gets or Sets MyCountPreference
        /// </summary>
        [DataMember(Name="my_count_preference", EmitDefaultValue=false)]
        public string MyCountPreference { get; set; }

        /// <summary>
        /// Gets or Sets MyLastRead
        /// </summary>
        [DataMember(Name="my_last_read", EmitDefaultValue=false)]
        public decimal MyLastRead { get; set; }





        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Operators
        /// </summary>
        [DataMember(Name="operators", EmitDefaultValue=false)]
        public List<Object> Operators { get; set; }

        /// <summary>
        /// Gets or Sets SmsFallback
        /// </summary>
        [DataMember(Name="sms_fallback", EmitDefaultValue=false)]
        public SendBirdGroupChannelSmsFallback SmsFallback { get; set; }

        /// <summary>
        /// Gets or Sets UnreadMentionCount
        /// </summary>
        [DataMember(Name="unread_mention_count", EmitDefaultValue=false)]
        public decimal UnreadMentionCount { get; set; }

        /// <summary>
        /// Gets or Sets UnreadMessageCount
        /// </summary>
        [DataMember(Name="unread_message_count", EmitDefaultValue=false)]
        public decimal UnreadMessageCount { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public SendBirdGroupChannelChannel Channel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendBirdGroupChannel {\n");
            sb.Append("  ChannelUrl: ").Append(ChannelUrl).Append("\n");
            sb.Append("  CoverUrl: ").Append(CoverUrl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DisappearingMessage: ").Append(DisappearingMessage).Append("\n");
            sb.Append("  Freeze: ").Append(Freeze).Append("\n");
            sb.Append("  IgnoreProfanityFilter: ").Append(IgnoreProfanityFilter).Append("\n");
            sb.Append("  HiddenState: ").Append(HiddenState).Append("\n");
            sb.Append("  InvitedAt: ").Append(InvitedAt).Append("\n");
            sb.Append("  Inviter: ").Append(Inviter).Append("\n");
            sb.Append("  IsAccessCodeRequired: ").Append(IsAccessCodeRequired).Append("\n");
            sb.Append("  IsBroadcast: ").Append(IsBroadcast).Append("\n");
            sb.Append("  IsCreated: ").Append(IsCreated).Append("\n");
            sb.Append("  IsDiscoverable: ").Append(IsDiscoverable).Append("\n");
            sb.Append("  IsDistinct: ").Append(IsDistinct).Append("\n");
            sb.Append("  IsEphemeral: ").Append(IsEphemeral).Append("\n");
            sb.Append("  IsFrozen: ").Append(IsFrozen).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  IsPushEnabled: ").Append(IsPushEnabled).Append("\n");
            sb.Append("  IsSuper: ").Append(IsSuper).Append("\n");
            sb.Append("  JoinedAt: ").Append(JoinedAt).Append("\n");
            sb.Append("  JoinedMemberCount: ").Append(JoinedMemberCount).Append("\n");
            sb.Append("  LastMessage: ").Append(LastMessage).Append("\n");
            sb.Append("  MaxLengthMessage: ").Append(MaxLengthMessage).Append("\n");
            sb.Append("  MemberCount: ").Append(MemberCount).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  MessageOffsetTimestamp: ").Append(MessageOffsetTimestamp).Append("\n");
            sb.Append("  MessageSurvivalSeconds: ").Append(MessageSurvivalSeconds).Append("\n");
            sb.Append("  MyCountPreference: ").Append(MyCountPreference).Append("\n");
            sb.Append("  MyLastRead: ").Append(MyLastRead).Append("\n");
            sb.Append("  MyMemberState: ").Append(MyMemberState).Append("\n");
            sb.Append("  MyMutedState: ").Append(MyMutedState).Append("\n");
            sb.Append("  MyPushTriggerOption: ").Append(MyPushTriggerOption).Append("\n");
            sb.Append("  MyRole: ").Append(MyRole).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Operators: ").Append(Operators).Append("\n");
            sb.Append("  SmsFallback: ").Append(SmsFallback).Append("\n");
            sb.Append("  UnreadMentionCount: ").Append(UnreadMentionCount).Append("\n");
            sb.Append("  UnreadMessageCount: ").Append(UnreadMessageCount).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendBirdGroupChannel);
        }

        /// <summary>
        /// Returns true if SendBirdGroupChannel instances are equal
        /// </summary>
        /// <param name="input">Instance of SendBirdGroupChannel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendBirdGroupChannel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelUrl == input.ChannelUrl ||
                    (this.ChannelUrl != null &&
                    this.ChannelUrl.Equals(input.ChannelUrl))
                ) && 
                (
                    this.CoverUrl == input.CoverUrl ||
                    (this.CoverUrl != null &&
                    this.CoverUrl.Equals(input.CoverUrl))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.CustomType == input.CustomType ||
                    (this.CustomType != null &&
                    this.CustomType.Equals(input.CustomType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.DisappearingMessage == input.DisappearingMessage ||
                    (this.DisappearingMessage != null &&
                    this.DisappearingMessage.Equals(input.DisappearingMessage))
                ) && 
                (
                    this.Freeze == input.Freeze ||
                    (this.Freeze != null &&
                    this.Freeze.Equals(input.Freeze))
                ) && 
                (
                    this.IgnoreProfanityFilter == input.IgnoreProfanityFilter ||
                    (this.IgnoreProfanityFilter != null &&
                    this.IgnoreProfanityFilter.Equals(input.IgnoreProfanityFilter))
                ) && 
                (
                    this.HiddenState == input.HiddenState ||
                    (this.HiddenState != null &&
                    this.HiddenState.Equals(input.HiddenState))
                ) && 
                (
                    this.InvitedAt == input.InvitedAt ||
                    (this.InvitedAt != null &&
                    this.InvitedAt.Equals(input.InvitedAt))
                ) && 
                (
                    this.Inviter == input.Inviter ||
                    (this.Inviter != null &&
                    this.Inviter.Equals(input.Inviter))
                ) && 
                (
                    this.IsAccessCodeRequired == input.IsAccessCodeRequired ||
                    (this.IsAccessCodeRequired != null &&
                    this.IsAccessCodeRequired.Equals(input.IsAccessCodeRequired))
                ) && 
                (
                    this.IsBroadcast == input.IsBroadcast ||
                    (this.IsBroadcast != null &&
                    this.IsBroadcast.Equals(input.IsBroadcast))
                ) && 
                (
                    this.IsCreated == input.IsCreated ||
                    (this.IsCreated != null &&
                    this.IsCreated.Equals(input.IsCreated))
                ) && 
                (
                    this.IsDiscoverable == input.IsDiscoverable ||
                    (this.IsDiscoverable != null &&
                    this.IsDiscoverable.Equals(input.IsDiscoverable))
                ) && 
                (
                    this.IsDistinct == input.IsDistinct ||
                    (this.IsDistinct != null &&
                    this.IsDistinct.Equals(input.IsDistinct))
                ) && 
                (
                    this.IsEphemeral == input.IsEphemeral ||
                    (this.IsEphemeral != null &&
                    this.IsEphemeral.Equals(input.IsEphemeral))
                ) && 
                (
                    this.IsFrozen == input.IsFrozen ||
                    (this.IsFrozen != null &&
                    this.IsFrozen.Equals(input.IsFrozen))
                ) && 
                (
                    this.IsHidden == input.IsHidden ||
                    (this.IsHidden != null &&
                    this.IsHidden.Equals(input.IsHidden))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.IsPushEnabled == input.IsPushEnabled ||
                    (this.IsPushEnabled != null &&
                    this.IsPushEnabled.Equals(input.IsPushEnabled))
                ) && 
                (
                    this.IsSuper == input.IsSuper ||
                    (this.IsSuper != null &&
                    this.IsSuper.Equals(input.IsSuper))
                ) && 
                (
                    this.JoinedAt == input.JoinedAt ||
                    (this.JoinedAt != null &&
                    this.JoinedAt.Equals(input.JoinedAt))
                ) && 
                (
                    this.JoinedMemberCount == input.JoinedMemberCount ||
                    (this.JoinedMemberCount != null &&
                    this.JoinedMemberCount.Equals(input.JoinedMemberCount))
                ) && 
                (
                    this.LastMessage == input.LastMessage ||
                    (this.LastMessage != null &&
                    this.LastMessage.Equals(input.LastMessage))
                ) && 
                (
                    this.MaxLengthMessage == input.MaxLengthMessage ||
                    (this.MaxLengthMessage != null &&
                    this.MaxLengthMessage.Equals(input.MaxLengthMessage))
                ) && 
                (
                    this.MemberCount == input.MemberCount ||
                    (this.MemberCount != null &&
                    this.MemberCount.Equals(input.MemberCount))
                ) && 
                (
                    this.Members == input.Members ||
                    this.Members != null &&
                    input.Members != null &&
                    this.Members.SequenceEqual(input.Members)
                ) && 
                (
                    this.MessageOffsetTimestamp == input.MessageOffsetTimestamp ||
                    (this.MessageOffsetTimestamp != null &&
                    this.MessageOffsetTimestamp.Equals(input.MessageOffsetTimestamp))
                ) && 
                (
                    this.MessageSurvivalSeconds == input.MessageSurvivalSeconds ||
                    (this.MessageSurvivalSeconds != null &&
                    this.MessageSurvivalSeconds.Equals(input.MessageSurvivalSeconds))
                ) && 
                (
                    this.MyCountPreference == input.MyCountPreference ||
                    (this.MyCountPreference != null &&
                    this.MyCountPreference.Equals(input.MyCountPreference))
                ) && 
                (
                    this.MyLastRead == input.MyLastRead ||
                    (this.MyLastRead != null &&
                    this.MyLastRead.Equals(input.MyLastRead))
                ) && 
                (
                    this.MyMemberState == input.MyMemberState ||
                    (this.MyMemberState != null &&
                    this.MyMemberState.Equals(input.MyMemberState))
                ) && 
                (
                    this.MyMutedState == input.MyMutedState ||
                    (this.MyMutedState != null &&
                    this.MyMutedState.Equals(input.MyMutedState))
                ) && 
                (
                    this.MyPushTriggerOption == input.MyPushTriggerOption ||
                    (this.MyPushTriggerOption != null &&
                    this.MyPushTriggerOption.Equals(input.MyPushTriggerOption))
                ) && 
                (
                    this.MyRole == input.MyRole ||
                    (this.MyRole != null &&
                    this.MyRole.Equals(input.MyRole))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Operators == input.Operators ||
                    this.Operators != null &&
                    input.Operators != null &&
                    this.Operators.SequenceEqual(input.Operators)
                ) && 
                (
                    this.SmsFallback == input.SmsFallback ||
                    (this.SmsFallback != null &&
                    this.SmsFallback.Equals(input.SmsFallback))
                ) && 
                (
                    this.UnreadMentionCount == input.UnreadMentionCount ||
                    (this.UnreadMentionCount != null &&
                    this.UnreadMentionCount.Equals(input.UnreadMentionCount))
                ) && 
                (
                    this.UnreadMessageCount == input.UnreadMessageCount ||
                    (this.UnreadMessageCount != null &&
                    this.UnreadMessageCount.Equals(input.UnreadMessageCount))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelUrl != null)
                    hashCode = hashCode * 59 + this.ChannelUrl.GetHashCode();
                if (this.CoverUrl != null)
                    hashCode = hashCode * 59 + this.CoverUrl.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.Creator != null)
                    hashCode = hashCode * 59 + this.Creator.GetHashCode();
                if (this.CustomType != null)
                    hashCode = hashCode * 59 + this.CustomType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.DisappearingMessage != null)
                    hashCode = hashCode * 59 + this.DisappearingMessage.GetHashCode();
                if (this.Freeze != null)
                    hashCode = hashCode * 59 + this.Freeze.GetHashCode();
                if (this.IgnoreProfanityFilter != null)
                    hashCode = hashCode * 59 + this.IgnoreProfanityFilter.GetHashCode();
                if (this.HiddenState != null)
                    hashCode = hashCode * 59 + this.HiddenState.GetHashCode();
                if (this.InvitedAt != null)
                    hashCode = hashCode * 59 + this.InvitedAt.GetHashCode();
                if (this.Inviter != null)
                    hashCode = hashCode * 59 + this.Inviter.GetHashCode();
                if (this.IsAccessCodeRequired != null)
                    hashCode = hashCode * 59 + this.IsAccessCodeRequired.GetHashCode();
                if (this.IsBroadcast != null)
                    hashCode = hashCode * 59 + this.IsBroadcast.GetHashCode();
                if (this.IsCreated != null)
                    hashCode = hashCode * 59 + this.IsCreated.GetHashCode();
                if (this.IsDiscoverable != null)
                    hashCode = hashCode * 59 + this.IsDiscoverable.GetHashCode();
                if (this.IsDistinct != null)
                    hashCode = hashCode * 59 + this.IsDistinct.GetHashCode();
                if (this.IsEphemeral != null)
                    hashCode = hashCode * 59 + this.IsEphemeral.GetHashCode();
                if (this.IsFrozen != null)
                    hashCode = hashCode * 59 + this.IsFrozen.GetHashCode();
                if (this.IsHidden != null)
                    hashCode = hashCode * 59 + this.IsHidden.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.IsPushEnabled != null)
                    hashCode = hashCode * 59 + this.IsPushEnabled.GetHashCode();
                if (this.IsSuper != null)
                    hashCode = hashCode * 59 + this.IsSuper.GetHashCode();
                if (this.JoinedAt != null)
                    hashCode = hashCode * 59 + this.JoinedAt.GetHashCode();
                if (this.JoinedMemberCount != null)
                    hashCode = hashCode * 59 + this.JoinedMemberCount.GetHashCode();
                if (this.LastMessage != null)
                    hashCode = hashCode * 59 + this.LastMessage.GetHashCode();
                if (this.MaxLengthMessage != null)
                    hashCode = hashCode * 59 + this.MaxLengthMessage.GetHashCode();
                if (this.MemberCount != null)
                    hashCode = hashCode * 59 + this.MemberCount.GetHashCode();
                if (this.Members != null)
                    hashCode = hashCode * 59 + this.Members.GetHashCode();
                if (this.MessageOffsetTimestamp != null)
                    hashCode = hashCode * 59 + this.MessageOffsetTimestamp.GetHashCode();
                if (this.MessageSurvivalSeconds != null)
                    hashCode = hashCode * 59 + this.MessageSurvivalSeconds.GetHashCode();
                if (this.MyCountPreference != null)
                    hashCode = hashCode * 59 + this.MyCountPreference.GetHashCode();
                if (this.MyLastRead != null)
                    hashCode = hashCode * 59 + this.MyLastRead.GetHashCode();
                if (this.MyMemberState != null)
                    hashCode = hashCode * 59 + this.MyMemberState.GetHashCode();
                if (this.MyMutedState != null)
                    hashCode = hashCode * 59 + this.MyMutedState.GetHashCode();
                if (this.MyPushTriggerOption != null)
                    hashCode = hashCode * 59 + this.MyPushTriggerOption.GetHashCode();
                if (this.MyRole != null)
                    hashCode = hashCode * 59 + this.MyRole.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Operators != null)
                    hashCode = hashCode * 59 + this.Operators.GetHashCode();
                if (this.SmsFallback != null)
                    hashCode = hashCode * 59 + this.SmsFallback.GetHashCode();
                if (this.UnreadMentionCount != null)
                    hashCode = hashCode * 59 + this.UnreadMentionCount.GetHashCode();
                if (this.UnreadMessageCount != null)
                    hashCode = hashCode * 59 + this.UnreadMessageCount.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
