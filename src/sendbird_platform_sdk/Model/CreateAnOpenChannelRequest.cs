/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// CreateAnOpenChannelRequest
    /// </summary>
    [DataContract]
    public partial class CreateAnOpenChannelRequest :  IEquatable<CreateAnOpenChannelRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAnOpenChannelRequest" /> class.
        /// </summary>
        /// <param name="isDynamicPartitioned">isDynamicPartitioned.</param>
        /// <param name="channelUrl">channelUrl.</param>
        /// <param name="coverFile">coverFile.</param>
        /// <param name="coverUrl">coverUrl.</param>
        /// <param name="customType">customType.</param>
        /// <param name="data">data.</param>
        /// <param name="isEphemeral">isEphemeral.</param>
        /// <param name="name">name.</param>
        /// <param name="operatorIds">operatorIds.</param>
        public CreateAnOpenChannelRequest(bool isDynamicPartitioned = default(bool), string channelUrl = default(string), System.IO.Stream coverFile = default(System.IO.Stream), string coverUrl = default(string), string customType = default(string), string data = default(string), bool isEphemeral = default(bool), string name = default(string), List<string> operatorIds = default(List<string>))
        {
            this.IsDynamicPartitioned = isDynamicPartitioned;
            this.ChannelUrl = channelUrl;
            this.CoverFile = coverFile;
            this.CoverUrl = coverUrl;
            this.CustomType = customType;
            this.Data = data;
            this.IsEphemeral = isEphemeral;
            this.Name = name;
            this.OperatorIds = operatorIds;
        }

        /// <summary>
        /// Gets or Sets IsDynamicPartitioned
        /// </summary>
        [DataMember(Name="is_dynamic_partitioned", EmitDefaultValue=false)]
        public bool IsDynamicPartitioned { get; set; }

        /// <summary>
        /// Gets or Sets ChannelUrl
        /// </summary>
        [DataMember(Name="channel_url", EmitDefaultValue=false)]
        public string ChannelUrl { get; set; }

        /// <summary>
        /// Gets or Sets CoverFile
        /// </summary>
        [DataMember(Name="cover_file", EmitDefaultValue=false)]
        public System.IO.Stream CoverFile { get; set; }

        /// <summary>
        /// Gets or Sets CoverUrl
        /// </summary>
        [DataMember(Name="cover_url", EmitDefaultValue=false)]
        public string CoverUrl { get; set; }

        /// <summary>
        /// Gets or Sets CustomType
        /// </summary>
        [DataMember(Name="custom_type", EmitDefaultValue=false)]
        public string CustomType { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets IsEphemeral
        /// </summary>
        [DataMember(Name="is_ephemeral", EmitDefaultValue=false)]
        public bool IsEphemeral { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OperatorIds
        /// </summary>
        [DataMember(Name="operator_ids", EmitDefaultValue=false)]
        public List<string> OperatorIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAnOpenChannelRequest {\n");
            sb.Append("  IsDynamicPartitioned: ").Append(IsDynamicPartitioned).Append("\n");
            sb.Append("  ChannelUrl: ").Append(ChannelUrl).Append("\n");
            sb.Append("  CoverFile: ").Append(CoverFile).Append("\n");
            sb.Append("  CoverUrl: ").Append(CoverUrl).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  IsEphemeral: ").Append(IsEphemeral).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OperatorIds: ").Append(OperatorIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAnOpenChannelRequest);
        }

        /// <summary>
        /// Returns true if CreateAnOpenChannelRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAnOpenChannelRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAnOpenChannelRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsDynamicPartitioned == input.IsDynamicPartitioned ||
                    (this.IsDynamicPartitioned != null &&
                    this.IsDynamicPartitioned.Equals(input.IsDynamicPartitioned))
                ) && 
                (
                    this.ChannelUrl == input.ChannelUrl ||
                    (this.ChannelUrl != null &&
                    this.ChannelUrl.Equals(input.ChannelUrl))
                ) && 
                (
                    this.CoverFile == input.CoverFile ||
                    (this.CoverFile != null &&
                    this.CoverFile.Equals(input.CoverFile))
                ) && 
                (
                    this.CoverUrl == input.CoverUrl ||
                    (this.CoverUrl != null &&
                    this.CoverUrl.Equals(input.CoverUrl))
                ) && 
                (
                    this.CustomType == input.CustomType ||
                    (this.CustomType != null &&
                    this.CustomType.Equals(input.CustomType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.IsEphemeral == input.IsEphemeral ||
                    (this.IsEphemeral != null &&
                    this.IsEphemeral.Equals(input.IsEphemeral))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OperatorIds == input.OperatorIds ||
                    this.OperatorIds != null &&
                    input.OperatorIds != null &&
                    this.OperatorIds.SequenceEqual(input.OperatorIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsDynamicPartitioned != null)
                    hashCode = hashCode * 59 + this.IsDynamicPartitioned.GetHashCode();
                if (this.ChannelUrl != null)
                    hashCode = hashCode * 59 + this.ChannelUrl.GetHashCode();
                if (this.CoverFile != null)
                    hashCode = hashCode * 59 + this.CoverFile.GetHashCode();
                if (this.CoverUrl != null)
                    hashCode = hashCode * 59 + this.CoverUrl.GetHashCode();
                if (this.CustomType != null)
                    hashCode = hashCode * 59 + this.CustomType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.IsEphemeral != null)
                    hashCode = hashCode * 59 + this.IsEphemeral.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OperatorIds != null)
                    hashCode = hashCode * 59 + this.OperatorIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
