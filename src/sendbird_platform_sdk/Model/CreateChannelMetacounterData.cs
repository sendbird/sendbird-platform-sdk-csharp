/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// CreateChannelMetacounterData
    /// </summary>
    [DataContract]
    public partial class CreateChannelMetacounterData :  IEquatable<CreateChannelMetacounterData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChannelMetacounterData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateChannelMetacounterData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChannelMetacounterData" /> class.
        /// </summary>
        /// <param name="channelType">Specifies the type of the channel. Either open_channels or group_channels. (required).</param>
        /// <param name="channelUrl">Specifies the URL of the channel to store the metacounter in. (required).</param>
        /// <param name="metacounter">Specifies a &#x60;JSON&#x60; object that stores key-value items. The key must not have a comma (,) and its length is limited to 128 characters. The value must be an integer. This property can have up to 5 items. (required).</param>
        public CreateChannelMetacounterData(string channelType = default, string channelUrl = default, string metacounter = default)
        {
            // to ensure "channelType" is required (not null)
            if (channelType == null)
            {
                throw new InvalidDataException("channelType is a required property for CreateChannelMetacounterData and cannot be null");
            }
            else
            {
                this.ChannelType = channelType;
            }

            // to ensure "channelUrl" is required (not null)
            if (channelUrl == null)
            {
                throw new InvalidDataException("channelUrl is a required property for CreateChannelMetacounterData and cannot be null");
            }
            else
            {
                this.ChannelUrl = channelUrl;
            }

            // to ensure "metacounter" is required (not null)
            if (metacounter == null)
            {
                throw new InvalidDataException("metacounter is a required property for CreateChannelMetacounterData and cannot be null");
            }
            else
            {
                this.Metacounter = metacounter;
            }

        }

        /// <summary>
        /// Specifies the type of the channel. Either open_channels or group_channels.
        /// </summary>
        /// <value>Specifies the type of the channel. Either open_channels or group_channels.</value>
        [DataMember(Name="channel_type", EmitDefaultValue=true)]
        public string ChannelType { get; set; }

        /// <summary>
        /// Specifies the URL of the channel to store the metacounter in.
        /// </summary>
        /// <value>Specifies the URL of the channel to store the metacounter in.</value>
        [DataMember(Name="channel_url", EmitDefaultValue=true)]
        public string ChannelUrl { get; set; }

        /// <summary>
        /// Specifies a &#x60;JSON&#x60; object that stores key-value items. The key must not have a comma (,) and its length is limited to 128 characters. The value must be an integer. This property can have up to 5 items.
        /// </summary>
        /// <value>Specifies a &#x60;JSON&#x60; object that stores key-value items. The key must not have a comma (,) and its length is limited to 128 characters. The value must be an integer. This property can have up to 5 items.</value>
        [DataMember(Name="metacounter", EmitDefaultValue=true)]
        public string Metacounter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateChannelMetacounterData {\n");
            sb.Append("  ChannelType: ").Append(ChannelType).Append("\n");
            sb.Append("  ChannelUrl: ").Append(ChannelUrl).Append("\n");
            sb.Append("  Metacounter: ").Append(Metacounter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateChannelMetacounterData);
        }

        /// <summary>
        /// Returns true if CreateChannelMetacounterData instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateChannelMetacounterData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateChannelMetacounterData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelType == input.ChannelType ||
                    (this.ChannelType != null &&
                    this.ChannelType.Equals(input.ChannelType))
                ) && 
                (
                    this.ChannelUrl == input.ChannelUrl ||
                    (this.ChannelUrl != null &&
                    this.ChannelUrl.Equals(input.ChannelUrl))
                ) && 
                (
                    this.Metacounter == input.Metacounter ||
                    (this.Metacounter != null &&
                    this.Metacounter.Equals(input.Metacounter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelType != null)
                    hashCode = hashCode * 59 + this.ChannelType.GetHashCode();
                if (this.ChannelUrl != null)
                    hashCode = hashCode * 59 + this.ChannelUrl.GetHashCode();
                if (this.Metacounter != null)
                    hashCode = hashCode * 59 + this.Metacounter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
