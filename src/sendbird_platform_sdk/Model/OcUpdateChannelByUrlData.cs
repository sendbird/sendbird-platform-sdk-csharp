/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// OcUpdateChannelByUrlData
    /// </summary>
    [DataContract]
    public partial class OcUpdateChannelByUrlData :  IEquatable<OcUpdateChannelByUrlData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OcUpdateChannelByUrlData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OcUpdateChannelByUrlData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OcUpdateChannelByUrlData" /> class.
        /// </summary>
        /// <param name="channelUrl">Specifies the URL of the channel to update. (required).</param>
        /// <param name="name">Specifies the channel topic, or the name of the channel. The length is limited to 191 characters. (required).</param>
        /// <param name="coverUrl">Specifies the URL of the cover image. The length is limited to 2,048 characters. (required).</param>
        /// <param name="coverFile">Uploads the file for the channel cover image. (required).</param>
        /// <param name="customType">Specifies the custom channel type which is used for channel grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views. (required).</param>
        /// <param name="data">Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string. (required).</param>
        /// <param name="operatorIds">Specifies an array of one or more user IDs to register as operators of the channel. The maximum allowed number of operators per channel is 100. Operators can delete any messages in the channel, and can also receive all messages that have been throttled.&lt;br/&gt;&lt;br/&gt;  Operators cannot view messages that have been [moderated by](/docs/chat/v3/platform-api/guides/filter-and-moderation) the domain filter or profanity filter. Only the sender will be notified that the message has been blocked. (required).</param>
        /// <param name="operators">(Deprecated) Specifies the string IDs of the users registered as channel operators. Operators can delete any messages in the channel, and can also receive all messages that have been throttled. (required).</param>
        public OcUpdateChannelByUrlData(string channelUrl = default, string name = default, string coverUrl = default, System.IO.Stream coverFile = default(System.IO.Stream), string customType = default, string data = default, List<string> operatorIds = default, List<string> operators = default)
        {
            // to ensure "channelUrl" is required (not null)
            if (channelUrl == null)
            {
                throw new InvalidDataException("channelUrl is a required property for OcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.ChannelUrl = channelUrl;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for OcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "coverUrl" is required (not null)
            if (coverUrl == null)
            {
                throw new InvalidDataException("coverUrl is a required property for OcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.CoverUrl = coverUrl;
            }

            // to ensure "coverFile" is required (not null)
            if (coverFile == null)
            {
                throw new InvalidDataException("coverFile is a required property for OcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.CoverFile = coverFile;
            }

            // to ensure "customType" is required (not null)
            if (customType == null)
            {
                throw new InvalidDataException("customType is a required property for OcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.CustomType = customType;
            }

            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for OcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.Data = data;
            }

            // to ensure "operatorIds" is required (not null)
            if (operatorIds == null)
            {
                throw new InvalidDataException("operatorIds is a required property for OcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.OperatorIds = operatorIds;
            }

            // to ensure "operators" is required (not null)
            if (operators == null)
            {
                throw new InvalidDataException("operators is a required property for OcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.Operators = operators;
            }

        }

        /// <summary>
        /// Specifies the URL of the channel to update.
        /// </summary>
        /// <value>Specifies the URL of the channel to update.</value>
        [DataMember(Name="channel_url", EmitDefaultValue=true)]
        public string ChannelUrl { get; set; }

        /// <summary>
        /// Specifies the channel topic, or the name of the channel. The length is limited to 191 characters.
        /// </summary>
        /// <value>Specifies the channel topic, or the name of the channel. The length is limited to 191 characters.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies the URL of the cover image. The length is limited to 2,048 characters.
        /// </summary>
        /// <value>Specifies the URL of the cover image. The length is limited to 2,048 characters.</value>
        [DataMember(Name="cover_url", EmitDefaultValue=true)]
        public string CoverUrl { get; set; }

        /// <summary>
        /// Uploads the file for the channel cover image.
        /// </summary>
        /// <value>Uploads the file for the channel cover image.</value>
        [DataMember(Name="cover_file", EmitDefaultValue=true)]
        public System.IO.Stream CoverFile { get; set; }

        /// <summary>
        /// Specifies the custom channel type which is used for channel grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views.
        /// </summary>
        /// <value>Specifies the custom channel type which is used for channel grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views.</value>
        [DataMember(Name="custom_type", EmitDefaultValue=true)]
        public string CustomType { get; set; }

        /// <summary>
        /// Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string.
        /// </summary>
        /// <value>Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string.</value>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public string Data { get; set; }

        /// <summary>
        /// Specifies an array of one or more user IDs to register as operators of the channel. The maximum allowed number of operators per channel is 100. Operators can delete any messages in the channel, and can also receive all messages that have been throttled.&lt;br/&gt;&lt;br/&gt;  Operators cannot view messages that have been [moderated by](/docs/chat/v3/platform-api/guides/filter-and-moderation) the domain filter or profanity filter. Only the sender will be notified that the message has been blocked.
        /// </summary>
        /// <value>Specifies an array of one or more user IDs to register as operators of the channel. The maximum allowed number of operators per channel is 100. Operators can delete any messages in the channel, and can also receive all messages that have been throttled.&lt;br/&gt;&lt;br/&gt;  Operators cannot view messages that have been [moderated by](/docs/chat/v3/platform-api/guides/filter-and-moderation) the domain filter or profanity filter. Only the sender will be notified that the message has been blocked.</value>
        [DataMember(Name="operator_ids", EmitDefaultValue=true)]
        public List<string> OperatorIds { get; set; }

        /// <summary>
        /// (Deprecated) Specifies the string IDs of the users registered as channel operators. Operators can delete any messages in the channel, and can also receive all messages that have been throttled.
        /// </summary>
        /// <value>(Deprecated) Specifies the string IDs of the users registered as channel operators. Operators can delete any messages in the channel, and can also receive all messages that have been throttled.</value>
        [DataMember(Name="operators", EmitDefaultValue=true)]
        public List<string> Operators { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OcUpdateChannelByUrlData {\n");
            sb.Append("  ChannelUrl: ").Append(ChannelUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CoverUrl: ").Append(CoverUrl).Append("\n");
            sb.Append("  CoverFile: ").Append(CoverFile).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  OperatorIds: ").Append(OperatorIds).Append("\n");
            sb.Append("  Operators: ").Append(Operators).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OcUpdateChannelByUrlData);
        }

        /// <summary>
        /// Returns true if OcUpdateChannelByUrlData instances are equal
        /// </summary>
        /// <param name="input">Instance of OcUpdateChannelByUrlData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OcUpdateChannelByUrlData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelUrl == input.ChannelUrl ||
                    (this.ChannelUrl != null &&
                    this.ChannelUrl.Equals(input.ChannelUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CoverUrl == input.CoverUrl ||
                    (this.CoverUrl != null &&
                    this.CoverUrl.Equals(input.CoverUrl))
                ) && 
                (
                    this.CoverFile == input.CoverFile ||
                    (this.CoverFile != null &&
                    this.CoverFile.Equals(input.CoverFile))
                ) && 
                (
                    this.CustomType == input.CustomType ||
                    (this.CustomType != null &&
                    this.CustomType.Equals(input.CustomType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.OperatorIds == input.OperatorIds ||
                    this.OperatorIds != null &&
                    input.OperatorIds != null &&
                    this.OperatorIds.SequenceEqual(input.OperatorIds)
                ) && 
                (
                    this.Operators == input.Operators ||
                    this.Operators != null &&
                    input.Operators != null &&
                    this.Operators.SequenceEqual(input.Operators)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelUrl != null)
                    hashCode = hashCode * 59 + this.ChannelUrl.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CoverUrl != null)
                    hashCode = hashCode * 59 + this.CoverUrl.GetHashCode();
                if (this.CoverFile != null)
                    hashCode = hashCode * 59 + this.CoverFile.GetHashCode();
                if (this.CustomType != null)
                    hashCode = hashCode * 59 + this.CustomType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.OperatorIds != null)
                    hashCode = hashCode * 59 + this.OperatorIds.GetHashCode();
                if (this.Operators != null)
                    hashCode = hashCode * 59 + this.Operators.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
