/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// CreateBotResponseBot
    /// </summary>
    [DataContract]
    public partial class CreateBotResponseBot :  IEquatable<CreateBotResponseBot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBotResponseBot" /> class.
        /// </summary>
        /// <param name="botToken">botToken.</param>
        /// <param name="botProfileUrl">botProfileUrl.</param>
        /// <param name="botUserid">botUserid.</param>
        /// <param name="botNickname">botNickname.</param>
        /// <param name="botType">botType.</param>
        /// <param name="botMetadata">botMetadata.</param>
        public CreateBotResponseBot(string botToken = default, string botProfileUrl = default, string botUserid = default, string botNickname = default, string botType = default, Object botMetadata = default)
        {
            this.BotToken = botToken;
            this.BotProfileUrl = botProfileUrl;
            this.BotUserid = botUserid;
            this.BotNickname = botNickname;
            this.BotType = botType;
            this.BotMetadata = botMetadata;
        }

        /// <summary>
        /// Gets or Sets BotToken
        /// </summary>
        [DataMember(Name="bot_token", EmitDefaultValue=false)]
        public string BotToken { get; set; }

        /// <summary>
        /// Gets or Sets BotProfileUrl
        /// </summary>
        [DataMember(Name="bot_profile_url", EmitDefaultValue=false)]
        public string BotProfileUrl { get; set; }

        /// <summary>
        /// Gets or Sets BotUserid
        /// </summary>
        [DataMember(Name="bot_userid", EmitDefaultValue=false)]
        public string BotUserid { get; set; }

        /// <summary>
        /// Gets or Sets BotNickname
        /// </summary>
        [DataMember(Name="bot_nickname", EmitDefaultValue=false)]
        public string BotNickname { get; set; }

        /// <summary>
        /// Gets or Sets BotType
        /// </summary>
        [DataMember(Name="bot_type", EmitDefaultValue=false)]
        public string BotType { get; set; }

        /// <summary>
        /// Gets or Sets BotMetadata
        /// </summary>
        [DataMember(Name="bot_metadata", EmitDefaultValue=false)]
        public Object BotMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateBotResponseBot {\n");
            sb.Append("  BotToken: ").Append(BotToken).Append("\n");
            sb.Append("  BotProfileUrl: ").Append(BotProfileUrl).Append("\n");
            sb.Append("  BotUserid: ").Append(BotUserid).Append("\n");
            sb.Append("  BotNickname: ").Append(BotNickname).Append("\n");
            sb.Append("  BotType: ").Append(BotType).Append("\n");
            sb.Append("  BotMetadata: ").Append(BotMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateBotResponseBot);
        }

        /// <summary>
        /// Returns true if CreateBotResponseBot instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateBotResponseBot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateBotResponseBot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BotToken == input.BotToken ||
                    (this.BotToken != null &&
                    this.BotToken.Equals(input.BotToken))
                ) && 
                (
                    this.BotProfileUrl == input.BotProfileUrl ||
                    (this.BotProfileUrl != null &&
                    this.BotProfileUrl.Equals(input.BotProfileUrl))
                ) && 
                (
                    this.BotUserid == input.BotUserid ||
                    (this.BotUserid != null &&
                    this.BotUserid.Equals(input.BotUserid))
                ) && 
                (
                    this.BotNickname == input.BotNickname ||
                    (this.BotNickname != null &&
                    this.BotNickname.Equals(input.BotNickname))
                ) && 
                (
                    this.BotType == input.BotType ||
                    (this.BotType != null &&
                    this.BotType.Equals(input.BotType))
                ) && 
                (
                    this.BotMetadata == input.BotMetadata ||
                    (this.BotMetadata != null &&
                    this.BotMetadata.Equals(input.BotMetadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BotToken != null)
                    hashCode = hashCode * 59 + this.BotToken.GetHashCode();
                if (this.BotProfileUrl != null)
                    hashCode = hashCode * 59 + this.BotProfileUrl.GetHashCode();
                if (this.BotUserid != null)
                    hashCode = hashCode * 59 + this.BotUserid.GetHashCode();
                if (this.BotNickname != null)
                    hashCode = hashCode * 59 + this.BotNickname.GetHashCode();
                if (this.BotType != null)
                    hashCode = hashCode * 59 + this.BotType.GetHashCode();
                if (this.BotMetadata != null)
                    hashCode = hashCode * 59 + this.BotMetadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
