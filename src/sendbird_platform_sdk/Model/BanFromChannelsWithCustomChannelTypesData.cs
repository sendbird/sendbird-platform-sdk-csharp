/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// BanFromChannelsWithCustomChannelTypesData
    /// </summary>
    [DataContract]
    public partial class BanFromChannelsWithCustomChannelTypesData :  IEquatable<BanFromChannelsWithCustomChannelTypesData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BanFromChannelsWithCustomChannelTypesData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BanFromChannelsWithCustomChannelTypesData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BanFromChannelsWithCustomChannelTypesData" /> class.
        /// </summary>
        /// <param name="channelCustomTypes">Specifies an array of one or more custom channel types, in order to ban the user from channels with the channel types. The user is permanently banned unless unbanned (10 years, technically). (required).</param>
        public BanFromChannelsWithCustomChannelTypesData(List<string> channelCustomTypes = default)
        {
            // to ensure "channelCustomTypes" is required (not null)
            if (channelCustomTypes == null)
            {
                throw new InvalidDataException("channelCustomTypes is a required property for BanFromChannelsWithCustomChannelTypesData and cannot be null");
            }
            else
            {
                this.ChannelCustomTypes = channelCustomTypes;
            }

        }

        /// <summary>
        /// Specifies an array of one or more custom channel types, in order to ban the user from channels with the channel types. The user is permanently banned unless unbanned (10 years, technically).
        /// </summary>
        /// <value>Specifies an array of one or more custom channel types, in order to ban the user from channels with the channel types. The user is permanently banned unless unbanned (10 years, technically).</value>
        [DataMember(Name="channel_custom_types", EmitDefaultValue=true)]
        public List<string> ChannelCustomTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BanFromChannelsWithCustomChannelTypesData {\n");
            sb.Append("  ChannelCustomTypes: ").Append(ChannelCustomTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BanFromChannelsWithCustomChannelTypesData);
        }

        /// <summary>
        /// Returns true if BanFromChannelsWithCustomChannelTypesData instances are equal
        /// </summary>
        /// <param name="input">Instance of BanFromChannelsWithCustomChannelTypesData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BanFromChannelsWithCustomChannelTypesData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelCustomTypes == input.ChannelCustomTypes ||
                    this.ChannelCustomTypes != null &&
                    input.ChannelCustomTypes != null &&
                    this.ChannelCustomTypes.SequenceEqual(input.ChannelCustomTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelCustomTypes != null)
                    hashCode = hashCode * 59 + this.ChannelCustomTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
