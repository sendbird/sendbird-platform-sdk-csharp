/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// CreateABotResponseBot
    /// </summary>
    [DataContract]
    public partial class CreateABotResponseBot :  IEquatable<CreateABotResponseBot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateABotResponseBot" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateABotResponseBot() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateABotResponseBot" /> class.
        /// </summary>
        /// <param name="aiAgentType">aiAgentType.</param>
        /// <param name="botMetadata">botMetadata.</param>
        /// <param name="botNickname">botNickname.</param>
        /// <param name="botProfileUrl">botProfileUrl.</param>
        /// <param name="botRequireAuthForProfileImage">botRequireAuthForProfileImage.</param>
        /// <param name="botToken">botToken.</param>
        /// <param name="botType">botType.</param>
        /// <param name="botUserid">botUserid (required).</param>
        /// <param name="feedback">feedback.</param>
        public CreateABotResponseBot(string aiAgentType = default(string), Object botMetadata = default(Object), string botNickname = default(string), string botProfileUrl = default(string), bool botRequireAuthForProfileImage = default(bool), string botToken = default(string), string botType = default(string), string botUserid = default(string), bool feedback = default(bool))
        {
            // to ensure "botUserid" is required (not null)
            if (botUserid == null)
            {
                throw new InvalidDataException("botUserid is a required property for CreateABotResponseBot and cannot be null");
            }
            else
            {
                this.BotUserid = botUserid;
            }

            this.AiAgentType = aiAgentType;
            this.BotMetadata = botMetadata;
            this.BotNickname = botNickname;
            this.BotProfileUrl = botProfileUrl;
            this.BotRequireAuthForProfileImage = botRequireAuthForProfileImage;
            this.BotToken = botToken;
            this.BotType = botType;
            this.Feedback = feedback;
        }

        /// <summary>
        /// Gets or Sets AiAgentType
        /// </summary>
        [DataMember(Name="ai_agent_type", EmitDefaultValue=false)]
        public string AiAgentType { get; set; }

        /// <summary>
        /// Gets or Sets BotMetadata
        /// </summary>
        [DataMember(Name="bot_metadata", EmitDefaultValue=false)]
        public Object BotMetadata { get; set; }

        /// <summary>
        /// Gets or Sets BotNickname
        /// </summary>
        [DataMember(Name="bot_nickname", EmitDefaultValue=false)]
        public string BotNickname { get; set; }

        /// <summary>
        /// Gets or Sets BotProfileUrl
        /// </summary>
        [DataMember(Name="bot_profile_url", EmitDefaultValue=false)]
        public string BotProfileUrl { get; set; }

        /// <summary>
        /// Gets or Sets BotRequireAuthForProfileImage
        /// </summary>
        [DataMember(Name="bot_require_auth_for_profile_image", EmitDefaultValue=false)]
        public bool BotRequireAuthForProfileImage { get; set; }

        /// <summary>
        /// Gets or Sets BotToken
        /// </summary>
        [DataMember(Name="bot_token", EmitDefaultValue=false)]
        public string BotToken { get; set; }

        /// <summary>
        /// Gets or Sets BotType
        /// </summary>
        [DataMember(Name="bot_type", EmitDefaultValue=false)]
        public string BotType { get; set; }

        /// <summary>
        /// Gets or Sets BotUserid
        /// </summary>
        [DataMember(Name="bot_userid", EmitDefaultValue=true)]
        public string BotUserid { get; set; }

        /// <summary>
        /// Gets or Sets Feedback
        /// </summary>
        [DataMember(Name="feedback", EmitDefaultValue=false)]
        public bool Feedback { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateABotResponseBot {\n");
            sb.Append("  AiAgentType: ").Append(AiAgentType).Append("\n");
            sb.Append("  BotMetadata: ").Append(BotMetadata).Append("\n");
            sb.Append("  BotNickname: ").Append(BotNickname).Append("\n");
            sb.Append("  BotProfileUrl: ").Append(BotProfileUrl).Append("\n");
            sb.Append("  BotRequireAuthForProfileImage: ").Append(BotRequireAuthForProfileImage).Append("\n");
            sb.Append("  BotToken: ").Append(BotToken).Append("\n");
            sb.Append("  BotType: ").Append(BotType).Append("\n");
            sb.Append("  BotUserid: ").Append(BotUserid).Append("\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateABotResponseBot);
        }

        /// <summary>
        /// Returns true if CreateABotResponseBot instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateABotResponseBot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateABotResponseBot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AiAgentType == input.AiAgentType ||
                    (this.AiAgentType != null &&
                    this.AiAgentType.Equals(input.AiAgentType))
                ) && 
                (
                    this.BotMetadata == input.BotMetadata ||
                    (this.BotMetadata != null &&
                    this.BotMetadata.Equals(input.BotMetadata))
                ) && 
                (
                    this.BotNickname == input.BotNickname ||
                    (this.BotNickname != null &&
                    this.BotNickname.Equals(input.BotNickname))
                ) && 
                (
                    this.BotProfileUrl == input.BotProfileUrl ||
                    (this.BotProfileUrl != null &&
                    this.BotProfileUrl.Equals(input.BotProfileUrl))
                ) && 
                (
                    this.BotRequireAuthForProfileImage == input.BotRequireAuthForProfileImage ||
                    (this.BotRequireAuthForProfileImage != null &&
                    this.BotRequireAuthForProfileImage.Equals(input.BotRequireAuthForProfileImage))
                ) && 
                (
                    this.BotToken == input.BotToken ||
                    (this.BotToken != null &&
                    this.BotToken.Equals(input.BotToken))
                ) && 
                (
                    this.BotType == input.BotType ||
                    (this.BotType != null &&
                    this.BotType.Equals(input.BotType))
                ) && 
                (
                    this.BotUserid == input.BotUserid ||
                    (this.BotUserid != null &&
                    this.BotUserid.Equals(input.BotUserid))
                ) && 
                (
                    this.Feedback == input.Feedback ||
                    (this.Feedback != null &&
                    this.Feedback.Equals(input.Feedback))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AiAgentType != null)
                    hashCode = hashCode * 59 + this.AiAgentType.GetHashCode();
                if (this.BotMetadata != null)
                    hashCode = hashCode * 59 + this.BotMetadata.GetHashCode();
                if (this.BotNickname != null)
                    hashCode = hashCode * 59 + this.BotNickname.GetHashCode();
                if (this.BotProfileUrl != null)
                    hashCode = hashCode * 59 + this.BotProfileUrl.GetHashCode();
                if (this.BotRequireAuthForProfileImage != null)
                    hashCode = hashCode * 59 + this.BotRequireAuthForProfileImage.GetHashCode();
                if (this.BotToken != null)
                    hashCode = hashCode * 59 + this.BotToken.GetHashCode();
                if (this.BotType != null)
                    hashCode = hashCode * 59 + this.BotType.GetHashCode();
                if (this.BotUserid != null)
                    hashCode = hashCode * 59 + this.BotUserid.GetHashCode();
                if (this.Feedback != null)
                    hashCode = hashCode * 59 + this.Feedback.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
