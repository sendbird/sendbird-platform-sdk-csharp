/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// CreateABotRequest
    /// </summary>
    [DataContract]
    public partial class CreateABotRequest :  IEquatable<CreateABotRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateABotRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateABotRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateABotRequest" /> class.
        /// </summary>
        /// <param name="botCallbackUrl">botCallbackUrl (required).</param>
        /// <param name="botNickname">Specifies the bot&#39;s nickname. The length is limited to 80 characters. (required).</param>
        /// <param name="botProfileUrl">botProfileUrl (required).</param>
        /// <param name="botType">botType (required).</param>
        /// <param name="botUserid">Specifies the unique ID of a bot. The length is limited to 80 characters. (required).</param>
        /// <param name="isPrivacyMode">Determines whether to forward all or specific messages to the bot in channels where the bot is a member. If set to true, only messages starting with a \&quot;/\&quot; or mentioning the bot_userid are forwarded to the bot. If set to false, all messages are forwarded. This property can help protect the privacy of users&#39; chat logs by configuring the bot to only receive messages addressed to the bot. (required).</param>
        /// <param name="channelInvitationPreference">channelInvitationPreference.</param>
        /// <param name="enableMarkAsRead">enableMarkAsRead.</param>
        /// <param name="showMember">showMember.</param>
        public CreateABotRequest(string botCallbackUrl = default(string), string botNickname = default(string), string botProfileUrl = default(string), string botType = default(string), string botUserid = default(string), bool isPrivacyMode = default(bool), int channelInvitationPreference = default(int), bool enableMarkAsRead = default(bool), bool showMember = default(bool))
        {
            // to ensure "botCallbackUrl" is required (not null)
            if (botCallbackUrl == null)
            {
                throw new InvalidDataException("botCallbackUrl is a required property for CreateABotRequest and cannot be null");
            }
            else
            {
                this.BotCallbackUrl = botCallbackUrl;
            }

            // to ensure "botNickname" is required (not null)
            if (botNickname == null)
            {
                throw new InvalidDataException("botNickname is a required property for CreateABotRequest and cannot be null");
            }
            else
            {
                this.BotNickname = botNickname;
            }

            // to ensure "botProfileUrl" is required (not null)
            if (botProfileUrl == null)
            {
                throw new InvalidDataException("botProfileUrl is a required property for CreateABotRequest and cannot be null");
            }
            else
            {
                this.BotProfileUrl = botProfileUrl;
            }

            // to ensure "botType" is required (not null)
            if (botType == null)
            {
                throw new InvalidDataException("botType is a required property for CreateABotRequest and cannot be null");
            }
            else
            {
                this.BotType = botType;
            }

            // to ensure "botUserid" is required (not null)
            if (botUserid == null)
            {
                throw new InvalidDataException("botUserid is a required property for CreateABotRequest and cannot be null");
            }
            else
            {
                this.BotUserid = botUserid;
            }

            // to ensure "isPrivacyMode" is required (not null)
            if (isPrivacyMode == null)
            {
                throw new InvalidDataException("isPrivacyMode is a required property for CreateABotRequest and cannot be null");
            }
            else
            {
                this.IsPrivacyMode = isPrivacyMode;
            }

            this.ChannelInvitationPreference = channelInvitationPreference;
            this.EnableMarkAsRead = enableMarkAsRead;
            this.ShowMember = showMember;
        }

        /// <summary>
        /// Gets or Sets BotCallbackUrl
        /// </summary>
        [DataMember(Name="bot_callback_url", EmitDefaultValue=true)]
        public string BotCallbackUrl { get; set; }

        /// <summary>
        /// Specifies the bot&#39;s nickname. The length is limited to 80 characters.
        /// </summary>
        /// <value>Specifies the bot&#39;s nickname. The length is limited to 80 characters.</value>
        [DataMember(Name="bot_nickname", EmitDefaultValue=true)]
        public string BotNickname { get; set; }

        /// <summary>
        /// Gets or Sets BotProfileUrl
        /// </summary>
        [DataMember(Name="bot_profile_url", EmitDefaultValue=true)]
        public string BotProfileUrl { get; set; }

        /// <summary>
        /// Gets or Sets BotType
        /// </summary>
        [DataMember(Name="bot_type", EmitDefaultValue=true)]
        public string BotType { get; set; }

        /// <summary>
        /// Specifies the unique ID of a bot. The length is limited to 80 characters.
        /// </summary>
        /// <value>Specifies the unique ID of a bot. The length is limited to 80 characters.</value>
        [DataMember(Name="bot_userid", EmitDefaultValue=true)]
        public string BotUserid { get; set; }

        /// <summary>
        /// Determines whether to forward all or specific messages to the bot in channels where the bot is a member. If set to true, only messages starting with a \&quot;/\&quot; or mentioning the bot_userid are forwarded to the bot. If set to false, all messages are forwarded. This property can help protect the privacy of users&#39; chat logs by configuring the bot to only receive messages addressed to the bot.
        /// </summary>
        /// <value>Determines whether to forward all or specific messages to the bot in channels where the bot is a member. If set to true, only messages starting with a \&quot;/\&quot; or mentioning the bot_userid are forwarded to the bot. If set to false, all messages are forwarded. This property can help protect the privacy of users&#39; chat logs by configuring the bot to only receive messages addressed to the bot.</value>
        [DataMember(Name="is_privacy_mode", EmitDefaultValue=true)]
        public bool IsPrivacyMode { get; set; }

        /// <summary>
        /// Gets or Sets ChannelInvitationPreference
        /// </summary>
        [DataMember(Name="channel_invitation_preference", EmitDefaultValue=false)]
        public int ChannelInvitationPreference { get; set; }

        /// <summary>
        /// Gets or Sets EnableMarkAsRead
        /// </summary>
        [DataMember(Name="enable_mark_as_read", EmitDefaultValue=false)]
        public bool EnableMarkAsRead { get; set; }

        /// <summary>
        /// Gets or Sets ShowMember
        /// </summary>
        [DataMember(Name="show_member", EmitDefaultValue=false)]
        public bool ShowMember { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateABotRequest {\n");
            sb.Append("  BotCallbackUrl: ").Append(BotCallbackUrl).Append("\n");
            sb.Append("  BotNickname: ").Append(BotNickname).Append("\n");
            sb.Append("  BotProfileUrl: ").Append(BotProfileUrl).Append("\n");
            sb.Append("  BotType: ").Append(BotType).Append("\n");
            sb.Append("  BotUserid: ").Append(BotUserid).Append("\n");
            sb.Append("  IsPrivacyMode: ").Append(IsPrivacyMode).Append("\n");
            sb.Append("  ChannelInvitationPreference: ").Append(ChannelInvitationPreference).Append("\n");
            sb.Append("  EnableMarkAsRead: ").Append(EnableMarkAsRead).Append("\n");
            sb.Append("  ShowMember: ").Append(ShowMember).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateABotRequest);
        }

        /// <summary>
        /// Returns true if CreateABotRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateABotRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateABotRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BotCallbackUrl == input.BotCallbackUrl ||
                    (this.BotCallbackUrl != null &&
                    this.BotCallbackUrl.Equals(input.BotCallbackUrl))
                ) && 
                (
                    this.BotNickname == input.BotNickname ||
                    (this.BotNickname != null &&
                    this.BotNickname.Equals(input.BotNickname))
                ) && 
                (
                    this.BotProfileUrl == input.BotProfileUrl ||
                    (this.BotProfileUrl != null &&
                    this.BotProfileUrl.Equals(input.BotProfileUrl))
                ) && 
                (
                    this.BotType == input.BotType ||
                    (this.BotType != null &&
                    this.BotType.Equals(input.BotType))
                ) && 
                (
                    this.BotUserid == input.BotUserid ||
                    (this.BotUserid != null &&
                    this.BotUserid.Equals(input.BotUserid))
                ) && 
                (
                    this.IsPrivacyMode == input.IsPrivacyMode ||
                    (this.IsPrivacyMode != null &&
                    this.IsPrivacyMode.Equals(input.IsPrivacyMode))
                ) && 
                (
                    this.ChannelInvitationPreference == input.ChannelInvitationPreference ||
                    (this.ChannelInvitationPreference != null &&
                    this.ChannelInvitationPreference.Equals(input.ChannelInvitationPreference))
                ) && 
                (
                    this.EnableMarkAsRead == input.EnableMarkAsRead ||
                    (this.EnableMarkAsRead != null &&
                    this.EnableMarkAsRead.Equals(input.EnableMarkAsRead))
                ) && 
                (
                    this.ShowMember == input.ShowMember ||
                    (this.ShowMember != null &&
                    this.ShowMember.Equals(input.ShowMember))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BotCallbackUrl != null)
                    hashCode = hashCode * 59 + this.BotCallbackUrl.GetHashCode();
                if (this.BotNickname != null)
                    hashCode = hashCode * 59 + this.BotNickname.GetHashCode();
                if (this.BotProfileUrl != null)
                    hashCode = hashCode * 59 + this.BotProfileUrl.GetHashCode();
                if (this.BotType != null)
                    hashCode = hashCode * 59 + this.BotType.GetHashCode();
                if (this.BotUserid != null)
                    hashCode = hashCode * 59 + this.BotUserid.GetHashCode();
                if (this.IsPrivacyMode != null)
                    hashCode = hashCode * 59 + this.IsPrivacyMode.GetHashCode();
                if (this.ChannelInvitationPreference != null)
                    hashCode = hashCode * 59 + this.ChannelInvitationPreference.GetHashCode();
                if (this.EnableMarkAsRead != null)
                    hashCode = hashCode * 59 + this.EnableMarkAsRead.GetHashCode();
                if (this.ShowMember != null)
                    hashCode = hashCode * 59 + this.ShowMember.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
