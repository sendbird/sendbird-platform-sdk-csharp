/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// GcCreateChannelData
    /// </summary>
    [DataContract]
    public partial class GcCreateChannelData :  IEquatable<GcCreateChannelData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GcCreateChannelData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GcCreateChannelData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GcCreateChannelData" /> class.
        /// </summary>
        /// <param name="userIds">Specifies an array of one or more IDs of users to invite to the channel. The maximum number of users to be invited at once is 100. The users below and this property can be used interchangeably. (required).</param>
        /// <param name="users">Specifies an array of one or more IDs of users to invite to the channel. The maximum number of users to be invited at once is 100. The user_ids above and this property can be used interchangeably..</param>
        /// <param name="name">Specifies the name of the channel, or the channel topic. The length is limited to 191 characters. (Default: group channel).</param>
        /// <param name="channelUrl">Specifies the URL of the channel. Only numbers, characters, and underscores are allowed. The length is 4 to 100 characters, inclusive. If not specified, a URL is automatically generated..</param>
        /// <param name="coverUrl">Specifies the URL of the cover image for the channel. The length is limited to 2,048 characters..</param>
        /// <param name="coverFile">Uploads the cover image file for the channel..</param>
        /// <param name="customType">Specifies the custom channel type which is used for channel grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views..</param>
        /// <param name="data">Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string..</param>
        /// <param name="isDistinct">Determines whether to reuse an existing channel or create a new channel. If set to true, returns a channel with the same users in the user_ids or users property or creates a new channel if no match is found. Sendbird server can also use the custom channel type in the custom_type property if specified along with the users to return the corresponding channel. If set to false, Sendbird server always creates a new channel with a combination of the users as well as the channel custom type if specified. (Default: false)&lt;br /&gt;&lt;br /&gt; Under this property, Sendbird server does not distinguish channels based on other properties such as channel URL or channel name..</param>
        /// <param name="isPublic">Determines whether to allow a user to join the channel without an invitation. (Default: false).</param>
        /// <param name="isSuper">Determines whether to allow the channel to accommodate more than 2,000 members. (Default: false) &lt;br/&gt;&lt;br/&gt; Supergroup channels are not supported with the is_distinct property and the property is false by default..</param>
        /// <param name="isEphemeral">Determines whether to preserve the messages in the channel for the purpose of retrieving chat history. (Default: false).</param>
        /// <param name="accessCode">This parameter can only be used when the channel operator creates a public group channel. They can set an access code for the corresponding type of channel. The channel then requires the specified access code to a user who attempts to join. If specified, the is_access_code_required property of the channel resource is set to true..</param>
        /// <param name="inviterId">Specifies the ID of the user who has invited other users as members of the channel. The inviter is not automatically registered to the channel as a member, so you should specify the ID of the inviter in the user_ids property below if needed..</param>
        /// <param name="strict">Determines whether to receive a &#x60;400111&#x60; error and cease channel creation when there is at least one non-existing user in the specified user_ids or users property above. If set to false, the channel will be created excluding the non-existing users without receiving the mentioned error. (Default: false).</param>
        /// <param name="invitationStatus">Specifies one or more key-value pair items which set the invitation status of each user invited to the channel. The key should be a user_id and the value should be their joining status. Acceptable values are joined, invited_by_friend, and invited_by_non_friend. (Default: joined).</param>
        /// <param name="hiddenStatus">Specifies one or more key-value pair items which set the channel&#39;s hidden status for each user. The key should be a user_id and the value should be their hidden status. Acceptable values are limited to the following:&lt;br /&gt;- unhidden (default): the channel is included in when retrieving a list of group channels.&lt;br /&gt;- hidden_allow_auto_unhide: the channel automatically gets unhidden when receiving a new message.&lt;br /&gt;- hidden_prevent_auto_unhide: the channel keeps hidden though receiving a new message..</param>
        /// <param name="operatorIds">Specifies an array of one or more IDs of users to register as operators of the channel. You should also include these IDs in the user_ids property to invite them to the channel as members. They can delete any messages in the channel, and also view all messages without any filtering or throttling. The maximum allowed number of operators per channel is 100..</param>
        /// <param name="blockSdkUserChannelJoin">Determines whether to block users from joining the channel through the Chat SDK. This parameter can be used in order to restrict the ways for users to join the channel, and only using the [join a channel](#2-join-a-channel) action can add a user to the channel. (Default: false).</param>
        public GcCreateChannelData(List<string> userIds = default, List<SendBirdUser> users = default(List<SendBirdUser>), string name = default, string channelUrl = default, string coverUrl = default, System.IO.Stream coverFile = default(System.IO.Stream), string customType = default, string data = default, bool isDistinct = default(bool), bool isPublic = default(bool), bool isSuper = default(bool), bool isEphemeral = default(bool), string accessCode = default, string inviterId = default, bool strict = default(bool), Object invitationStatus = default, Object hiddenStatus = default, List<string> operatorIds = default, bool blockSdkUserChannelJoin = default(bool))
        {
            // to ensure "userIds" is required (not null)
            if (userIds == null)
            {
                throw new InvalidDataException("userIds is a required property for GcCreateChannelData and cannot be null");
            }
            else
            {
                this.UserIds = userIds;
            }

            this.Users = users;
            this.Name = name;
            this.ChannelUrl = channelUrl;
            this.CoverUrl = coverUrl;
            this.CoverFile = coverFile;
            this.CustomType = customType;
            this.Data = data;
            this.IsDistinct = isDistinct;
            this.IsPublic = isPublic;
            this.IsSuper = isSuper;
            this.IsEphemeral = isEphemeral;
            this.AccessCode = accessCode;
            this.InviterId = inviterId;
            this.Strict = strict;
            this.InvitationStatus = invitationStatus;
            this.HiddenStatus = hiddenStatus;
            this.OperatorIds = operatorIds;
            this.BlockSdkUserChannelJoin = blockSdkUserChannelJoin;
        }

        /// <summary>
        /// Specifies an array of one or more IDs of users to invite to the channel. The maximum number of users to be invited at once is 100. The users below and this property can be used interchangeably.
        /// </summary>
        /// <value>Specifies an array of one or more IDs of users to invite to the channel. The maximum number of users to be invited at once is 100. The users below and this property can be used interchangeably.</value>
        [DataMember(Name="user_ids", EmitDefaultValue=true)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// Specifies an array of one or more IDs of users to invite to the channel. The maximum number of users to be invited at once is 100. The user_ids above and this property can be used interchangeably.
        /// </summary>
        /// <value>Specifies an array of one or more IDs of users to invite to the channel. The maximum number of users to be invited at once is 100. The user_ids above and this property can be used interchangeably.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<SendBirdUser> Users { get; set; }

        /// <summary>
        /// Specifies the name of the channel, or the channel topic. The length is limited to 191 characters. (Default: group channel)
        /// </summary>
        /// <value>Specifies the name of the channel, or the channel topic. The length is limited to 191 characters. (Default: group channel)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies the URL of the channel. Only numbers, characters, and underscores are allowed. The length is 4 to 100 characters, inclusive. If not specified, a URL is automatically generated.
        /// </summary>
        /// <value>Specifies the URL of the channel. Only numbers, characters, and underscores are allowed. The length is 4 to 100 characters, inclusive. If not specified, a URL is automatically generated.</value>
        [DataMember(Name="channel_url", EmitDefaultValue=false)]
        public string ChannelUrl { get; set; }

        /// <summary>
        /// Specifies the URL of the cover image for the channel. The length is limited to 2,048 characters.
        /// </summary>
        /// <value>Specifies the URL of the cover image for the channel. The length is limited to 2,048 characters.</value>
        [DataMember(Name="cover_url", EmitDefaultValue=false)]
        public string CoverUrl { get; set; }

        /// <summary>
        /// Uploads the cover image file for the channel.
        /// </summary>
        /// <value>Uploads the cover image file for the channel.</value>
        [DataMember(Name="cover_file", EmitDefaultValue=false)]
        public System.IO.Stream CoverFile { get; set; }

        /// <summary>
        /// Specifies the custom channel type which is used for channel grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views.
        /// </summary>
        /// <value>Specifies the custom channel type which is used for channel grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views.</value>
        [DataMember(Name="custom_type", EmitDefaultValue=false)]
        public string CustomType { get; set; }

        /// <summary>
        /// Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string.
        /// </summary>
        /// <value>Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Determines whether to reuse an existing channel or create a new channel. If set to true, returns a channel with the same users in the user_ids or users property or creates a new channel if no match is found. Sendbird server can also use the custom channel type in the custom_type property if specified along with the users to return the corresponding channel. If set to false, Sendbird server always creates a new channel with a combination of the users as well as the channel custom type if specified. (Default: false)&lt;br /&gt;&lt;br /&gt; Under this property, Sendbird server does not distinguish channels based on other properties such as channel URL or channel name.
        /// </summary>
        /// <value>Determines whether to reuse an existing channel or create a new channel. If set to true, returns a channel with the same users in the user_ids or users property or creates a new channel if no match is found. Sendbird server can also use the custom channel type in the custom_type property if specified along with the users to return the corresponding channel. If set to false, Sendbird server always creates a new channel with a combination of the users as well as the channel custom type if specified. (Default: false)&lt;br /&gt;&lt;br /&gt; Under this property, Sendbird server does not distinguish channels based on other properties such as channel URL or channel name.</value>
        [DataMember(Name="is_distinct", EmitDefaultValue=false)]
        public bool IsDistinct { get; set; }

        /// <summary>
        /// Determines whether to allow a user to join the channel without an invitation. (Default: false)
        /// </summary>
        /// <value>Determines whether to allow a user to join the channel without an invitation. (Default: false)</value>
        [DataMember(Name="is_public", EmitDefaultValue=false)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Determines whether to allow the channel to accommodate more than 2,000 members. (Default: false) &lt;br/&gt;&lt;br/&gt; Supergroup channels are not supported with the is_distinct property and the property is false by default.
        /// </summary>
        /// <value>Determines whether to allow the channel to accommodate more than 2,000 members. (Default: false) &lt;br/&gt;&lt;br/&gt; Supergroup channels are not supported with the is_distinct property and the property is false by default.</value>
        [DataMember(Name="is_super", EmitDefaultValue=false)]
        public bool IsSuper { get; set; }

        /// <summary>
        /// Determines whether to preserve the messages in the channel for the purpose of retrieving chat history. (Default: false)
        /// </summary>
        /// <value>Determines whether to preserve the messages in the channel for the purpose of retrieving chat history. (Default: false)</value>
        [DataMember(Name="is_ephemeral", EmitDefaultValue=false)]
        public bool IsEphemeral { get; set; }

        /// <summary>
        /// This parameter can only be used when the channel operator creates a public group channel. They can set an access code for the corresponding type of channel. The channel then requires the specified access code to a user who attempts to join. If specified, the is_access_code_required property of the channel resource is set to true.
        /// </summary>
        /// <value>This parameter can only be used when the channel operator creates a public group channel. They can set an access code for the corresponding type of channel. The channel then requires the specified access code to a user who attempts to join. If specified, the is_access_code_required property of the channel resource is set to true.</value>
        [DataMember(Name="access_code", EmitDefaultValue=false)]
        public string AccessCode { get; set; }

        /// <summary>
        /// Specifies the ID of the user who has invited other users as members of the channel. The inviter is not automatically registered to the channel as a member, so you should specify the ID of the inviter in the user_ids property below if needed.
        /// </summary>
        /// <value>Specifies the ID of the user who has invited other users as members of the channel. The inviter is not automatically registered to the channel as a member, so you should specify the ID of the inviter in the user_ids property below if needed.</value>
        [DataMember(Name="inviter_id", EmitDefaultValue=false)]
        public string InviterId { get; set; }

        /// <summary>
        /// Determines whether to receive a &#x60;400111&#x60; error and cease channel creation when there is at least one non-existing user in the specified user_ids or users property above. If set to false, the channel will be created excluding the non-existing users without receiving the mentioned error. (Default: false)
        /// </summary>
        /// <value>Determines whether to receive a &#x60;400111&#x60; error and cease channel creation when there is at least one non-existing user in the specified user_ids or users property above. If set to false, the channel will be created excluding the non-existing users without receiving the mentioned error. (Default: false)</value>
        [DataMember(Name="strict", EmitDefaultValue=false)]
        public bool Strict { get; set; }

        /// <summary>
        /// Specifies one or more key-value pair items which set the invitation status of each user invited to the channel. The key should be a user_id and the value should be their joining status. Acceptable values are joined, invited_by_friend, and invited_by_non_friend. (Default: joined)
        /// </summary>
        /// <value>Specifies one or more key-value pair items which set the invitation status of each user invited to the channel. The key should be a user_id and the value should be their joining status. Acceptable values are joined, invited_by_friend, and invited_by_non_friend. (Default: joined)</value>
        [DataMember(Name="invitation_status", EmitDefaultValue=false)]
        public Object InvitationStatus { get; set; }

        /// <summary>
        /// Specifies one or more key-value pair items which set the channel&#39;s hidden status for each user. The key should be a user_id and the value should be their hidden status. Acceptable values are limited to the following:&lt;br /&gt;- unhidden (default): the channel is included in when retrieving a list of group channels.&lt;br /&gt;- hidden_allow_auto_unhide: the channel automatically gets unhidden when receiving a new message.&lt;br /&gt;- hidden_prevent_auto_unhide: the channel keeps hidden though receiving a new message.
        /// </summary>
        /// <value>Specifies one or more key-value pair items which set the channel&#39;s hidden status for each user. The key should be a user_id and the value should be their hidden status. Acceptable values are limited to the following:&lt;br /&gt;- unhidden (default): the channel is included in when retrieving a list of group channels.&lt;br /&gt;- hidden_allow_auto_unhide: the channel automatically gets unhidden when receiving a new message.&lt;br /&gt;- hidden_prevent_auto_unhide: the channel keeps hidden though receiving a new message.</value>
        [DataMember(Name="hidden_status", EmitDefaultValue=false)]
        public Object HiddenStatus { get; set; }

        /// <summary>
        /// Specifies an array of one or more IDs of users to register as operators of the channel. You should also include these IDs in the user_ids property to invite them to the channel as members. They can delete any messages in the channel, and also view all messages without any filtering or throttling. The maximum allowed number of operators per channel is 100.
        /// </summary>
        /// <value>Specifies an array of one or more IDs of users to register as operators of the channel. You should also include these IDs in the user_ids property to invite them to the channel as members. They can delete any messages in the channel, and also view all messages without any filtering or throttling. The maximum allowed number of operators per channel is 100.</value>
        [DataMember(Name="operator_ids", EmitDefaultValue=false)]
        public List<string> OperatorIds { get; set; }

        /// <summary>
        /// Determines whether to block users from joining the channel through the Chat SDK. This parameter can be used in order to restrict the ways for users to join the channel, and only using the [join a channel](#2-join-a-channel) action can add a user to the channel. (Default: false)
        /// </summary>
        /// <value>Determines whether to block users from joining the channel through the Chat SDK. This parameter can be used in order to restrict the ways for users to join the channel, and only using the [join a channel](#2-join-a-channel) action can add a user to the channel. (Default: false)</value>
        [DataMember(Name="block_sdk_user_channel_join", EmitDefaultValue=false)]
        public bool BlockSdkUserChannelJoin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GcCreateChannelData {\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ChannelUrl: ").Append(ChannelUrl).Append("\n");
            sb.Append("  CoverUrl: ").Append(CoverUrl).Append("\n");
            sb.Append("  CoverFile: ").Append(CoverFile).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  IsDistinct: ").Append(IsDistinct).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  IsSuper: ").Append(IsSuper).Append("\n");
            sb.Append("  IsEphemeral: ").Append(IsEphemeral).Append("\n");
            sb.Append("  AccessCode: ").Append(AccessCode).Append("\n");
            sb.Append("  InviterId: ").Append(InviterId).Append("\n");
            sb.Append("  Strict: ").Append(Strict).Append("\n");
            sb.Append("  InvitationStatus: ").Append(InvitationStatus).Append("\n");
            sb.Append("  HiddenStatus: ").Append(HiddenStatus).Append("\n");
            sb.Append("  OperatorIds: ").Append(OperatorIds).Append("\n");
            sb.Append("  BlockSdkUserChannelJoin: ").Append(BlockSdkUserChannelJoin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GcCreateChannelData);
        }

        /// <summary>
        /// Returns true if GcCreateChannelData instances are equal
        /// </summary>
        /// <param name="input">Instance of GcCreateChannelData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GcCreateChannelData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    input.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ChannelUrl == input.ChannelUrl ||
                    (this.ChannelUrl != null &&
                    this.ChannelUrl.Equals(input.ChannelUrl))
                ) && 
                (
                    this.CoverUrl == input.CoverUrl ||
                    (this.CoverUrl != null &&
                    this.CoverUrl.Equals(input.CoverUrl))
                ) && 
                (
                    this.CoverFile == input.CoverFile ||
                    (this.CoverFile != null &&
                    this.CoverFile.Equals(input.CoverFile))
                ) && 
                (
                    this.CustomType == input.CustomType ||
                    (this.CustomType != null &&
                    this.CustomType.Equals(input.CustomType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.IsDistinct == input.IsDistinct ||
                    (this.IsDistinct != null &&
                    this.IsDistinct.Equals(input.IsDistinct))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.IsSuper == input.IsSuper ||
                    (this.IsSuper != null &&
                    this.IsSuper.Equals(input.IsSuper))
                ) && 
                (
                    this.IsEphemeral == input.IsEphemeral ||
                    (this.IsEphemeral != null &&
                    this.IsEphemeral.Equals(input.IsEphemeral))
                ) && 
                (
                    this.AccessCode == input.AccessCode ||
                    (this.AccessCode != null &&
                    this.AccessCode.Equals(input.AccessCode))
                ) && 
                (
                    this.InviterId == input.InviterId ||
                    (this.InviterId != null &&
                    this.InviterId.Equals(input.InviterId))
                ) && 
                (
                    this.Strict == input.Strict ||
                    (this.Strict != null &&
                    this.Strict.Equals(input.Strict))
                ) && 
                (
                    this.InvitationStatus == input.InvitationStatus ||
                    (this.InvitationStatus != null &&
                    this.InvitationStatus.Equals(input.InvitationStatus))
                ) && 
                (
                    this.HiddenStatus == input.HiddenStatus ||
                    (this.HiddenStatus != null &&
                    this.HiddenStatus.Equals(input.HiddenStatus))
                ) && 
                (
                    this.OperatorIds == input.OperatorIds ||
                    this.OperatorIds != null &&
                    input.OperatorIds != null &&
                    this.OperatorIds.SequenceEqual(input.OperatorIds)
                ) && 
                (
                    this.BlockSdkUserChannelJoin == input.BlockSdkUserChannelJoin ||
                    (this.BlockSdkUserChannelJoin != null &&
                    this.BlockSdkUserChannelJoin.Equals(input.BlockSdkUserChannelJoin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserIds != null)
                    hashCode = hashCode * 59 + this.UserIds.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ChannelUrl != null)
                    hashCode = hashCode * 59 + this.ChannelUrl.GetHashCode();
                if (this.CoverUrl != null)
                    hashCode = hashCode * 59 + this.CoverUrl.GetHashCode();
                if (this.CoverFile != null)
                    hashCode = hashCode * 59 + this.CoverFile.GetHashCode();
                if (this.CustomType != null)
                    hashCode = hashCode * 59 + this.CustomType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.IsDistinct != null)
                    hashCode = hashCode * 59 + this.IsDistinct.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.IsSuper != null)
                    hashCode = hashCode * 59 + this.IsSuper.GetHashCode();
                if (this.IsEphemeral != null)
                    hashCode = hashCode * 59 + this.IsEphemeral.GetHashCode();
                if (this.AccessCode != null)
                    hashCode = hashCode * 59 + this.AccessCode.GetHashCode();
                if (this.InviterId != null)
                    hashCode = hashCode * 59 + this.InviterId.GetHashCode();
                if (this.Strict != null)
                    hashCode = hashCode * 59 + this.Strict.GetHashCode();
                if (this.InvitationStatus != null)
                    hashCode = hashCode * 59 + this.InvitationStatus.GetHashCode();
                if (this.HiddenStatus != null)
                    hashCode = hashCode * 59 + this.HiddenStatus.GetHashCode();
                if (this.OperatorIds != null)
                    hashCode = hashCode * 59 + this.OperatorIds.GetHashCode();
                if (this.BlockSdkUserChannelJoin != null)
                    hashCode = hashCode * 59 + this.BlockSdkUserChannelJoin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
