/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// ListMessagesResponseMessagesInnerOgTag
    /// </summary>
    [DataContract]
    public partial class ListMessagesResponseMessagesInnerOgTag :  IEquatable<ListMessagesResponseMessagesInnerOgTag>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListMessagesResponseMessagesInnerOgTag" /> class.
        /// </summary>
        /// <param name="ogurl">ogurl.</param>
        /// <param name="ogtitle">ogtitle.</param>
        /// <param name="ogdescription">ogdescription.</param>
        /// <param name="ogimage">ogimage.</param>
        public ListMessagesResponseMessagesInnerOgTag(string ogurl = default, string ogtitle = default, string ogdescription = default, ListMessagesResponseMessagesInnerOgTagOgImage ogimage = default(ListMessagesResponseMessagesInnerOgTagOgImage))
        {
            this.Ogurl = ogurl;
            this.Ogtitle = ogtitle;
            this.Ogdescription = ogdescription;
            this.Ogimage = ogimage;
        }

        /// <summary>
        /// Gets or Sets Ogurl
        /// </summary>
        [DataMember(Name="og:url", EmitDefaultValue=false)]
        public string Ogurl { get; set; }

        /// <summary>
        /// Gets or Sets Ogtitle
        /// </summary>
        [DataMember(Name="og:title", EmitDefaultValue=false)]
        public string Ogtitle { get; set; }

        /// <summary>
        /// Gets or Sets Ogdescription
        /// </summary>
        [DataMember(Name="og:description", EmitDefaultValue=false)]
        public string Ogdescription { get; set; }

        /// <summary>
        /// Gets or Sets Ogimage
        /// </summary>
        [DataMember(Name="og:image", EmitDefaultValue=false)]
        public ListMessagesResponseMessagesInnerOgTagOgImage Ogimage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListMessagesResponseMessagesInnerOgTag {\n");
            sb.Append("  Ogurl: ").Append(Ogurl).Append("\n");
            sb.Append("  Ogtitle: ").Append(Ogtitle).Append("\n");
            sb.Append("  Ogdescription: ").Append(Ogdescription).Append("\n");
            sb.Append("  Ogimage: ").Append(Ogimage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListMessagesResponseMessagesInnerOgTag);
        }

        /// <summary>
        /// Returns true if ListMessagesResponseMessagesInnerOgTag instances are equal
        /// </summary>
        /// <param name="input">Instance of ListMessagesResponseMessagesInnerOgTag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListMessagesResponseMessagesInnerOgTag input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ogurl == input.Ogurl ||
                    (this.Ogurl != null &&
                    this.Ogurl.Equals(input.Ogurl))
                ) && 
                (
                    this.Ogtitle == input.Ogtitle ||
                    (this.Ogtitle != null &&
                    this.Ogtitle.Equals(input.Ogtitle))
                ) && 
                (
                    this.Ogdescription == input.Ogdescription ||
                    (this.Ogdescription != null &&
                    this.Ogdescription.Equals(input.Ogdescription))
                ) && 
                (
                    this.Ogimage == input.Ogimage ||
                    (this.Ogimage != null &&
                    this.Ogimage.Equals(input.Ogimage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ogurl != null)
                    hashCode = hashCode * 59 + this.Ogurl.GetHashCode();
                if (this.Ogtitle != null)
                    hashCode = hashCode * 59 + this.Ogtitle.GetHashCode();
                if (this.Ogdescription != null)
                    hashCode = hashCode * 59 + this.Ogdescription.GetHashCode();
                if (this.Ogimage != null)
                    hashCode = hashCode * 59 + this.Ogimage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
