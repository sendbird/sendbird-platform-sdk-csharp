/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// UpdatePushPreferencesData
    /// </summary>
    [DataContract]
    public partial class UpdatePushPreferencesData :  IEquatable<UpdatePushPreferencesData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePushPreferencesData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdatePushPreferencesData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePushPreferencesData" /> class.
        /// </summary>
        /// <param name="pushTriggerOption">Determines the type of push notification trigger to apply to the user&#39;s joined group channels. Valid values are the following:&lt;br /&gt;- all (default): when disconnected from Sendbird server, the user receives notifications for all new messages including mentioned messages the user has been mentioned in.&lt;br /&gt;- mention_only: when disconnected from Sendbird server, the user only receives notifications for messages the user has been mentioned in.&lt;br /&gt;- off: the user doesn&#39;t receive any notifications. (required).</param>
        /// <param name="doNotDisturb">Determines whether to pause notification messages for the user during a specific time of day. (Default: false) (required).</param>
        /// <param name="startHour">Specifies the hour to start pausing the notifications for Do Not Disturb of the user. (required).</param>
        /// <param name="startMin">Specifies the minute of the hour to start pausing the notifications for Do Not Disturb of the user. (required).</param>
        /// <param name="endHour">Specifies the hour to stop pausing the notifications for Do Not Disturb of the user. (required).</param>
        /// <param name="endMin">Specifies the minute of the hour to stop pausing the notifications for Do Not Disturb of the user. (required).</param>
        /// <param name="snoozeEnabled">Determines whether to snooze notification messages for the user during a specific period of time. (Default: false) (required).</param>
        /// <param name="snoozeStartTs">Specifies the timestamp of when to start snoozing the notifications, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps). (required).</param>
        /// <param name="snoozeEndTs">Specifies the timestamp of when to end snoozing the notifications, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps). (required).</param>
        /// <param name="blockPushFromBots">Determines whether to block push notifications from [all bots](/docs/chat/v3/platform-api/guides/bot-interface#2-list-bots) within the application. If the push_blocked_bot_ids is specified, notifications only from the bots in the property are blocked. (Default: false) (required).</param>
        /// <param name="pushBlockedBotIds">Specifies an array of one or more IDs of bots whose push notifications are blocked. This property is effective only when the block_push_from_bots is set to true. (required).</param>
        /// <param name="timezone">Specifies the timezone to be applied to push preferences with a value such as UTC, Asia/Seoul, Europe/London, etc. (required).</param>
        /// <param name="pushSound">Specifies the name of a sound file to be played when a push notification is delivered to your client app. (required).</param>
        public UpdatePushPreferencesData(string pushTriggerOption = default, bool doNotDisturb = default(bool), int startHour = default(int), int startMin = default(int), int endHour = default(int), int endMin = default(int), bool snoozeEnabled = default(bool), int snoozeStartTs = default(int), int snoozeEndTs = default(int), bool blockPushFromBots = default(bool), List<int> pushBlockedBotIds = default(List<int>), string timezone = default, string pushSound = default)
        {
            // to ensure "pushTriggerOption" is required (not null)
            if (pushTriggerOption == null)
            {
                throw new InvalidDataException("pushTriggerOption is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.PushTriggerOption = pushTriggerOption;
            }

            // to ensure "doNotDisturb" is required (not null)
            if (doNotDisturb == null)
            {
                throw new InvalidDataException("doNotDisturb is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.DoNotDisturb = doNotDisturb;
            }

            // to ensure "startHour" is required (not null)
            if (startHour == null)
            {
                throw new InvalidDataException("startHour is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.StartHour = startHour;
            }

            // to ensure "startMin" is required (not null)
            if (startMin == null)
            {
                throw new InvalidDataException("startMin is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.StartMin = startMin;
            }

            // to ensure "endHour" is required (not null)
            if (endHour == null)
            {
                throw new InvalidDataException("endHour is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.EndHour = endHour;
            }

            // to ensure "endMin" is required (not null)
            if (endMin == null)
            {
                throw new InvalidDataException("endMin is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.EndMin = endMin;
            }

            // to ensure "snoozeEnabled" is required (not null)
            if (snoozeEnabled == null)
            {
                throw new InvalidDataException("snoozeEnabled is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.SnoozeEnabled = snoozeEnabled;
            }

            // to ensure "snoozeStartTs" is required (not null)
            if (snoozeStartTs == null)
            {
                throw new InvalidDataException("snoozeStartTs is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.SnoozeStartTs = snoozeStartTs;
            }

            // to ensure "snoozeEndTs" is required (not null)
            if (snoozeEndTs == null)
            {
                throw new InvalidDataException("snoozeEndTs is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.SnoozeEndTs = snoozeEndTs;
            }

            // to ensure "blockPushFromBots" is required (not null)
            if (blockPushFromBots == null)
            {
                throw new InvalidDataException("blockPushFromBots is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.BlockPushFromBots = blockPushFromBots;
            }

            // to ensure "pushBlockedBotIds" is required (not null)
            if (pushBlockedBotIds == null)
            {
                throw new InvalidDataException("pushBlockedBotIds is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.PushBlockedBotIds = pushBlockedBotIds;
            }

            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new InvalidDataException("timezone is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.Timezone = timezone;
            }

            // to ensure "pushSound" is required (not null)
            if (pushSound == null)
            {
                throw new InvalidDataException("pushSound is a required property for UpdatePushPreferencesData and cannot be null");
            }
            else
            {
                this.PushSound = pushSound;
            }

        }

        /// <summary>
        /// Determines the type of push notification trigger to apply to the user&#39;s joined group channels. Valid values are the following:&lt;br /&gt;- all (default): when disconnected from Sendbird server, the user receives notifications for all new messages including mentioned messages the user has been mentioned in.&lt;br /&gt;- mention_only: when disconnected from Sendbird server, the user only receives notifications for messages the user has been mentioned in.&lt;br /&gt;- off: the user doesn&#39;t receive any notifications.
        /// </summary>
        /// <value>Determines the type of push notification trigger to apply to the user&#39;s joined group channels. Valid values are the following:&lt;br /&gt;- all (default): when disconnected from Sendbird server, the user receives notifications for all new messages including mentioned messages the user has been mentioned in.&lt;br /&gt;- mention_only: when disconnected from Sendbird server, the user only receives notifications for messages the user has been mentioned in.&lt;br /&gt;- off: the user doesn&#39;t receive any notifications.</value>
        [DataMember(Name="push_trigger_option", EmitDefaultValue=true)]
        public string PushTriggerOption { get; set; }

        /// <summary>
        /// Determines whether to pause notification messages for the user during a specific time of day. (Default: false)
        /// </summary>
        /// <value>Determines whether to pause notification messages for the user during a specific time of day. (Default: false)</value>
        [DataMember(Name="do_not_disturb", EmitDefaultValue=true)]
        public bool DoNotDisturb { get; set; }

        /// <summary>
        /// Specifies the hour to start pausing the notifications for Do Not Disturb of the user.
        /// </summary>
        /// <value>Specifies the hour to start pausing the notifications for Do Not Disturb of the user.</value>
        [DataMember(Name="start_hour", EmitDefaultValue=true)]
        public int StartHour { get; set; }

        /// <summary>
        /// Specifies the minute of the hour to start pausing the notifications for Do Not Disturb of the user.
        /// </summary>
        /// <value>Specifies the minute of the hour to start pausing the notifications for Do Not Disturb of the user.</value>
        [DataMember(Name="start_min", EmitDefaultValue=true)]
        public int StartMin { get; set; }

        /// <summary>
        /// Specifies the hour to stop pausing the notifications for Do Not Disturb of the user.
        /// </summary>
        /// <value>Specifies the hour to stop pausing the notifications for Do Not Disturb of the user.</value>
        [DataMember(Name="end_hour", EmitDefaultValue=true)]
        public int EndHour { get; set; }

        /// <summary>
        /// Specifies the minute of the hour to stop pausing the notifications for Do Not Disturb of the user.
        /// </summary>
        /// <value>Specifies the minute of the hour to stop pausing the notifications for Do Not Disturb of the user.</value>
        [DataMember(Name="end_min", EmitDefaultValue=true)]
        public int EndMin { get; set; }

        /// <summary>
        /// Determines whether to snooze notification messages for the user during a specific period of time. (Default: false)
        /// </summary>
        /// <value>Determines whether to snooze notification messages for the user during a specific period of time. (Default: false)</value>
        [DataMember(Name="snooze_enabled", EmitDefaultValue=true)]
        public bool SnoozeEnabled { get; set; }

        /// <summary>
        /// Specifies the timestamp of when to start snoozing the notifications, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps).
        /// </summary>
        /// <value>Specifies the timestamp of when to start snoozing the notifications, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps).</value>
        [DataMember(Name="snooze_start_ts", EmitDefaultValue=true)]
        public int SnoozeStartTs { get; set; }

        /// <summary>
        /// Specifies the timestamp of when to end snoozing the notifications, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps).
        /// </summary>
        /// <value>Specifies the timestamp of when to end snoozing the notifications, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps).</value>
        [DataMember(Name="snooze_end_ts", EmitDefaultValue=true)]
        public int SnoozeEndTs { get; set; }

        /// <summary>
        /// Determines whether to block push notifications from [all bots](/docs/chat/v3/platform-api/guides/bot-interface#2-list-bots) within the application. If the push_blocked_bot_ids is specified, notifications only from the bots in the property are blocked. (Default: false)
        /// </summary>
        /// <value>Determines whether to block push notifications from [all bots](/docs/chat/v3/platform-api/guides/bot-interface#2-list-bots) within the application. If the push_blocked_bot_ids is specified, notifications only from the bots in the property are blocked. (Default: false)</value>
        [DataMember(Name="block_push_from_bots", EmitDefaultValue=true)]
        public bool BlockPushFromBots { get; set; }

        /// <summary>
        /// Specifies an array of one or more IDs of bots whose push notifications are blocked. This property is effective only when the block_push_from_bots is set to true.
        /// </summary>
        /// <value>Specifies an array of one or more IDs of bots whose push notifications are blocked. This property is effective only when the block_push_from_bots is set to true.</value>
        [DataMember(Name="push_blocked_bot_ids", EmitDefaultValue=true)]
        public List<int> PushBlockedBotIds { get; set; }

        /// <summary>
        /// Specifies the timezone to be applied to push preferences with a value such as UTC, Asia/Seoul, Europe/London, etc.
        /// </summary>
        /// <value>Specifies the timezone to be applied to push preferences with a value such as UTC, Asia/Seoul, Europe/London, etc.</value>
        [DataMember(Name="timezone", EmitDefaultValue=true)]
        public string Timezone { get; set; }

        /// <summary>
        /// Specifies the name of a sound file to be played when a push notification is delivered to your client app.
        /// </summary>
        /// <value>Specifies the name of a sound file to be played when a push notification is delivered to your client app.</value>
        [DataMember(Name="push_sound", EmitDefaultValue=true)]
        public string PushSound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdatePushPreferencesData {\n");
            sb.Append("  PushTriggerOption: ").Append(PushTriggerOption).Append("\n");
            sb.Append("  DoNotDisturb: ").Append(DoNotDisturb).Append("\n");
            sb.Append("  StartHour: ").Append(StartHour).Append("\n");
            sb.Append("  StartMin: ").Append(StartMin).Append("\n");
            sb.Append("  EndHour: ").Append(EndHour).Append("\n");
            sb.Append("  EndMin: ").Append(EndMin).Append("\n");
            sb.Append("  SnoozeEnabled: ").Append(SnoozeEnabled).Append("\n");
            sb.Append("  SnoozeStartTs: ").Append(SnoozeStartTs).Append("\n");
            sb.Append("  SnoozeEndTs: ").Append(SnoozeEndTs).Append("\n");
            sb.Append("  BlockPushFromBots: ").Append(BlockPushFromBots).Append("\n");
            sb.Append("  PushBlockedBotIds: ").Append(PushBlockedBotIds).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  PushSound: ").Append(PushSound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdatePushPreferencesData);
        }

        /// <summary>
        /// Returns true if UpdatePushPreferencesData instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdatePushPreferencesData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePushPreferencesData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PushTriggerOption == input.PushTriggerOption ||
                    (this.PushTriggerOption != null &&
                    this.PushTriggerOption.Equals(input.PushTriggerOption))
                ) && 
                (
                    this.DoNotDisturb == input.DoNotDisturb ||
                    (this.DoNotDisturb != null &&
                    this.DoNotDisturb.Equals(input.DoNotDisturb))
                ) && 
                (
                    this.StartHour == input.StartHour ||
                    (this.StartHour != null &&
                    this.StartHour.Equals(input.StartHour))
                ) && 
                (
                    this.StartMin == input.StartMin ||
                    (this.StartMin != null &&
                    this.StartMin.Equals(input.StartMin))
                ) && 
                (
                    this.EndHour == input.EndHour ||
                    (this.EndHour != null &&
                    this.EndHour.Equals(input.EndHour))
                ) && 
                (
                    this.EndMin == input.EndMin ||
                    (this.EndMin != null &&
                    this.EndMin.Equals(input.EndMin))
                ) && 
                (
                    this.SnoozeEnabled == input.SnoozeEnabled ||
                    (this.SnoozeEnabled != null &&
                    this.SnoozeEnabled.Equals(input.SnoozeEnabled))
                ) && 
                (
                    this.SnoozeStartTs == input.SnoozeStartTs ||
                    (this.SnoozeStartTs != null &&
                    this.SnoozeStartTs.Equals(input.SnoozeStartTs))
                ) && 
                (
                    this.SnoozeEndTs == input.SnoozeEndTs ||
                    (this.SnoozeEndTs != null &&
                    this.SnoozeEndTs.Equals(input.SnoozeEndTs))
                ) && 
                (
                    this.BlockPushFromBots == input.BlockPushFromBots ||
                    (this.BlockPushFromBots != null &&
                    this.BlockPushFromBots.Equals(input.BlockPushFromBots))
                ) && 
                (
                    this.PushBlockedBotIds == input.PushBlockedBotIds ||
                    this.PushBlockedBotIds != null &&
                    input.PushBlockedBotIds != null &&
                    this.PushBlockedBotIds.SequenceEqual(input.PushBlockedBotIds)
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.PushSound == input.PushSound ||
                    (this.PushSound != null &&
                    this.PushSound.Equals(input.PushSound))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PushTriggerOption != null)
                    hashCode = hashCode * 59 + this.PushTriggerOption.GetHashCode();
                if (this.DoNotDisturb != null)
                    hashCode = hashCode * 59 + this.DoNotDisturb.GetHashCode();
                if (this.StartHour != null)
                    hashCode = hashCode * 59 + this.StartHour.GetHashCode();
                if (this.StartMin != null)
                    hashCode = hashCode * 59 + this.StartMin.GetHashCode();
                if (this.EndHour != null)
                    hashCode = hashCode * 59 + this.EndHour.GetHashCode();
                if (this.EndMin != null)
                    hashCode = hashCode * 59 + this.EndMin.GetHashCode();
                if (this.SnoozeEnabled != null)
                    hashCode = hashCode * 59 + this.SnoozeEnabled.GetHashCode();
                if (this.SnoozeStartTs != null)
                    hashCode = hashCode * 59 + this.SnoozeStartTs.GetHashCode();
                if (this.SnoozeEndTs != null)
                    hashCode = hashCode * 59 + this.SnoozeEndTs.GetHashCode();
                if (this.BlockPushFromBots != null)
                    hashCode = hashCode * 59 + this.BlockPushFromBots.GetHashCode();
                if (this.PushBlockedBotIds != null)
                    hashCode = hashCode * 59 + this.PushBlockedBotIds.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.PushSound != null)
                    hashCode = hashCode * 59 + this.PushSound.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
