/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// CreateAUserRequest
    /// </summary>
    [DataContract]
    public partial class CreateAUserRequest :  IEquatable<CreateAUserRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAUserRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAUserRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAUserRequest" /> class.
        /// </summary>
        /// <param name="discoveryKeys">discoveryKeys.</param>
        /// <param name="issueAccessToken">issueAccessToken.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="nickname">nickname (required).</param>
        /// <param name="profileFile">Specifies the file of the user&#39;s profile image. An acceptable image is limited to a JPG, JPEG, or PNG file of up to 5 MB. When passing a file, you should send a multipart request. If the profile_file property is specified, the profile_url property is not required..</param>
        /// <param name="profileUrl">profileUrl (required).</param>
        /// <param name="userId">userId (required).</param>
        public CreateAUserRequest(List<string> discoveryKeys = default(List<string>), bool issueAccessToken = default(bool), Object metadata = default(Object), string nickname = default(string), System.IO.Stream profileFile = default(System.IO.Stream), string profileUrl = default(string), string userId = default(string))
        {
            // to ensure "nickname" is required (not null)
            if (nickname == null)
            {
                throw new InvalidDataException("nickname is a required property for CreateAUserRequest and cannot be null");
            }
            else
            {
                this.Nickname = nickname;
            }

            // to ensure "profileUrl" is required (not null)
            if (profileUrl == null)
            {
                throw new InvalidDataException("profileUrl is a required property for CreateAUserRequest and cannot be null");
            }
            else
            {
                this.ProfileUrl = profileUrl;
            }

            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for CreateAUserRequest and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }

            this.DiscoveryKeys = discoveryKeys;
            this.IssueAccessToken = issueAccessToken;
            this.Metadata = metadata;
            this.ProfileFile = profileFile;
        }

        /// <summary>
        /// Gets or Sets DiscoveryKeys
        /// </summary>
        [DataMember(Name="discovery_keys", EmitDefaultValue=false)]
        public List<string> DiscoveryKeys { get; set; }

        /// <summary>
        /// Gets or Sets IssueAccessToken
        /// </summary>
        [DataMember(Name="issue_access_token", EmitDefaultValue=false)]
        public bool IssueAccessToken { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=true)]
        public string Nickname { get; set; }

        /// <summary>
        /// Specifies the file of the user&#39;s profile image. An acceptable image is limited to a JPG, JPEG, or PNG file of up to 5 MB. When passing a file, you should send a multipart request. If the profile_file property is specified, the profile_url property is not required.
        /// </summary>
        /// <value>Specifies the file of the user&#39;s profile image. An acceptable image is limited to a JPG, JPEG, or PNG file of up to 5 MB. When passing a file, you should send a multipart request. If the profile_file property is specified, the profile_url property is not required.</value>
        [DataMember(Name="profile_file", EmitDefaultValue=false)]
        public System.IO.Stream ProfileFile { get; set; }

        /// <summary>
        /// Gets or Sets ProfileUrl
        /// </summary>
        [DataMember(Name="profile_url", EmitDefaultValue=true)]
        public string ProfileUrl { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAUserRequest {\n");
            sb.Append("  DiscoveryKeys: ").Append(DiscoveryKeys).Append("\n");
            sb.Append("  IssueAccessToken: ").Append(IssueAccessToken).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  ProfileFile: ").Append(ProfileFile).Append("\n");
            sb.Append("  ProfileUrl: ").Append(ProfileUrl).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAUserRequest);
        }

        /// <summary>
        /// Returns true if CreateAUserRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAUserRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAUserRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiscoveryKeys == input.DiscoveryKeys ||
                    this.DiscoveryKeys != null &&
                    input.DiscoveryKeys != null &&
                    this.DiscoveryKeys.SequenceEqual(input.DiscoveryKeys)
                ) && 
                (
                    this.IssueAccessToken == input.IssueAccessToken ||
                    (this.IssueAccessToken != null &&
                    this.IssueAccessToken.Equals(input.IssueAccessToken))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.ProfileFile == input.ProfileFile ||
                    (this.ProfileFile != null &&
                    this.ProfileFile.Equals(input.ProfileFile))
                ) && 
                (
                    this.ProfileUrl == input.ProfileUrl ||
                    (this.ProfileUrl != null &&
                    this.ProfileUrl.Equals(input.ProfileUrl))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiscoveryKeys != null)
                    hashCode = hashCode * 59 + this.DiscoveryKeys.GetHashCode();
                if (this.IssueAccessToken != null)
                    hashCode = hashCode * 59 + this.IssueAccessToken.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.ProfileFile != null)
                    hashCode = hashCode * 59 + this.ProfileFile.GetHashCode();
                if (this.ProfileUrl != null)
                    hashCode = hashCode * 59 + this.ProfileUrl.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
