/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// GcUpdateChannelByUrlData
    /// </summary>
    [DataContract]
    public partial class GcUpdateChannelByUrlData :  IEquatable<GcUpdateChannelByUrlData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GcUpdateChannelByUrlData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GcUpdateChannelByUrlData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GcUpdateChannelByUrlData" /> class.
        /// </summary>
        /// <param name="channelUrl">Specifies the URL of the channel to update. (required).</param>
        /// <param name="name">Specifies the name of the channel, or the channel topic. The length is limited to 191 characters. (required).</param>
        /// <param name="coverUrl">Specifies the unique URL of the cover image. The length is limited to 2,048 characters. (required).</param>
        /// <param name="coverFile">Uploads the cover image file for the channel. (required).</param>
        /// <param name="customType">Specifies the custom channel type which is used for channel grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views. (required).</param>
        /// <param name="data">Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string. (required).</param>
        /// <param name="isDistinct">Determines whether to reuse an existing channel or create a new channel. If set to true, returns a channel with the current channel members users or creates a new channel if no match is found. Sendbird server can also use the custom channel type in the custom_type property if specified along with the users to return the corresponding channel. If set to false, Sendbird server always creates a new channel with a combination of the users as well as the channel custom type if specified. (Default: false)&lt;br /&gt;&lt;br /&gt; Under this property, Sendbird server does not distinguish channels based on other properties such as channel URL or channel name. (required).</param>
        /// <param name="isPublic">Determines whether to allow a user to join the channel without an invitation. (Default: false) (required).</param>
        /// <param name="accessCode">This property can be used only when the channel operator wants to set an access code for a public group channel. If specified, the is_access_code_required property of the channel resource is then set to true, and the channel begins to require the specified access code to a user who attempts to join. (required).</param>
        /// <param name="operatorIds">Specifies an array of one or more IDs of users to register as operators of the channel. If the operators are not members of the channel yet, they need an [invitation](#2-invite-as-members) to [join](#2-join-a-channel) a privte group channel while they don&#39;t need any to join a [public](#-3-private-vs-public) group channel. The maximum allowed number of operators per channel is 100. (required).</param>
        public GcUpdateChannelByUrlData(string channelUrl = default, string name = default, string coverUrl = default, System.IO.Stream coverFile = default(System.IO.Stream), string customType = default, string data = default, bool isDistinct = default(bool), bool isPublic = default(bool), string accessCode = default, List<string> operatorIds = default)
        {
            // to ensure "channelUrl" is required (not null)
            if (channelUrl == null)
            {
                throw new InvalidDataException("channelUrl is a required property for GcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.ChannelUrl = channelUrl;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for GcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "coverUrl" is required (not null)
            if (coverUrl == null)
            {
                throw new InvalidDataException("coverUrl is a required property for GcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.CoverUrl = coverUrl;
            }

            // to ensure "coverFile" is required (not null)
            if (coverFile == null)
            {
                throw new InvalidDataException("coverFile is a required property for GcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.CoverFile = coverFile;
            }

            // to ensure "customType" is required (not null)
            if (customType == null)
            {
                throw new InvalidDataException("customType is a required property for GcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.CustomType = customType;
            }

            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for GcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.Data = data;
            }

            // to ensure "isDistinct" is required (not null)
            if (isDistinct == null)
            {
                throw new InvalidDataException("isDistinct is a required property for GcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.IsDistinct = isDistinct;
            }

            // to ensure "isPublic" is required (not null)
            if (isPublic == null)
            {
                throw new InvalidDataException("isPublic is a required property for GcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.IsPublic = isPublic;
            }

            // to ensure "accessCode" is required (not null)
            if (accessCode == null)
            {
                throw new InvalidDataException("accessCode is a required property for GcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.AccessCode = accessCode;
            }

            // to ensure "operatorIds" is required (not null)
            if (operatorIds == null)
            {
                throw new InvalidDataException("operatorIds is a required property for GcUpdateChannelByUrlData and cannot be null");
            }
            else
            {
                this.OperatorIds = operatorIds;
            }

        }

        /// <summary>
        /// Specifies the URL of the channel to update.
        /// </summary>
        /// <value>Specifies the URL of the channel to update.</value>
        [DataMember(Name="channel_url", EmitDefaultValue=true)]
        public string ChannelUrl { get; set; }

        /// <summary>
        /// Specifies the name of the channel, or the channel topic. The length is limited to 191 characters.
        /// </summary>
        /// <value>Specifies the name of the channel, or the channel topic. The length is limited to 191 characters.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Specifies the unique URL of the cover image. The length is limited to 2,048 characters.
        /// </summary>
        /// <value>Specifies the unique URL of the cover image. The length is limited to 2,048 characters.</value>
        [DataMember(Name="cover_url", EmitDefaultValue=true)]
        public string CoverUrl { get; set; }

        /// <summary>
        /// Uploads the cover image file for the channel.
        /// </summary>
        /// <value>Uploads the cover image file for the channel.</value>
        [DataMember(Name="cover_file", EmitDefaultValue=true)]
        public System.IO.Stream CoverFile { get; set; }

        /// <summary>
        /// Specifies the custom channel type which is used for channel grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views.
        /// </summary>
        /// <value>Specifies the custom channel type which is used for channel grouping. The length is limited to 128 characters.&lt;br /&gt;&lt;br /&gt; Custom types are also used within Sendbird&#39;s [Advanced analytics](/docs/chat/v3/platform-api/guides/advanced-analytics) to segment metrics, which enables the sub-classification of data views.</value>
        [DataMember(Name="custom_type", EmitDefaultValue=true)]
        public string CustomType { get; set; }

        /// <summary>
        /// Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string.
        /// </summary>
        /// <value>Specifies additional channel information such as a long description of the channel or &#x60;JSON&#x60; formatted string.</value>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public string Data { get; set; }

        /// <summary>
        /// Determines whether to reuse an existing channel or create a new channel. If set to true, returns a channel with the current channel members users or creates a new channel if no match is found. Sendbird server can also use the custom channel type in the custom_type property if specified along with the users to return the corresponding channel. If set to false, Sendbird server always creates a new channel with a combination of the users as well as the channel custom type if specified. (Default: false)&lt;br /&gt;&lt;br /&gt; Under this property, Sendbird server does not distinguish channels based on other properties such as channel URL or channel name.
        /// </summary>
        /// <value>Determines whether to reuse an existing channel or create a new channel. If set to true, returns a channel with the current channel members users or creates a new channel if no match is found. Sendbird server can also use the custom channel type in the custom_type property if specified along with the users to return the corresponding channel. If set to false, Sendbird server always creates a new channel with a combination of the users as well as the channel custom type if specified. (Default: false)&lt;br /&gt;&lt;br /&gt; Under this property, Sendbird server does not distinguish channels based on other properties such as channel URL or channel name.</value>
        [DataMember(Name="is_distinct", EmitDefaultValue=true)]
        public bool IsDistinct { get; set; }

        /// <summary>
        /// Determines whether to allow a user to join the channel without an invitation. (Default: false)
        /// </summary>
        /// <value>Determines whether to allow a user to join the channel without an invitation. (Default: false)</value>
        [DataMember(Name="is_public", EmitDefaultValue=true)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// This property can be used only when the channel operator wants to set an access code for a public group channel. If specified, the is_access_code_required property of the channel resource is then set to true, and the channel begins to require the specified access code to a user who attempts to join.
        /// </summary>
        /// <value>This property can be used only when the channel operator wants to set an access code for a public group channel. If specified, the is_access_code_required property of the channel resource is then set to true, and the channel begins to require the specified access code to a user who attempts to join.</value>
        [DataMember(Name="access_code", EmitDefaultValue=true)]
        public string AccessCode { get; set; }

        /// <summary>
        /// Specifies an array of one or more IDs of users to register as operators of the channel. If the operators are not members of the channel yet, they need an [invitation](#2-invite-as-members) to [join](#2-join-a-channel) a privte group channel while they don&#39;t need any to join a [public](#-3-private-vs-public) group channel. The maximum allowed number of operators per channel is 100.
        /// </summary>
        /// <value>Specifies an array of one or more IDs of users to register as operators of the channel. If the operators are not members of the channel yet, they need an [invitation](#2-invite-as-members) to [join](#2-join-a-channel) a privte group channel while they don&#39;t need any to join a [public](#-3-private-vs-public) group channel. The maximum allowed number of operators per channel is 100.</value>
        [DataMember(Name="operator_ids", EmitDefaultValue=true)]
        public List<string> OperatorIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GcUpdateChannelByUrlData {\n");
            sb.Append("  ChannelUrl: ").Append(ChannelUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CoverUrl: ").Append(CoverUrl).Append("\n");
            sb.Append("  CoverFile: ").Append(CoverFile).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  IsDistinct: ").Append(IsDistinct).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  AccessCode: ").Append(AccessCode).Append("\n");
            sb.Append("  OperatorIds: ").Append(OperatorIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GcUpdateChannelByUrlData);
        }

        /// <summary>
        /// Returns true if GcUpdateChannelByUrlData instances are equal
        /// </summary>
        /// <param name="input">Instance of GcUpdateChannelByUrlData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GcUpdateChannelByUrlData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelUrl == input.ChannelUrl ||
                    (this.ChannelUrl != null &&
                    this.ChannelUrl.Equals(input.ChannelUrl))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CoverUrl == input.CoverUrl ||
                    (this.CoverUrl != null &&
                    this.CoverUrl.Equals(input.CoverUrl))
                ) && 
                (
                    this.CoverFile == input.CoverFile ||
                    (this.CoverFile != null &&
                    this.CoverFile.Equals(input.CoverFile))
                ) && 
                (
                    this.CustomType == input.CustomType ||
                    (this.CustomType != null &&
                    this.CustomType.Equals(input.CustomType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.IsDistinct == input.IsDistinct ||
                    (this.IsDistinct != null &&
                    this.IsDistinct.Equals(input.IsDistinct))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.AccessCode == input.AccessCode ||
                    (this.AccessCode != null &&
                    this.AccessCode.Equals(input.AccessCode))
                ) && 
                (
                    this.OperatorIds == input.OperatorIds ||
                    this.OperatorIds != null &&
                    input.OperatorIds != null &&
                    this.OperatorIds.SequenceEqual(input.OperatorIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelUrl != null)
                    hashCode = hashCode * 59 + this.ChannelUrl.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CoverUrl != null)
                    hashCode = hashCode * 59 + this.CoverUrl.GetHashCode();
                if (this.CoverFile != null)
                    hashCode = hashCode * 59 + this.CoverFile.GetHashCode();
                if (this.CustomType != null)
                    hashCode = hashCode * 59 + this.CustomType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.IsDistinct != null)
                    hashCode = hashCode * 59 + this.IsDistinct.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.AccessCode != null)
                    hashCode = hashCode * 59 + this.AccessCode.GetHashCode();
                if (this.OperatorIds != null)
                    hashCode = hashCode * 59 + this.OperatorIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
