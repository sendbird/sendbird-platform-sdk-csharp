/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// LeaveAChannelRequest
    /// </summary>
    [DataContract]
    public partial class LeaveAChannelRequest :  IEquatable<LeaveAChannelRequest>, IValidatableObject
    {
        /// <summary>
        /// Specifies the reason for leaving a channel. Acceptable values are admin_removed, admin_deleted, admin_deactivated, left_by_own_choice, and channel_operator_removed.
        /// </summary>
        /// <value>Specifies the reason for leaving a channel. Acceptable values are admin_removed, admin_deleted, admin_deactivated, left_by_own_choice, and channel_operator_removed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum LEFTBYOWNCHOICE for value: LEFT_BY_OWN_CHOICE
            /// </summary>
            [EnumMember(Value = "LEFT_BY_OWN_CHOICE")]
            LEFTBYOWNCHOICE = 1,

            /// <summary>
            /// Enum CHANNELOPERATORREMOVED for value: CHANNEL_OPERATOR_REMOVED
            /// </summary>
            [EnumMember(Value = "CHANNEL_OPERATOR_REMOVED")]
            CHANNELOPERATORREMOVED = 2,

            /// <summary>
            /// Enum ADMINREMOVED for value: ADMIN_REMOVED
            /// </summary>
            [EnumMember(Value = "ADMIN_REMOVED")]
            ADMINREMOVED = 3,

            /// <summary>
            /// Enum ADMINDELETED for value: ADMIN_DELETED
            /// </summary>
            [EnumMember(Value = "ADMIN_DELETED")]
            ADMINDELETED = 4,

            /// <summary>
            /// Enum ADMINDEACTIVATED for value: ADMIN_DEACTIVATED
            /// </summary>
            [EnumMember(Value = "ADMIN_DEACTIVATED")]
            ADMINDEACTIVATED = 5

        }

        /// <summary>
        /// Specifies the reason for leaving a channel. Acceptable values are admin_removed, admin_deleted, admin_deactivated, left_by_own_choice, and channel_operator_removed.
        /// </summary>
        /// <value>Specifies the reason for leaving a channel. Acceptable values are admin_removed, admin_deleted, admin_deactivated, left_by_own_choice, and channel_operator_removed.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaveAChannelRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeaveAChannelRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaveAChannelRequest" /> class.
        /// </summary>
        /// <param name="userIds">Specifies an array of one or more IDs of the users to leave the channel. (required).</param>
        /// <param name="shouldLeaveAll">Determines whether to make all members leave the channel. (Default: false).</param>
        /// <param name="shouldRemoveOperatorStatus">Determines whether to remove a user from the channel&#39;s operator list if the user who is leaving the channel is an operator. (Default: false).</param>
        /// <param name="reason">Specifies the reason for leaving a channel. Acceptable values are admin_removed, admin_deleted, admin_deactivated, left_by_own_choice, and channel_operator_removed..</param>
        public LeaveAChannelRequest(List<string> userIds = default(List<string>), bool shouldLeaveAll = default(bool), bool shouldRemoveOperatorStatus = default(bool), ReasonEnum? reason = default(ReasonEnum?))
        {
            // to ensure "userIds" is required (not null)
            if (userIds == null)
            {
                throw new InvalidDataException("userIds is a required property for LeaveAChannelRequest and cannot be null");
            }
            else
            {
                this.UserIds = userIds;
            }

            this.ShouldLeaveAll = shouldLeaveAll;
            this.ShouldRemoveOperatorStatus = shouldRemoveOperatorStatus;
            this.Reason = reason;
        }

        /// <summary>
        /// Specifies an array of one or more IDs of the users to leave the channel.
        /// </summary>
        /// <value>Specifies an array of one or more IDs of the users to leave the channel.</value>
        [DataMember(Name="user_ids", EmitDefaultValue=true)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// Determines whether to make all members leave the channel. (Default: false)
        /// </summary>
        /// <value>Determines whether to make all members leave the channel. (Default: false)</value>
        [DataMember(Name="should_leave_all", EmitDefaultValue=false)]
        public bool ShouldLeaveAll { get; set; }

        /// <summary>
        /// Determines whether to remove a user from the channel&#39;s operator list if the user who is leaving the channel is an operator. (Default: false)
        /// </summary>
        /// <value>Determines whether to remove a user from the channel&#39;s operator list if the user who is leaving the channel is an operator. (Default: false)</value>
        [DataMember(Name="should_remove_operator_status", EmitDefaultValue=false)]
        public bool ShouldRemoveOperatorStatus { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeaveAChannelRequest {\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("  ShouldLeaveAll: ").Append(ShouldLeaveAll).Append("\n");
            sb.Append("  ShouldRemoveOperatorStatus: ").Append(ShouldRemoveOperatorStatus).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeaveAChannelRequest);
        }

        /// <summary>
        /// Returns true if LeaveAChannelRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LeaveAChannelRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaveAChannelRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    input.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                ) && 
                (
                    this.ShouldLeaveAll == input.ShouldLeaveAll ||
                    (this.ShouldLeaveAll != null &&
                    this.ShouldLeaveAll.Equals(input.ShouldLeaveAll))
                ) && 
                (
                    this.ShouldRemoveOperatorStatus == input.ShouldRemoveOperatorStatus ||
                    (this.ShouldRemoveOperatorStatus != null &&
                    this.ShouldRemoveOperatorStatus.Equals(input.ShouldRemoveOperatorStatus))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserIds != null)
                    hashCode = hashCode * 59 + this.UserIds.GetHashCode();
                if (this.ShouldLeaveAll != null)
                    hashCode = hashCode * 59 + this.ShouldLeaveAll.GetHashCode();
                if (this.ShouldRemoveOperatorStatus != null)
                    hashCode = hashCode * 59 + this.ShouldRemoveOperatorStatus.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
