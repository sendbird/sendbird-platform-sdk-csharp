/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// CreateABotResponseBotStyle
    /// </summary>
    [DataContract]
    public partial class CreateABotResponseBotStyle :  IEquatable<CreateABotResponseBotStyle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateABotResponseBotStyle" /> class.
        /// </summary>
        /// <param name="autoOpen">autoOpen.</param>
        /// <param name="color">color.</param>
        /// <param name="toggleButtonType">toggleButtonType.</param>
        /// <param name="toggleButtonUrl">toggleButtonUrl.</param>
        public CreateABotResponseBotStyle(bool autoOpen = default(bool), ListBotsResponseBotsInnerBotStyleColor color = default(ListBotsResponseBotsInnerBotStyleColor), string toggleButtonType = default(string), string toggleButtonUrl = default(string))
        {
            this.ToggleButtonType = toggleButtonType;
            this.AutoOpen = autoOpen;
            this.Color = color;
            this.ToggleButtonType = toggleButtonType;
            this.ToggleButtonUrl = toggleButtonUrl;
        }

        /// <summary>
        /// Gets or Sets AutoOpen
        /// </summary>
        [DataMember(Name="auto_open", EmitDefaultValue=false)]
        public bool AutoOpen { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public ListBotsResponseBotsInnerBotStyleColor Color { get; set; }

        /// <summary>
        /// Gets or Sets ToggleButtonType
        /// </summary>
        [DataMember(Name="toggle_button_type", EmitDefaultValue=true)]
        public string ToggleButtonType { get; set; }

        /// <summary>
        /// Gets or Sets ToggleButtonUrl
        /// </summary>
        [DataMember(Name="toggle_button_url", EmitDefaultValue=false)]
        public string ToggleButtonUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateABotResponseBotStyle {\n");
            sb.Append("  AutoOpen: ").Append(AutoOpen).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  ToggleButtonType: ").Append(ToggleButtonType).Append("\n");
            sb.Append("  ToggleButtonUrl: ").Append(ToggleButtonUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateABotResponseBotStyle);
        }

        /// <summary>
        /// Returns true if CreateABotResponseBotStyle instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateABotResponseBotStyle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateABotResponseBotStyle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AutoOpen == input.AutoOpen ||
                    (this.AutoOpen != null &&
                    this.AutoOpen.Equals(input.AutoOpen))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.ToggleButtonType == input.ToggleButtonType ||
                    (this.ToggleButtonType != null &&
                    this.ToggleButtonType.Equals(input.ToggleButtonType))
                ) && 
                (
                    this.ToggleButtonUrl == input.ToggleButtonUrl ||
                    (this.ToggleButtonUrl != null &&
                    this.ToggleButtonUrl.Equals(input.ToggleButtonUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutoOpen != null)
                    hashCode = hashCode * 59 + this.AutoOpen.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.ToggleButtonType != null)
                    hashCode = hashCode * 59 + this.ToggleButtonType.GetHashCode();
                if (this.ToggleButtonUrl != null)
                    hashCode = hashCode * 59 + this.ToggleButtonUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
