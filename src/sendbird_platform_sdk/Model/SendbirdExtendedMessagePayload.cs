/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// Specifies the extended message payload which is used to send a message with a custom message type.
    /// </summary>
    [DataContract]
    public partial class SendbirdExtendedMessagePayload :  IEquatable<SendbirdExtendedMessagePayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendbirdExtendedMessagePayload" /> class.
        /// </summary>
        /// <param name="customView">JSON format you want to embed in message, eq : {\&quot;title\&quot;: \&quot;title\&quot;, \&quot;image\&quot;: \&quot;https://link.to/image.jpg\&quot;}.</param>
        /// <param name="suggestedReplies">Specifies an array of suggested replies to be sent with the message..</param>
        public SendbirdExtendedMessagePayload(Object customView = default(Object), List<string> suggestedReplies = default(List<string>))
        {
            this.CustomView = customView;
            this.SuggestedReplies = suggestedReplies;
        }

        /// <summary>
        /// JSON format you want to embed in message, eq : {\&quot;title\&quot;: \&quot;title\&quot;, \&quot;image\&quot;: \&quot;https://link.to/image.jpg\&quot;}
        /// </summary>
        /// <value>JSON format you want to embed in message, eq : {\&quot;title\&quot;: \&quot;title\&quot;, \&quot;image\&quot;: \&quot;https://link.to/image.jpg\&quot;}</value>
        [DataMember(Name="custom_view", EmitDefaultValue=false)]
        public Object CustomView { get; set; }

        /// <summary>
        /// Specifies an array of suggested replies to be sent with the message.
        /// </summary>
        /// <value>Specifies an array of suggested replies to be sent with the message.</value>
        [DataMember(Name="suggested_replies", EmitDefaultValue=false)]
        public List<string> SuggestedReplies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendbirdExtendedMessagePayload {\n");
            sb.Append("  CustomView: ").Append(CustomView).Append("\n");
            sb.Append("  SuggestedReplies: ").Append(SuggestedReplies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendbirdExtendedMessagePayload);
        }

        /// <summary>
        /// Returns true if SendbirdExtendedMessagePayload instances are equal
        /// </summary>
        /// <param name="input">Instance of SendbirdExtendedMessagePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendbirdExtendedMessagePayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomView == input.CustomView ||
                    (this.CustomView != null &&
                    this.CustomView.Equals(input.CustomView))
                ) && 
                (
                    this.SuggestedReplies == input.SuggestedReplies ||
                    this.SuggestedReplies != null &&
                    input.SuggestedReplies != null &&
                    this.SuggestedReplies.SequenceEqual(input.SuggestedReplies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomView != null)
                    hashCode = hashCode * 59 + this.CustomView.GetHashCode();
                if (this.SuggestedReplies != null)
                    hashCode = hashCode * 59 + this.SuggestedReplies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
