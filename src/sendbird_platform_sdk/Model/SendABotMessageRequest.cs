/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SendABotMessageRequest
    /// </summary>
    [DataContract]
    public partial class SendABotMessageRequest :  IEquatable<SendABotMessageRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendABotMessageRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendABotMessageRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendABotMessageRequest" /> class.
        /// </summary>
        /// <param name="channelUrl">channelUrl (required).</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="customType">customType.</param>
        /// <param name="data">data.</param>
        /// <param name="dedupId">dedupId.</param>
        /// <param name="extendedMessagePayload">extendedMessagePayload.</param>
        /// <param name="markAsRead">markAsRead.</param>
        /// <param name="mentioned">mentioned.</param>
        /// <param name="message">message (required).</param>
        /// <param name="sendPush">sendPush.</param>
        public SendABotMessageRequest(string channelUrl = default(string), long createdAt = default(long), string customType = default(string), string data = default(string), string dedupId = default(string), SendbirdExtendedMessagePayload extendedMessagePayload = default(SendbirdExtendedMessagePayload), bool markAsRead = default(bool), List<string> mentioned = default(List<string>), string message = default(string), bool sendPush = default(bool))
        {
            // to ensure "channelUrl" is required (not null)
            if (channelUrl == null)
            {
                throw new InvalidDataException("channelUrl is a required property for SendABotMessageRequest and cannot be null");
            }
            else
            {
                this.ChannelUrl = channelUrl;
            }

            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for SendABotMessageRequest and cannot be null");
            }
            else
            {
                this.Message = message;
            }

            this.CreatedAt = createdAt;
            this.CustomType = customType;
            this.Data = data;
            this.DedupId = dedupId;
            this.ExtendedMessagePayload = extendedMessagePayload;
            this.MarkAsRead = markAsRead;
            this.Mentioned = mentioned;
            this.SendPush = sendPush;
        }

        /// <summary>
        /// Gets or Sets ChannelUrl
        /// </summary>
        [DataMember(Name="channel_url", EmitDefaultValue=true)]
        public string ChannelUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CustomType
        /// </summary>
        [DataMember(Name="custom_type", EmitDefaultValue=false)]
        public string CustomType { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets DedupId
        /// </summary>
        [DataMember(Name="dedup_id", EmitDefaultValue=false)]
        public string DedupId { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedMessagePayload
        /// </summary>
        [DataMember(Name="extended_message_payload", EmitDefaultValue=false)]
        public SendbirdExtendedMessagePayload ExtendedMessagePayload { get; set; }

        /// <summary>
        /// Gets or Sets MarkAsRead
        /// </summary>
        [DataMember(Name="mark_as_read", EmitDefaultValue=false)]
        public bool MarkAsRead { get; set; }

        /// <summary>
        /// Gets or Sets Mentioned
        /// </summary>
        [DataMember(Name="mentioned", EmitDefaultValue=false)]
        public List<string> Mentioned { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets SendPush
        /// </summary>
        [DataMember(Name="send_push", EmitDefaultValue=false)]
        public bool SendPush { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendABotMessageRequest {\n");
            sb.Append("  ChannelUrl: ").Append(ChannelUrl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CustomType: ").Append(CustomType).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DedupId: ").Append(DedupId).Append("\n");
            sb.Append("  ExtendedMessagePayload: ").Append(ExtendedMessagePayload).Append("\n");
            sb.Append("  MarkAsRead: ").Append(MarkAsRead).Append("\n");
            sb.Append("  Mentioned: ").Append(Mentioned).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  SendPush: ").Append(SendPush).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendABotMessageRequest);
        }

        /// <summary>
        /// Returns true if SendABotMessageRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SendABotMessageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendABotMessageRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelUrl == input.ChannelUrl ||
                    (this.ChannelUrl != null &&
                    this.ChannelUrl.Equals(input.ChannelUrl))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.CustomType == input.CustomType ||
                    (this.CustomType != null &&
                    this.CustomType.Equals(input.CustomType))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.DedupId == input.DedupId ||
                    (this.DedupId != null &&
                    this.DedupId.Equals(input.DedupId))
                ) && 
                (
                    this.ExtendedMessagePayload == input.ExtendedMessagePayload ||
                    (this.ExtendedMessagePayload != null &&
                    this.ExtendedMessagePayload.Equals(input.ExtendedMessagePayload))
                ) && 
                (
                    this.MarkAsRead == input.MarkAsRead ||
                    (this.MarkAsRead != null &&
                    this.MarkAsRead.Equals(input.MarkAsRead))
                ) && 
                (
                    this.Mentioned == input.Mentioned ||
                    this.Mentioned != null &&
                    input.Mentioned != null &&
                    this.Mentioned.SequenceEqual(input.Mentioned)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.SendPush == input.SendPush ||
                    (this.SendPush != null &&
                    this.SendPush.Equals(input.SendPush))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelUrl != null)
                    hashCode = hashCode * 59 + this.ChannelUrl.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.CustomType != null)
                    hashCode = hashCode * 59 + this.CustomType.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.DedupId != null)
                    hashCode = hashCode * 59 + this.DedupId.GetHashCode();
                if (this.ExtendedMessagePayload != null)
                    hashCode = hashCode * 59 + this.ExtendedMessagePayload.GetHashCode();
                if (this.MarkAsRead != null)
                    hashCode = hashCode * 59 + this.MarkAsRead.GetHashCode();
                if (this.Mentioned != null)
                    hashCode = hashCode * 59 + this.Mentioned.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.SendPush != null)
                    hashCode = hashCode * 59 + this.SendPush.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
