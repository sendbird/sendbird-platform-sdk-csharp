/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// BlockAUserRequest
    /// </summary>
    [DataContract]
    public partial class BlockAUserRequest :  IEquatable<BlockAUserRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockAUserRequest" /> class.
        /// </summary>
        /// <param name="targetId">targetId.</param>
        /// <param name="userIds">Specifies an array of IDs of all the users to block. This property can be used interchangeably with the users[] property when blocking multiple users at once..</param>
        public BlockAUserRequest(string targetId = default(string), List<string> userIds = default(List<string>))
        {
            this.TargetId = targetId;
            this.UserIds = userIds;
        }

        /// <summary>
        /// Gets or Sets TargetId
        /// </summary>
        [DataMember(Name="target_id", EmitDefaultValue=false)]
        public string TargetId { get; set; }

        /// <summary>
        /// Specifies an array of IDs of all the users to block. This property can be used interchangeably with the users[] property when blocking multiple users at once.
        /// </summary>
        /// <value>Specifies an array of IDs of all the users to block. This property can be used interchangeably with the users[] property when blocking multiple users at once.</value>
        [DataMember(Name="user_ids", EmitDefaultValue=false)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlockAUserRequest {\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockAUserRequest);
        }

        /// <summary>
        /// Returns true if BlockAUserRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockAUserRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockAUserRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    input.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetId != null)
                    hashCode = hashCode * 59 + this.TargetId.GetHashCode();
                if (this.UserIds != null)
                    hashCode = hashCode * 59 + this.UserIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
