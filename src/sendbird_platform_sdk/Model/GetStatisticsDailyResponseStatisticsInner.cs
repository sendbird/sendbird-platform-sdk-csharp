/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// GetStatisticsDailyResponseStatisticsInner
    /// </summary>
    [DataContract]
    public partial class GetStatisticsDailyResponseStatisticsInner :  IEquatable<GetStatisticsDailyResponseStatisticsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetStatisticsDailyResponseStatisticsInner" /> class.
        /// </summary>
        /// <param name="dateRange">dateRange.</param>
        /// <param name="canceledAnnouncementCount">canceledAnnouncementCount.</param>
        /// <param name="stoppedAnnouncementCount">stoppedAnnouncementCount.</param>
        /// <param name="completedAnnouncementCount">completedAnnouncementCount.</param>
        /// <param name="totalAnnouncementCount">totalAnnouncementCount.</param>
        /// <param name="targetChannelCount">targetChannelCount.</param>
        /// <param name="targetUserCount">targetUserCount.</param>
        /// <param name="sentChannelCount">sentChannelCount.</param>
        /// <param name="sentUserCount">sentUserCount.</param>
        /// <param name="openRate">openRate.</param>
        /// <param name="openCount">openCount.</param>
        public GetStatisticsDailyResponseStatisticsInner(string dateRange = default, decimal canceledAnnouncementCount = default(decimal), decimal stoppedAnnouncementCount = default(decimal), decimal completedAnnouncementCount = default(decimal), decimal totalAnnouncementCount = default(decimal), decimal targetChannelCount = default(decimal), decimal targetUserCount = default(decimal), decimal sentChannelCount = default(decimal), decimal sentUserCount = default(decimal), decimal openRate = default(decimal), decimal openCount = default(decimal))
        {
            this.DateRange = dateRange;
            this.CanceledAnnouncementCount = canceledAnnouncementCount;
            this.StoppedAnnouncementCount = stoppedAnnouncementCount;
            this.CompletedAnnouncementCount = completedAnnouncementCount;
            this.TotalAnnouncementCount = totalAnnouncementCount;
            this.TargetChannelCount = targetChannelCount;
            this.TargetUserCount = targetUserCount;
            this.SentChannelCount = sentChannelCount;
            this.SentUserCount = sentUserCount;
            this.OpenRate = openRate;
            this.OpenCount = openCount;
        }

        /// <summary>
        /// Gets or Sets DateRange
        /// </summary>
        [DataMember(Name="date_range", EmitDefaultValue=false)]
        public string DateRange { get; set; }

        /// <summary>
        /// Gets or Sets CanceledAnnouncementCount
        /// </summary>
        [DataMember(Name="canceled_announcement_count", EmitDefaultValue=false)]
        public decimal CanceledAnnouncementCount { get; set; }

        /// <summary>
        /// Gets or Sets StoppedAnnouncementCount
        /// </summary>
        [DataMember(Name="stopped_announcement_count", EmitDefaultValue=false)]
        public decimal StoppedAnnouncementCount { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAnnouncementCount
        /// </summary>
        [DataMember(Name="completed_announcement_count", EmitDefaultValue=false)]
        public decimal CompletedAnnouncementCount { get; set; }

        /// <summary>
        /// Gets or Sets TotalAnnouncementCount
        /// </summary>
        [DataMember(Name="total_announcement_count", EmitDefaultValue=false)]
        public decimal TotalAnnouncementCount { get; set; }

        /// <summary>
        /// Gets or Sets TargetChannelCount
        /// </summary>
        [DataMember(Name="target_channel_count", EmitDefaultValue=false)]
        public decimal TargetChannelCount { get; set; }

        /// <summary>
        /// Gets or Sets TargetUserCount
        /// </summary>
        [DataMember(Name="target_user_count", EmitDefaultValue=false)]
        public decimal TargetUserCount { get; set; }

        /// <summary>
        /// Gets or Sets SentChannelCount
        /// </summary>
        [DataMember(Name="sent_channel_count", EmitDefaultValue=false)]
        public decimal SentChannelCount { get; set; }

        /// <summary>
        /// Gets or Sets SentUserCount
        /// </summary>
        [DataMember(Name="sent_user_count", EmitDefaultValue=false)]
        public decimal SentUserCount { get; set; }

        /// <summary>
        /// Gets or Sets OpenRate
        /// </summary>
        [DataMember(Name="open_rate", EmitDefaultValue=false)]
        public decimal OpenRate { get; set; }

        /// <summary>
        /// Gets or Sets OpenCount
        /// </summary>
        [DataMember(Name="open_count", EmitDefaultValue=false)]
        public decimal OpenCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetStatisticsDailyResponseStatisticsInner {\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("  CanceledAnnouncementCount: ").Append(CanceledAnnouncementCount).Append("\n");
            sb.Append("  StoppedAnnouncementCount: ").Append(StoppedAnnouncementCount).Append("\n");
            sb.Append("  CompletedAnnouncementCount: ").Append(CompletedAnnouncementCount).Append("\n");
            sb.Append("  TotalAnnouncementCount: ").Append(TotalAnnouncementCount).Append("\n");
            sb.Append("  TargetChannelCount: ").Append(TargetChannelCount).Append("\n");
            sb.Append("  TargetUserCount: ").Append(TargetUserCount).Append("\n");
            sb.Append("  SentChannelCount: ").Append(SentChannelCount).Append("\n");
            sb.Append("  SentUserCount: ").Append(SentUserCount).Append("\n");
            sb.Append("  OpenRate: ").Append(OpenRate).Append("\n");
            sb.Append("  OpenCount: ").Append(OpenCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetStatisticsDailyResponseStatisticsInner);
        }

        /// <summary>
        /// Returns true if GetStatisticsDailyResponseStatisticsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GetStatisticsDailyResponseStatisticsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetStatisticsDailyResponseStatisticsInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateRange == input.DateRange ||
                    (this.DateRange != null &&
                    this.DateRange.Equals(input.DateRange))
                ) && 
                (
                    this.CanceledAnnouncementCount == input.CanceledAnnouncementCount ||
                    (this.CanceledAnnouncementCount != null &&
                    this.CanceledAnnouncementCount.Equals(input.CanceledAnnouncementCount))
                ) && 
                (
                    this.StoppedAnnouncementCount == input.StoppedAnnouncementCount ||
                    (this.StoppedAnnouncementCount != null &&
                    this.StoppedAnnouncementCount.Equals(input.StoppedAnnouncementCount))
                ) && 
                (
                    this.CompletedAnnouncementCount == input.CompletedAnnouncementCount ||
                    (this.CompletedAnnouncementCount != null &&
                    this.CompletedAnnouncementCount.Equals(input.CompletedAnnouncementCount))
                ) && 
                (
                    this.TotalAnnouncementCount == input.TotalAnnouncementCount ||
                    (this.TotalAnnouncementCount != null &&
                    this.TotalAnnouncementCount.Equals(input.TotalAnnouncementCount))
                ) && 
                (
                    this.TargetChannelCount == input.TargetChannelCount ||
                    (this.TargetChannelCount != null &&
                    this.TargetChannelCount.Equals(input.TargetChannelCount))
                ) && 
                (
                    this.TargetUserCount == input.TargetUserCount ||
                    (this.TargetUserCount != null &&
                    this.TargetUserCount.Equals(input.TargetUserCount))
                ) && 
                (
                    this.SentChannelCount == input.SentChannelCount ||
                    (this.SentChannelCount != null &&
                    this.SentChannelCount.Equals(input.SentChannelCount))
                ) && 
                (
                    this.SentUserCount == input.SentUserCount ||
                    (this.SentUserCount != null &&
                    this.SentUserCount.Equals(input.SentUserCount))
                ) && 
                (
                    this.OpenRate == input.OpenRate ||
                    (this.OpenRate != null &&
                    this.OpenRate.Equals(input.OpenRate))
                ) && 
                (
                    this.OpenCount == input.OpenCount ||
                    (this.OpenCount != null &&
                    this.OpenCount.Equals(input.OpenCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateRange != null)
                    hashCode = hashCode * 59 + this.DateRange.GetHashCode();
                if (this.CanceledAnnouncementCount != null)
                    hashCode = hashCode * 59 + this.CanceledAnnouncementCount.GetHashCode();
                if (this.StoppedAnnouncementCount != null)
                    hashCode = hashCode * 59 + this.StoppedAnnouncementCount.GetHashCode();
                if (this.CompletedAnnouncementCount != null)
                    hashCode = hashCode * 59 + this.CompletedAnnouncementCount.GetHashCode();
                if (this.TotalAnnouncementCount != null)
                    hashCode = hashCode * 59 + this.TotalAnnouncementCount.GetHashCode();
                if (this.TargetChannelCount != null)
                    hashCode = hashCode * 59 + this.TargetChannelCount.GetHashCode();
                if (this.TargetUserCount != null)
                    hashCode = hashCode * 59 + this.TargetUserCount.GetHashCode();
                if (this.SentChannelCount != null)
                    hashCode = hashCode * 59 + this.SentChannelCount.GetHashCode();
                if (this.SentUserCount != null)
                    hashCode = hashCode * 59 + this.SentUserCount.GetHashCode();
                if (this.OpenRate != null)
                    hashCode = hashCode * 59 + this.OpenRate.GetHashCode();
                if (this.OpenCount != null)
                    hashCode = hashCode * 59 + this.OpenCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
