/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// ReportMessageByIdData
    /// </summary>
    [DataContract]
    public partial class ReportMessageByIdData :  IEquatable<ReportMessageByIdData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportMessageByIdData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReportMessageByIdData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportMessageByIdData" /> class.
        /// </summary>
        /// <param name="channelType">Specifies the type of the channel. Either open_channels or group_channels..</param>
        /// <param name="channelUrl">Specifies the URL of the channel where the message to report is in..</param>
        /// <param name="messageId">Specifies the unique ID of the message to report..</param>
        /// <param name="reportCategory">Specifies the category which indicates the reason for reporting. Acceptable values are suspicious, harassing, inappropriate, and spam. (required).</param>
        /// <param name="offendingUserId">Specifies the unique ID of the user who has sent the message to report. (required).</param>
        /// <param name="reportingUserId">Specifies the unique ID of the user who reports the message..</param>
        /// <param name="reportDescription">Specifies additional information to be included in the report..</param>
        public ReportMessageByIdData(string channelType = default, string channelUrl = default, string messageId = default, string reportCategory = default, string offendingUserId = default, string reportingUserId = default, string reportDescription = default)
        {
            // to ensure "reportCategory" is required (not null)
            if (reportCategory == null)
            {
                throw new InvalidDataException("reportCategory is a required property for ReportMessageByIdData and cannot be null");
            }
            else
            {
                this.ReportCategory = reportCategory;
            }

            // to ensure "offendingUserId" is required (not null)
            if (offendingUserId == null)
            {
                throw new InvalidDataException("offendingUserId is a required property for ReportMessageByIdData and cannot be null");
            }
            else
            {
                this.OffendingUserId = offendingUserId;
            }

            this.ChannelType = channelType;
            this.ChannelUrl = channelUrl;
            this.MessageId = messageId;
            this.ReportingUserId = reportingUserId;
            this.ReportDescription = reportDescription;
        }

        /// <summary>
        /// Specifies the type of the channel. Either open_channels or group_channels.
        /// </summary>
        /// <value>Specifies the type of the channel. Either open_channels or group_channels.</value>
        [DataMember(Name="channel_type", EmitDefaultValue=false)]
        public string ChannelType { get; set; }

        /// <summary>
        /// Specifies the URL of the channel where the message to report is in.
        /// </summary>
        /// <value>Specifies the URL of the channel where the message to report is in.</value>
        [DataMember(Name="channel_url", EmitDefaultValue=false)]
        public string ChannelUrl { get; set; }

        /// <summary>
        /// Specifies the unique ID of the message to report.
        /// </summary>
        /// <value>Specifies the unique ID of the message to report.</value>
        [DataMember(Name="message_id", EmitDefaultValue=false)]
        public string MessageId { get; set; }

        /// <summary>
        /// Specifies the category which indicates the reason for reporting. Acceptable values are suspicious, harassing, inappropriate, and spam.
        /// </summary>
        /// <value>Specifies the category which indicates the reason for reporting. Acceptable values are suspicious, harassing, inappropriate, and spam.</value>
        [DataMember(Name="report_category", EmitDefaultValue=true)]
        public string ReportCategory { get; set; }

        /// <summary>
        /// Specifies the unique ID of the user who has sent the message to report.
        /// </summary>
        /// <value>Specifies the unique ID of the user who has sent the message to report.</value>
        [DataMember(Name="offending_user_id", EmitDefaultValue=true)]
        public string OffendingUserId { get; set; }

        /// <summary>
        /// Specifies the unique ID of the user who reports the message.
        /// </summary>
        /// <value>Specifies the unique ID of the user who reports the message.</value>
        [DataMember(Name="reporting_user_id", EmitDefaultValue=false)]
        public string ReportingUserId { get; set; }

        /// <summary>
        /// Specifies additional information to be included in the report.
        /// </summary>
        /// <value>Specifies additional information to be included in the report.</value>
        [DataMember(Name="report_description", EmitDefaultValue=false)]
        public string ReportDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportMessageByIdData {\n");
            sb.Append("  ChannelType: ").Append(ChannelType).Append("\n");
            sb.Append("  ChannelUrl: ").Append(ChannelUrl).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  ReportCategory: ").Append(ReportCategory).Append("\n");
            sb.Append("  OffendingUserId: ").Append(OffendingUserId).Append("\n");
            sb.Append("  ReportingUserId: ").Append(ReportingUserId).Append("\n");
            sb.Append("  ReportDescription: ").Append(ReportDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportMessageByIdData);
        }

        /// <summary>
        /// Returns true if ReportMessageByIdData instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportMessageByIdData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportMessageByIdData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelType == input.ChannelType ||
                    (this.ChannelType != null &&
                    this.ChannelType.Equals(input.ChannelType))
                ) && 
                (
                    this.ChannelUrl == input.ChannelUrl ||
                    (this.ChannelUrl != null &&
                    this.ChannelUrl.Equals(input.ChannelUrl))
                ) && 
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                ) && 
                (
                    this.ReportCategory == input.ReportCategory ||
                    (this.ReportCategory != null &&
                    this.ReportCategory.Equals(input.ReportCategory))
                ) && 
                (
                    this.OffendingUserId == input.OffendingUserId ||
                    (this.OffendingUserId != null &&
                    this.OffendingUserId.Equals(input.OffendingUserId))
                ) && 
                (
                    this.ReportingUserId == input.ReportingUserId ||
                    (this.ReportingUserId != null &&
                    this.ReportingUserId.Equals(input.ReportingUserId))
                ) && 
                (
                    this.ReportDescription == input.ReportDescription ||
                    (this.ReportDescription != null &&
                    this.ReportDescription.Equals(input.ReportDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelType != null)
                    hashCode = hashCode * 59 + this.ChannelType.GetHashCode();
                if (this.ChannelUrl != null)
                    hashCode = hashCode * 59 + this.ChannelUrl.GetHashCode();
                if (this.MessageId != null)
                    hashCode = hashCode * 59 + this.MessageId.GetHashCode();
                if (this.ReportCategory != null)
                    hashCode = hashCode * 59 + this.ReportCategory.GetHashCode();
                if (this.OffendingUserId != null)
                    hashCode = hashCode * 59 + this.OffendingUserId.GetHashCode();
                if (this.ReportingUserId != null)
                    hashCode = hashCode * 59 + this.ReportingUserId.GetHashCode();
                if (this.ReportDescription != null)
                    hashCode = hashCode * 59 + this.ReportDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
