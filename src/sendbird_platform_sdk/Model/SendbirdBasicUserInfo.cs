/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SendbirdBasicUserInfo
    /// </summary>
    [DataContract]
    public partial class SendbirdBasicUserInfo :  IEquatable<SendbirdBasicUserInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines Role
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 1,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 2,

            /// <summary>
            /// Enum Operator for value: operator
            /// </summary>
            [EnumMember(Value = "operator")]
            Operator = 3

        }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendbirdBasicUserInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendbirdBasicUserInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendbirdBasicUserInfo" /> class.
        /// </summary>
        /// <param name="requireAuthForProfileImage">requireAuthForProfileImage.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isBlockedByMe">isBlockedByMe.</param>
        /// <param name="role">role.</param>
        /// <param name="nickname">nickname.</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="profileUrl">profileUrl.</param>
        /// <param name="metadata">metadata.</param>
        public SendbirdBasicUserInfo(bool requireAuthForProfileImage = default(bool), bool isActive = default(bool), bool isBlockedByMe = default(bool), RoleEnum? role = default(RoleEnum?), string nickname = default(string), string userId = default(string), string profileUrl = default(string), Object metadata = default(Object))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for SendbirdBasicUserInfo and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }

            this.RequireAuthForProfileImage = requireAuthForProfileImage;
            this.IsActive = isActive;
            this.IsBlockedByMe = isBlockedByMe;
            this.Role = role;
            this.Nickname = nickname;
            this.ProfileUrl = profileUrl;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Gets or Sets RequireAuthForProfileImage
        /// </summary>
        [DataMember(Name="require_auth_for_profile_image", EmitDefaultValue=false)]
        public bool RequireAuthForProfileImage { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsBlockedByMe
        /// </summary>
        [DataMember(Name="is_blocked_by_me", EmitDefaultValue=false)]
        public bool IsBlockedByMe { get; set; }


        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets ProfileUrl
        /// </summary>
        [DataMember(Name="profile_url", EmitDefaultValue=false)]
        public string ProfileUrl { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendbirdBasicUserInfo {\n");
            sb.Append("  RequireAuthForProfileImage: ").Append(RequireAuthForProfileImage).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsBlockedByMe: ").Append(IsBlockedByMe).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ProfileUrl: ").Append(ProfileUrl).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendbirdBasicUserInfo);
        }

        /// <summary>
        /// Returns true if SendbirdBasicUserInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SendbirdBasicUserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendbirdBasicUserInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequireAuthForProfileImage == input.RequireAuthForProfileImage ||
                    (this.RequireAuthForProfileImage != null &&
                    this.RequireAuthForProfileImage.Equals(input.RequireAuthForProfileImage))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsBlockedByMe == input.IsBlockedByMe ||
                    (this.IsBlockedByMe != null &&
                    this.IsBlockedByMe.Equals(input.IsBlockedByMe))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ProfileUrl == input.ProfileUrl ||
                    (this.ProfileUrl != null &&
                    this.ProfileUrl.Equals(input.ProfileUrl))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequireAuthForProfileImage != null)
                    hashCode = hashCode * 59 + this.RequireAuthForProfileImage.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsBlockedByMe != null)
                    hashCode = hashCode * 59 + this.IsBlockedByMe.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.ProfileUrl != null)
                    hashCode = hashCode * 59 + this.ProfileUrl.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
