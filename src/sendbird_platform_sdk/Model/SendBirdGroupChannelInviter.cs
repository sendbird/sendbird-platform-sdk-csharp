/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// SendBirdGroupChannelInviter
    /// </summary>
    [DataContract]
    public partial class SendBirdGroupChannelInviter :  IEquatable<SendBirdGroupChannelInviter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendBirdGroupChannelInviter" /> class.
        /// </summary>
        /// <param name="requireAuthForProfileImage">requireAuthForProfileImage.</param>
        /// <param name="isOnline">isOnline.</param>
        /// <param name="userId">userId.</param>
        /// <param name="accessToken">accessToken.</param>
        /// <param name="hasEverLoggedIn">hasEverLoggedIn.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="lastSeenAt">lastSeenAt.</param>
        /// <param name="nickname">nickname.</param>
        /// <param name="discoveryKeys">discoveryKeys.</param>
        /// <param name="sessionTokens">sessionTokens.</param>
        /// <param name="preferredLanguages">preferredLanguages.</param>
        /// <param name="profileUrl">profileUrl.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="local">local.</param>
        /// <param name="locale">locale.</param>
        /// <param name="isHideMeFromFriends">isHideMeFromFriends.</param>
        /// <param name="isShadowBlocked">isShadowBlocked.</param>
        /// <param name="isCreated">isCreated.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="description">description.</param>
        /// <param name="endAt">endAt.</param>
        /// <param name="startAt">startAt.</param>
        public SendBirdGroupChannelInviter(bool requireAuthForProfileImage = default(bool), bool isOnline = default(bool), string userId = default, string accessToken = default, bool hasEverLoggedIn = default(bool), bool isActive = default(bool), int lastSeenAt = default(int), string nickname = default, List<string> discoveryKeys = default, List<Object> sessionTokens = default(List<Object>), List<string> preferredLanguages = default, string profileUrl = default, int createdAt = default(int), string phoneNumber = default, string local = default, string locale = default, bool isHideMeFromFriends = default(bool), bool isShadowBlocked = default(bool), bool isCreated = default(bool), Object metadata = default, string description = default, decimal endAt = default(decimal), decimal startAt = default(decimal))
        {
            this.RequireAuthForProfileImage = requireAuthForProfileImage;
            this.IsOnline = isOnline;
            this.UserId = userId;
            this.AccessToken = accessToken;
            this.HasEverLoggedIn = hasEverLoggedIn;
            this.IsActive = isActive;
            this.LastSeenAt = lastSeenAt;
            this.Nickname = nickname;
            this.DiscoveryKeys = discoveryKeys;
            this.SessionTokens = sessionTokens;
            this.PreferredLanguages = preferredLanguages;
            this.ProfileUrl = profileUrl;
            this.CreatedAt = createdAt;
            this.PhoneNumber = phoneNumber;
            this.Local = local;
            this.Locale = locale;
            this.IsHideMeFromFriends = isHideMeFromFriends;
            this.IsShadowBlocked = isShadowBlocked;
            this.IsCreated = isCreated;
            this.Metadata = metadata;
            this.Description = description;
            this.EndAt = endAt;
            this.StartAt = startAt;
        }

        /// <summary>
        /// Gets or Sets RequireAuthForProfileImage
        /// </summary>
        [DataMember(Name="require_auth_for_profile_image", EmitDefaultValue=false)]
        public bool RequireAuthForProfileImage { get; set; }

        /// <summary>
        /// Gets or Sets IsOnline
        /// </summary>
        [DataMember(Name="is_online", EmitDefaultValue=false)]
        public bool IsOnline { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [DataMember(Name="access_token", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or Sets HasEverLoggedIn
        /// </summary>
        [DataMember(Name="has_ever_logged_in", EmitDefaultValue=false)]
        public bool HasEverLoggedIn { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets LastSeenAt
        /// </summary>
        [DataMember(Name="last_seen_at", EmitDefaultValue=false)]
        public int LastSeenAt { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or Sets DiscoveryKeys
        /// </summary>
        [DataMember(Name="discovery_keys", EmitDefaultValue=false)]
        public List<string> DiscoveryKeys { get; set; }

        /// <summary>
        /// Gets or Sets SessionTokens
        /// </summary>
        [DataMember(Name="session_tokens", EmitDefaultValue=false)]
        public List<Object> SessionTokens { get; set; }

        /// <summary>
        /// Gets or Sets PreferredLanguages
        /// </summary>
        [DataMember(Name="preferred_languages", EmitDefaultValue=false)]
        public List<string> PreferredLanguages { get; set; }

        /// <summary>
        /// Gets or Sets ProfileUrl
        /// </summary>
        [DataMember(Name="profile_url", EmitDefaultValue=false)]
        public string ProfileUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Local
        /// </summary>
        [DataMember(Name="local", EmitDefaultValue=false)]
        public string Local { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets IsHideMeFromFriends
        /// </summary>
        [DataMember(Name="is_hide_me_from_friends", EmitDefaultValue=false)]
        public bool IsHideMeFromFriends { get; set; }

        /// <summary>
        /// Gets or Sets IsShadowBlocked
        /// </summary>
        [DataMember(Name="is_shadow_blocked", EmitDefaultValue=false)]
        public bool IsShadowBlocked { get; set; }

        /// <summary>
        /// Gets or Sets IsCreated
        /// </summary>
        [DataMember(Name="is_created", EmitDefaultValue=false)]
        public bool IsCreated { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EndAt
        /// </summary>
        [DataMember(Name="end_at", EmitDefaultValue=false)]
        public decimal EndAt { get; set; }

        /// <summary>
        /// Gets or Sets StartAt
        /// </summary>
        [DataMember(Name="start_at", EmitDefaultValue=false)]
        public decimal StartAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendBirdGroupChannelInviter {\n");
            sb.Append("  RequireAuthForProfileImage: ").Append(RequireAuthForProfileImage).Append("\n");
            sb.Append("  IsOnline: ").Append(IsOnline).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  HasEverLoggedIn: ").Append(HasEverLoggedIn).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  LastSeenAt: ").Append(LastSeenAt).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  DiscoveryKeys: ").Append(DiscoveryKeys).Append("\n");
            sb.Append("  SessionTokens: ").Append(SessionTokens).Append("\n");
            sb.Append("  PreferredLanguages: ").Append(PreferredLanguages).Append("\n");
            sb.Append("  ProfileUrl: ").Append(ProfileUrl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Local: ").Append(Local).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  IsHideMeFromFriends: ").Append(IsHideMeFromFriends).Append("\n");
            sb.Append("  IsShadowBlocked: ").Append(IsShadowBlocked).Append("\n");
            sb.Append("  IsCreated: ").Append(IsCreated).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndAt: ").Append(EndAt).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendBirdGroupChannelInviter);
        }

        /// <summary>
        /// Returns true if SendBirdGroupChannelInviter instances are equal
        /// </summary>
        /// <param name="input">Instance of SendBirdGroupChannelInviter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendBirdGroupChannelInviter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequireAuthForProfileImage == input.RequireAuthForProfileImage ||
                    (this.RequireAuthForProfileImage != null &&
                    this.RequireAuthForProfileImage.Equals(input.RequireAuthForProfileImage))
                ) && 
                (
                    this.IsOnline == input.IsOnline ||
                    (this.IsOnline != null &&
                    this.IsOnline.Equals(input.IsOnline))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.HasEverLoggedIn == input.HasEverLoggedIn ||
                    (this.HasEverLoggedIn != null &&
                    this.HasEverLoggedIn.Equals(input.HasEverLoggedIn))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.LastSeenAt == input.LastSeenAt ||
                    (this.LastSeenAt != null &&
                    this.LastSeenAt.Equals(input.LastSeenAt))
                ) && 
                (
                    this.Nickname == input.Nickname ||
                    (this.Nickname != null &&
                    this.Nickname.Equals(input.Nickname))
                ) && 
                (
                    this.DiscoveryKeys == input.DiscoveryKeys ||
                    this.DiscoveryKeys != null &&
                    input.DiscoveryKeys != null &&
                    this.DiscoveryKeys.SequenceEqual(input.DiscoveryKeys)
                ) && 
                (
                    this.SessionTokens == input.SessionTokens ||
                    this.SessionTokens != null &&
                    input.SessionTokens != null &&
                    this.SessionTokens.SequenceEqual(input.SessionTokens)
                ) && 
                (
                    this.PreferredLanguages == input.PreferredLanguages ||
                    this.PreferredLanguages != null &&
                    input.PreferredLanguages != null &&
                    this.PreferredLanguages.SequenceEqual(input.PreferredLanguages)
                ) && 
                (
                    this.ProfileUrl == input.ProfileUrl ||
                    (this.ProfileUrl != null &&
                    this.ProfileUrl.Equals(input.ProfileUrl))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Local == input.Local ||
                    (this.Local != null &&
                    this.Local.Equals(input.Local))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.IsHideMeFromFriends == input.IsHideMeFromFriends ||
                    (this.IsHideMeFromFriends != null &&
                    this.IsHideMeFromFriends.Equals(input.IsHideMeFromFriends))
                ) && 
                (
                    this.IsShadowBlocked == input.IsShadowBlocked ||
                    (this.IsShadowBlocked != null &&
                    this.IsShadowBlocked.Equals(input.IsShadowBlocked))
                ) && 
                (
                    this.IsCreated == input.IsCreated ||
                    (this.IsCreated != null &&
                    this.IsCreated.Equals(input.IsCreated))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EndAt == input.EndAt ||
                    (this.EndAt != null &&
                    this.EndAt.Equals(input.EndAt))
                ) && 
                (
                    this.StartAt == input.StartAt ||
                    (this.StartAt != null &&
                    this.StartAt.Equals(input.StartAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequireAuthForProfileImage != null)
                    hashCode = hashCode * 59 + this.RequireAuthForProfileImage.GetHashCode();
                if (this.IsOnline != null)
                    hashCode = hashCode * 59 + this.IsOnline.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.HasEverLoggedIn != null)
                    hashCode = hashCode * 59 + this.HasEverLoggedIn.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.LastSeenAt != null)
                    hashCode = hashCode * 59 + this.LastSeenAt.GetHashCode();
                if (this.Nickname != null)
                    hashCode = hashCode * 59 + this.Nickname.GetHashCode();
                if (this.DiscoveryKeys != null)
                    hashCode = hashCode * 59 + this.DiscoveryKeys.GetHashCode();
                if (this.SessionTokens != null)
                    hashCode = hashCode * 59 + this.SessionTokens.GetHashCode();
                if (this.PreferredLanguages != null)
                    hashCode = hashCode * 59 + this.PreferredLanguages.GetHashCode();
                if (this.ProfileUrl != null)
                    hashCode = hashCode * 59 + this.ProfileUrl.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Local != null)
                    hashCode = hashCode * 59 + this.Local.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.IsHideMeFromFriends != null)
                    hashCode = hashCode * 59 + this.IsHideMeFromFriends.GetHashCode();
                if (this.IsShadowBlocked != null)
                    hashCode = hashCode * 59 + this.IsShadowBlocked.GetHashCode();
                if (this.IsCreated != null)
                    hashCode = hashCode * 59 + this.IsCreated.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EndAt != null)
                    hashCode = hashCode * 59 + this.EndAt.GetHashCode();
                if (this.StartAt != null)
                    hashCode = hashCode * 59 + this.StartAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
