/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = sendbird_platform_sdk.Client.OpenAPIDateConverter;

namespace sendbird_platform_sdk.Model
{
    /// <summary>
    /// ChooseWhichEventsToSubscribeToResponseWebhook
    /// </summary>
    [DataContract]
    public partial class ChooseWhichEventsToSubscribeToResponseWebhook :  IEquatable<ChooseWhichEventsToSubscribeToResponseWebhook>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChooseWhichEventsToSubscribeToResponseWebhook" /> class.
        /// </summary>
        /// <param name="enabled">enabled.</param>
        /// <param name="url">url.</param>
        /// <param name="includeMembers">includeMembers.</param>
        /// <param name="enabledEvents">enabledEvents.</param>
        /// <param name="includeUnreadCount">includeUnreadCount.</param>
        public ChooseWhichEventsToSubscribeToResponseWebhook(bool enabled = default(bool), string url = default, bool includeMembers = default(bool), List<string> enabledEvents = default, bool includeUnreadCount = default(bool))
        {
            this.Enabled = enabled;
            this.Url = url;
            this.IncludeMembers = includeMembers;
            this.EnabledEvents = enabledEvents;
            this.IncludeUnreadCount = includeUnreadCount;
        }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets IncludeMembers
        /// </summary>
        [DataMember(Name="include_members", EmitDefaultValue=false)]
        public bool IncludeMembers { get; set; }

        /// <summary>
        /// Gets or Sets EnabledEvents
        /// </summary>
        [DataMember(Name="enabled_events", EmitDefaultValue=false)]
        public List<string> EnabledEvents { get; set; }

        /// <summary>
        /// Gets or Sets IncludeUnreadCount
        /// </summary>
        [DataMember(Name="include_unread_count", EmitDefaultValue=false)]
        public bool IncludeUnreadCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChooseWhichEventsToSubscribeToResponseWebhook {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  IncludeMembers: ").Append(IncludeMembers).Append("\n");
            sb.Append("  EnabledEvents: ").Append(EnabledEvents).Append("\n");
            sb.Append("  IncludeUnreadCount: ").Append(IncludeUnreadCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChooseWhichEventsToSubscribeToResponseWebhook);
        }

        /// <summary>
        /// Returns true if ChooseWhichEventsToSubscribeToResponseWebhook instances are equal
        /// </summary>
        /// <param name="input">Instance of ChooseWhichEventsToSubscribeToResponseWebhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChooseWhichEventsToSubscribeToResponseWebhook input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.IncludeMembers == input.IncludeMembers ||
                    (this.IncludeMembers != null &&
                    this.IncludeMembers.Equals(input.IncludeMembers))
                ) && 
                (
                    this.EnabledEvents == input.EnabledEvents ||
                    this.EnabledEvents != null &&
                    input.EnabledEvents != null &&
                    this.EnabledEvents.SequenceEqual(input.EnabledEvents)
                ) && 
                (
                    this.IncludeUnreadCount == input.IncludeUnreadCount ||
                    (this.IncludeUnreadCount != null &&
                    this.IncludeUnreadCount.Equals(input.IncludeUnreadCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.IncludeMembers != null)
                    hashCode = hashCode * 59 + this.IncludeMembers.GetHashCode();
                if (this.EnabledEvents != null)
                    hashCode = hashCode * 59 + this.EnabledEvents.GetHashCode();
                if (this.IncludeUnreadCount != null)
                    hashCode = hashCode * 59 + this.IncludeUnreadCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
