/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List reports
        /// </summary>
        /// <remarks>
        /// ## List reports  Retrieves a list of reports within an application regardless of object types.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startTs"> (optional)</param>
        /// <param name="endTs"> (optional)</param>
        /// <returns>ListReportsResponse</returns>
        ListReportsResponse ListReports (string apiToken, string token = default, int? limit = default, int? startTs = default, int? endTs = default);

        /// <summary>
        /// List reports
        /// </summary>
        /// <remarks>
        /// ## List reports  Retrieves a list of reports within an application regardless of object types.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startTs"> (optional)</param>
        /// <param name="endTs"> (optional)</param>
        /// <returns>ApiResponse of ListReportsResponse</returns>
        ApiResponse<ListReportsResponse> ListReportsWithHttpInfo (string apiToken, string token = default, int? limit = default, int? startTs = default, int? endTs = default);
        /// <summary>
        /// List reports on a channel
        /// </summary>
        /// <remarks>
        /// ## List reports on a channel  Retrieves a list of reports on a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel which is reported for offensive messages or inappropriate activities.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ListReportsOnChannelByUrlResponse</returns>
        ListReportsOnChannelByUrlResponse ListReportsOnChannelByUrl (string apiToken, string channelType, string channelUrl, string token = default, int? limit = default);

        /// <summary>
        /// List reports on a channel
        /// </summary>
        /// <remarks>
        /// ## List reports on a channel  Retrieves a list of reports on a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel which is reported for offensive messages or inappropriate activities.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of ListReportsOnChannelByUrlResponse</returns>
        ApiResponse<ListReportsOnChannelByUrlResponse> ListReportsOnChannelByUrlWithHttpInfo (string apiToken, string channelType, string channelUrl, string token = default, int? limit = default);
        /// <summary>
        /// List reports on a message
        /// </summary>
        /// <remarks>
        /// ## List reports on a message  Retrieves a list of reports on a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel where the reported message is in.  `message_id`      Type: string      Description: Specifies the unique ID of the reported message.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ListReportsOnMessageByIdResponse</returns>
        ListReportsOnMessageByIdResponse ListReportsOnMessageById (string apiToken, string channelType, string channelUrl, string messageId, string token = default, int? limit = default);

        /// <summary>
        /// List reports on a message
        /// </summary>
        /// <remarks>
        /// ## List reports on a message  Retrieves a list of reports on a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel where the reported message is in.  `message_id`      Type: string      Description: Specifies the unique ID of the reported message.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of ListReportsOnMessageByIdResponse</returns>
        ApiResponse<ListReportsOnMessageByIdResponse> ListReportsOnMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, string token = default, int? limit = default);
        /// <summary>
        /// List reports on a user
        /// </summary>
        /// <remarks>
        /// ## List reports on a user  Retrieves a list of reports on a user who sends an offensive message.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `offending_user_id`      Type: string      Description: Specifies the unique ID of the user who has sent the message to report.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ListReportsOnUserByIdResponse</returns>
        ListReportsOnUserByIdResponse ListReportsOnUserById (string apiToken, string offendingUserId, string token = default, int? limit = default);

        /// <summary>
        /// List reports on a user
        /// </summary>
        /// <remarks>
        /// ## List reports on a user  Retrieves a list of reports on a user who sends an offensive message.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `offending_user_id`      Type: string      Description: Specifies the unique ID of the user who has sent the message to report.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of ListReportsOnUserByIdResponse</returns>
        ApiResponse<ListReportsOnUserByIdResponse> ListReportsOnUserByIdWithHttpInfo (string apiToken, string offendingUserId, string token = default, int? limit = default);
        /// <summary>
        /// Report a channel
        /// </summary>
        /// <remarks>
        /// ## Report a channel  Reports a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="reportChannelByUrlData"> (optional)</param>
        /// <returns>ReportChannelByUrlResponse</returns>
        ReportChannelByUrlResponse ReportChannelByUrl (string apiToken, string channelType, string channelUrl, ReportChannelByUrlData reportChannelByUrlData = default(ReportChannelByUrlData));

        /// <summary>
        /// Report a channel
        /// </summary>
        /// <remarks>
        /// ## Report a channel  Reports a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="reportChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of ReportChannelByUrlResponse</returns>
        ApiResponse<ReportChannelByUrlResponse> ReportChannelByUrlWithHttpInfo (string apiToken, string channelType, string channelUrl, ReportChannelByUrlData reportChannelByUrlData = default(ReportChannelByUrlData));
        /// <summary>
        /// Report a message
        /// </summary>
        /// <remarks>
        /// ## Report a message  Reports a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="reportMessageByIdData"> (optional)</param>
        /// <returns>ReportMessageByIdResponse</returns>
        ReportMessageByIdResponse ReportMessageById (string apiToken, string channelType, string channelUrl, string messageId, ReportMessageByIdData reportMessageByIdData = default(ReportMessageByIdData));

        /// <summary>
        /// Report a message
        /// </summary>
        /// <remarks>
        /// ## Report a message  Reports a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="reportMessageByIdData"> (optional)</param>
        /// <returns>ApiResponse of ReportMessageByIdResponse</returns>
        ApiResponse<ReportMessageByIdResponse> ReportMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, ReportMessageByIdData reportMessageByIdData = default(ReportMessageByIdData));
        /// <summary>
        /// Report a user
        /// </summary>
        /// <remarks>
        /// ## Report a user  Reports a user who sends an offensive message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="reportUserByIdData"> (optional)</param>
        /// <returns>ReportUserByIdResponse</returns>
        ReportUserByIdResponse ReportUserById (string apiToken, string offendingUserId, ReportUserByIdData reportUserByIdData = default(ReportUserByIdData));

        /// <summary>
        /// Report a user
        /// </summary>
        /// <remarks>
        /// ## Report a user  Reports a user who sends an offensive message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="reportUserByIdData"> (optional)</param>
        /// <returns>ApiResponse of ReportUserByIdResponse</returns>
        ApiResponse<ReportUserByIdResponse> ReportUserByIdWithHttpInfo (string apiToken, string offendingUserId, ReportUserByIdData reportUserByIdData = default(ReportUserByIdData));
        /// <summary>
        /// View a moderated message
        /// </summary>
        /// <remarks>
        /// ## View a moderated message  Retrieves information on a message that has been moderated by the [profanity filter](https://sendbird.com/docs/chat/v3/platform-api/guides/filter-and-moderation#2-profanity-filter).  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-view-a-moderated-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <returns>Object</returns>
        Object ViewModeratedMessageById (string apiToken, string channelType, string channelUrl, string messageId);

        /// <summary>
        /// View a moderated message
        /// </summary>
        /// <remarks>
        /// ## View a moderated message  Retrieves information on a message that has been moderated by the [profanity filter](https://sendbird.com/docs/chat/v3/platform-api/guides/filter-and-moderation#2-profanity-filter).  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-view-a-moderated-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ViewModeratedMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List reports
        /// </summary>
        /// <remarks>
        /// ## List reports  Retrieves a list of reports within an application regardless of object types.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startTs"> (optional)</param>
        /// <param name="endTs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListReportsResponse</returns>
        System.Threading.Tasks.Task<ListReportsResponse> ListReportsAsync (string apiToken, string token = default, int? limit = default, int? startTs = default, int? endTs = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List reports
        /// </summary>
        /// <remarks>
        /// ## List reports  Retrieves a list of reports within an application regardless of object types.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startTs"> (optional)</param>
        /// <param name="endTs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListReportsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListReportsResponse>> ListReportsWithHttpInfoAsync (string apiToken, string token = default, int? limit = default, int? startTs = default, int? endTs = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// List reports on a channel
        /// </summary>
        /// <remarks>
        /// ## List reports on a channel  Retrieves a list of reports on a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel which is reported for offensive messages or inappropriate activities.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListReportsOnChannelByUrlResponse</returns>
        System.Threading.Tasks.Task<ListReportsOnChannelByUrlResponse> ListReportsOnChannelByUrlAsync (string apiToken, string channelType, string channelUrl, string token = default, int? limit = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List reports on a channel
        /// </summary>
        /// <remarks>
        /// ## List reports on a channel  Retrieves a list of reports on a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel which is reported for offensive messages or inappropriate activities.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListReportsOnChannelByUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListReportsOnChannelByUrlResponse>> ListReportsOnChannelByUrlWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string token = default, int? limit = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// List reports on a message
        /// </summary>
        /// <remarks>
        /// ## List reports on a message  Retrieves a list of reports on a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel where the reported message is in.  `message_id`      Type: string      Description: Specifies the unique ID of the reported message.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListReportsOnMessageByIdResponse</returns>
        System.Threading.Tasks.Task<ListReportsOnMessageByIdResponse> ListReportsOnMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, string token = default, int? limit = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List reports on a message
        /// </summary>
        /// <remarks>
        /// ## List reports on a message  Retrieves a list of reports on a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel where the reported message is in.  `message_id`      Type: string      Description: Specifies the unique ID of the reported message.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListReportsOnMessageByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListReportsOnMessageByIdResponse>> ListReportsOnMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, string token = default, int? limit = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// List reports on a user
        /// </summary>
        /// <remarks>
        /// ## List reports on a user  Retrieves a list of reports on a user who sends an offensive message.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `offending_user_id`      Type: string      Description: Specifies the unique ID of the user who has sent the message to report.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListReportsOnUserByIdResponse</returns>
        System.Threading.Tasks.Task<ListReportsOnUserByIdResponse> ListReportsOnUserByIdAsync (string apiToken, string offendingUserId, string token = default, int? limit = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List reports on a user
        /// </summary>
        /// <remarks>
        /// ## List reports on a user  Retrieves a list of reports on a user who sends an offensive message.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `offending_user_id`      Type: string      Description: Specifies the unique ID of the user who has sent the message to report.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListReportsOnUserByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListReportsOnUserByIdResponse>> ListReportsOnUserByIdWithHttpInfoAsync (string apiToken, string offendingUserId, string token = default, int? limit = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Report a channel
        /// </summary>
        /// <remarks>
        /// ## Report a channel  Reports a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="reportChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ReportChannelByUrlResponse</returns>
        System.Threading.Tasks.Task<ReportChannelByUrlResponse> ReportChannelByUrlAsync (string apiToken, string channelType, string channelUrl, ReportChannelByUrlData reportChannelByUrlData = default(ReportChannelByUrlData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Report a channel
        /// </summary>
        /// <remarks>
        /// ## Report a channel  Reports a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="reportChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ReportChannelByUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportChannelByUrlResponse>> ReportChannelByUrlWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, ReportChannelByUrlData reportChannelByUrlData = default(ReportChannelByUrlData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Report a message
        /// </summary>
        /// <remarks>
        /// ## Report a message  Reports a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="reportMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ReportMessageByIdResponse</returns>
        System.Threading.Tasks.Task<ReportMessageByIdResponse> ReportMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, ReportMessageByIdData reportMessageByIdData = default(ReportMessageByIdData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Report a message
        /// </summary>
        /// <remarks>
        /// ## Report a message  Reports a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="reportMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ReportMessageByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportMessageByIdResponse>> ReportMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, ReportMessageByIdData reportMessageByIdData = default(ReportMessageByIdData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Report a user
        /// </summary>
        /// <remarks>
        /// ## Report a user  Reports a user who sends an offensive message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="reportUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ReportUserByIdResponse</returns>
        System.Threading.Tasks.Task<ReportUserByIdResponse> ReportUserByIdAsync (string apiToken, string offendingUserId, ReportUserByIdData reportUserByIdData = default(ReportUserByIdData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Report a user
        /// </summary>
        /// <remarks>
        /// ## Report a user  Reports a user who sends an offensive message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="reportUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ReportUserByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportUserByIdResponse>> ReportUserByIdWithHttpInfoAsync (string apiToken, string offendingUserId, ReportUserByIdData reportUserByIdData = default(ReportUserByIdData), CancellationToken cancellationToken = default);
        /// <summary>
        /// View a moderated message
        /// </summary>
        /// <remarks>
        /// ## View a moderated message  Retrieves information on a message that has been moderated by the [profanity filter](https://sendbird.com/docs/chat/v3/platform-api/guides/filter-and-moderation#2-profanity-filter).  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-view-a-moderated-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ViewModeratedMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, CancellationToken cancellationToken = default);

        /// <summary>
        /// View a moderated message
        /// </summary>
        /// <remarks>
        /// ## View a moderated message  Retrieves information on a message that has been moderated by the [profanity filter](https://sendbird.com/docs/chat/v3/platform-api/guides/filter-and-moderation#2-profanity-filter).  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-view-a-moderated-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ViewModeratedMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportApi : IReportApi
    {
        private sendbird_platform_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportApi(String basePath)
        {
            this.Configuration = new sendbird_platform_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReportApi()
        {
            this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportApi(sendbird_platform_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird_platform_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird_platform_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List reports ## List reports  Retrieves a list of reports within an application regardless of object types.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startTs"> (optional)</param>
        /// <param name="endTs"> (optional)</param>
        /// <returns>ListReportsResponse</returns>
        public ListReportsResponse ListReports (string apiToken, string token = default, int? limit = default, int? startTs = default, int? endTs = default)
        {
             ApiResponse<ListReportsResponse> localVarResponse = ListReportsWithHttpInfo(apiToken, token, limit, startTs, endTs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List reports ## List reports  Retrieves a list of reports within an application regardless of object types.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startTs"> (optional)</param>
        /// <param name="endTs"> (optional)</param>
        /// <returns>ApiResponse of ListReportsResponse</returns>
        public ApiResponse<ListReportsResponse> ListReportsWithHttpInfo (string apiToken, string token = default, int? limit = default, int? startTs = default, int? endTs = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ListReports");

            var localVarPath = "/v3/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_ts", startTs)); // query parameter
            if (endTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_ts", endTs)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReportsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListReportsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReportsResponse)));
        }

        /// <summary>
        /// List reports ## List reports  Retrieves a list of reports within an application regardless of object types.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startTs"> (optional)</param>
        /// <param name="endTs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListReportsResponse</returns>
        public async System.Threading.Tasks.Task<ListReportsResponse> ListReportsAsync (string apiToken, string token = default, int? limit = default, int? startTs = default, int? endTs = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListReportsResponse> localVarResponse = await ListReportsWithHttpInfoAsync(apiToken, token, limit, startTs, endTs, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List reports ## List reports  Retrieves a list of reports within an application regardless of object types.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="startTs"> (optional)</param>
        /// <param name="endTs"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListReportsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListReportsResponse>> ListReportsWithHttpInfoAsync (string apiToken, string token = default, int? limit = default, int? startTs = default, int? endTs = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ListReports");

            var localVarPath = "/v3/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_ts", startTs)); // query parameter
            if (endTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_ts", endTs)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReportsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListReportsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReportsResponse)));
        }

        /// <summary>
        /// List reports on a channel ## List reports on a channel  Retrieves a list of reports on a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel which is reported for offensive messages or inappropriate activities.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ListReportsOnChannelByUrlResponse</returns>
        public ListReportsOnChannelByUrlResponse ListReportsOnChannelByUrl (string apiToken, string channelType, string channelUrl, string token = default, int? limit = default)
        {
             ApiResponse<ListReportsOnChannelByUrlResponse> localVarResponse = ListReportsOnChannelByUrlWithHttpInfo(apiToken, channelType, channelUrl, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List reports on a channel ## List reports on a channel  Retrieves a list of reports on a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel which is reported for offensive messages or inappropriate activities.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of ListReportsOnChannelByUrlResponse</returns>
        public ApiResponse<ListReportsOnChannelByUrlResponse> ListReportsOnChannelByUrlWithHttpInfo (string apiToken, string channelType, string channelUrl, string token = default, int? limit = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ListReportsOnChannelByUrl");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling ReportApi->ListReportsOnChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling ReportApi->ListReportsOnChannelByUrl");

            var localVarPath = "/v3/report/{channel_type}/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReportsOnChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReportsOnChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListReportsOnChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReportsOnChannelByUrlResponse)));
        }

        /// <summary>
        /// List reports on a channel ## List reports on a channel  Retrieves a list of reports on a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel which is reported for offensive messages or inappropriate activities.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListReportsOnChannelByUrlResponse</returns>
        public async System.Threading.Tasks.Task<ListReportsOnChannelByUrlResponse> ListReportsOnChannelByUrlAsync (string apiToken, string channelType, string channelUrl, string token = default, int? limit = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListReportsOnChannelByUrlResponse> localVarResponse = await ListReportsOnChannelByUrlWithHttpInfoAsync(apiToken, channelType, channelUrl, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List reports on a channel ## List reports on a channel  Retrieves a list of reports on a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel which is reported for offensive messages or inappropriate activities.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListReportsOnChannelByUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListReportsOnChannelByUrlResponse>> ListReportsOnChannelByUrlWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string token = default, int? limit = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ListReportsOnChannelByUrl");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling ReportApi->ListReportsOnChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling ReportApi->ListReportsOnChannelByUrl");

            var localVarPath = "/v3/report/{channel_type}/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReportsOnChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReportsOnChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListReportsOnChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReportsOnChannelByUrlResponse)));
        }

        /// <summary>
        /// List reports on a message ## List reports on a message  Retrieves a list of reports on a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel where the reported message is in.  `message_id`      Type: string      Description: Specifies the unique ID of the reported message.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ListReportsOnMessageByIdResponse</returns>
        public ListReportsOnMessageByIdResponse ListReportsOnMessageById (string apiToken, string channelType, string channelUrl, string messageId, string token = default, int? limit = default)
        {
             ApiResponse<ListReportsOnMessageByIdResponse> localVarResponse = ListReportsOnMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List reports on a message ## List reports on a message  Retrieves a list of reports on a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel where the reported message is in.  `message_id`      Type: string      Description: Specifies the unique ID of the reported message.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of ListReportsOnMessageByIdResponse</returns>
        public ApiResponse<ListReportsOnMessageByIdResponse> ListReportsOnMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, string token = default, int? limit = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ListReportsOnMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling ReportApi->ListReportsOnMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling ReportApi->ListReportsOnMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling ReportApi->ListReportsOnMessageById");

            var localVarPath = "/v3/report/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReportsOnMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReportsOnMessageByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListReportsOnMessageByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReportsOnMessageByIdResponse)));
        }

        /// <summary>
        /// List reports on a message ## List reports on a message  Retrieves a list of reports on a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel where the reported message is in.  `message_id`      Type: string      Description: Specifies the unique ID of the reported message.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListReportsOnMessageByIdResponse</returns>
        public async System.Threading.Tasks.Task<ListReportsOnMessageByIdResponse> ListReportsOnMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, string token = default, int? limit = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListReportsOnMessageByIdResponse> localVarResponse = await ListReportsOnMessageByIdWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List reports on a message ## List reports on a message  Retrieves a list of reports on a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel where the reported message is in.  `message_id`      Type: string      Description: Specifies the unique ID of the reported message.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListReportsOnMessageByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListReportsOnMessageByIdResponse>> ListReportsOnMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, string token = default, int? limit = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ListReportsOnMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling ReportApi->ListReportsOnMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling ReportApi->ListReportsOnMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling ReportApi->ListReportsOnMessageById");

            var localVarPath = "/v3/report/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReportsOnMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReportsOnMessageByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListReportsOnMessageByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReportsOnMessageByIdResponse)));
        }

        /// <summary>
        /// List reports on a user ## List reports on a user  Retrieves a list of reports on a user who sends an offensive message.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `offending_user_id`      Type: string      Description: Specifies the unique ID of the user who has sent the message to report.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ListReportsOnUserByIdResponse</returns>
        public ListReportsOnUserByIdResponse ListReportsOnUserById (string apiToken, string offendingUserId, string token = default, int? limit = default)
        {
             ApiResponse<ListReportsOnUserByIdResponse> localVarResponse = ListReportsOnUserByIdWithHttpInfo(apiToken, offendingUserId, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List reports on a user ## List reports on a user  Retrieves a list of reports on a user who sends an offensive message.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `offending_user_id`      Type: string      Description: Specifies the unique ID of the user who has sent the message to report.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of ListReportsOnUserByIdResponse</returns>
        public ApiResponse<ListReportsOnUserByIdResponse> ListReportsOnUserByIdWithHttpInfo (string apiToken, string offendingUserId, string token = default, int? limit = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ListReportsOnUserById");
            // verify the required parameter 'offendingUserId' is set
            if (offendingUserId == null)
                throw new ApiException(400, "Missing required parameter 'offendingUserId' when calling ReportApi->ListReportsOnUserById");

            var localVarPath = "/v3/report/users/{offending_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offendingUserId != null) localVarPathParams.Add("offending_user_id", this.Configuration.ApiClient.ParameterToString(offendingUserId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReportsOnUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReportsOnUserByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListReportsOnUserByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReportsOnUserByIdResponse)));
        }

        /// <summary>
        /// List reports on a user ## List reports on a user  Retrieves a list of reports on a user who sends an offensive message.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `offending_user_id`      Type: string      Description: Specifies the unique ID of the user who has sent the message to report.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListReportsOnUserByIdResponse</returns>
        public async System.Threading.Tasks.Task<ListReportsOnUserByIdResponse> ListReportsOnUserByIdAsync (string apiToken, string offendingUserId, string token = default, int? limit = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListReportsOnUserByIdResponse> localVarResponse = await ListReportsOnUserByIdWithHttpInfoAsync(apiToken, offendingUserId, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List reports on a user ## List reports on a user  Retrieves a list of reports on a user who sends an offensive message.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-list-reports-on-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `offending_user_id`      Type: string      Description: Specifies the unique ID of the user who has sent the message to report.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListReportsOnUserByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListReportsOnUserByIdResponse>> ListReportsOnUserByIdWithHttpInfoAsync (string apiToken, string offendingUserId, string token = default, int? limit = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ListReportsOnUserById");
            // verify the required parameter 'offendingUserId' is set
            if (offendingUserId == null)
                throw new ApiException(400, "Missing required parameter 'offendingUserId' when calling ReportApi->ListReportsOnUserById");

            var localVarPath = "/v3/report/users/{offending_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offendingUserId != null) localVarPathParams.Add("offending_user_id", this.Configuration.ApiClient.ParameterToString(offendingUserId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReportsOnUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReportsOnUserByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListReportsOnUserByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReportsOnUserByIdResponse)));
        }

        /// <summary>
        /// Report a channel ## Report a channel  Reports a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="reportChannelByUrlData"> (optional)</param>
        /// <returns>ReportChannelByUrlResponse</returns>
        public ReportChannelByUrlResponse ReportChannelByUrl (string apiToken, string channelType, string channelUrl, ReportChannelByUrlData reportChannelByUrlData = default(ReportChannelByUrlData))
        {
             ApiResponse<ReportChannelByUrlResponse> localVarResponse = ReportChannelByUrlWithHttpInfo(apiToken, channelType, channelUrl, reportChannelByUrlData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Report a channel ## Report a channel  Reports a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="reportChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of ReportChannelByUrlResponse</returns>
        public ApiResponse<ReportChannelByUrlResponse> ReportChannelByUrlWithHttpInfo (string apiToken, string channelType, string channelUrl, ReportChannelByUrlData reportChannelByUrlData = default(ReportChannelByUrlData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ReportChannelByUrl");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling ReportApi->ReportChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling ReportApi->ReportChannelByUrl");

            var localVarPath = "/v3/report/{channel_type}/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (reportChannelByUrlData != null && reportChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reportChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReportChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportChannelByUrlResponse)));
        }

        /// <summary>
        /// Report a channel ## Report a channel  Reports a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="reportChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ReportChannelByUrlResponse</returns>
        public async System.Threading.Tasks.Task<ReportChannelByUrlResponse> ReportChannelByUrlAsync (string apiToken, string channelType, string channelUrl, ReportChannelByUrlData reportChannelByUrlData = default(ReportChannelByUrlData), CancellationToken cancellationToken = default)
        {
             ApiResponse<ReportChannelByUrlResponse> localVarResponse = await ReportChannelByUrlWithHttpInfoAsync(apiToken, channelType, channelUrl, reportChannelByUrlData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Report a channel ## Report a channel  Reports a channel that has offensive messages or abusive activities.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="reportChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ReportChannelByUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportChannelByUrlResponse>> ReportChannelByUrlWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, ReportChannelByUrlData reportChannelByUrlData = default(ReportChannelByUrlData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ReportChannelByUrl");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling ReportApi->ReportChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling ReportApi->ReportChannelByUrl");

            var localVarPath = "/v3/report/{channel_type}/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (reportChannelByUrlData != null && reportChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reportChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReportChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportChannelByUrlResponse)));
        }

        /// <summary>
        /// Report a message ## Report a message  Reports a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="reportMessageByIdData"> (optional)</param>
        /// <returns>ReportMessageByIdResponse</returns>
        public ReportMessageByIdResponse ReportMessageById (string apiToken, string channelType, string channelUrl, string messageId, ReportMessageByIdData reportMessageByIdData = default(ReportMessageByIdData))
        {
             ApiResponse<ReportMessageByIdResponse> localVarResponse = ReportMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId, reportMessageByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Report a message ## Report a message  Reports a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="reportMessageByIdData"> (optional)</param>
        /// <returns>ApiResponse of ReportMessageByIdResponse</returns>
        public ApiResponse<ReportMessageByIdResponse> ReportMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, ReportMessageByIdData reportMessageByIdData = default(ReportMessageByIdData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ReportMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling ReportApi->ReportMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling ReportApi->ReportMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling ReportApi->ReportMessageById");

            var localVarPath = "/v3/report/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (reportMessageByIdData != null && reportMessageByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reportMessageByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportMessageByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportMessageByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReportMessageByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportMessageByIdResponse)));
        }

        /// <summary>
        /// Report a message ## Report a message  Reports a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="reportMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ReportMessageByIdResponse</returns>
        public async System.Threading.Tasks.Task<ReportMessageByIdResponse> ReportMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, ReportMessageByIdData reportMessageByIdData = default(ReportMessageByIdData), CancellationToken cancellationToken = default)
        {
             ApiResponse<ReportMessageByIdResponse> localVarResponse = await ReportMessageByIdWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, reportMessageByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Report a message ## Report a message  Reports a message which contains suspicious, harassing, or inappropriate content.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="reportMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ReportMessageByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportMessageByIdResponse>> ReportMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, ReportMessageByIdData reportMessageByIdData = default(ReportMessageByIdData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ReportMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling ReportApi->ReportMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling ReportApi->ReportMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling ReportApi->ReportMessageById");

            var localVarPath = "/v3/report/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (reportMessageByIdData != null && reportMessageByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reportMessageByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportMessageByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportMessageByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReportMessageByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportMessageByIdResponse)));
        }

        /// <summary>
        /// Report a user ## Report a user  Reports a user who sends an offensive message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="reportUserByIdData"> (optional)</param>
        /// <returns>ReportUserByIdResponse</returns>
        public ReportUserByIdResponse ReportUserById (string apiToken, string offendingUserId, ReportUserByIdData reportUserByIdData = default(ReportUserByIdData))
        {
             ApiResponse<ReportUserByIdResponse> localVarResponse = ReportUserByIdWithHttpInfo(apiToken, offendingUserId, reportUserByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Report a user ## Report a user  Reports a user who sends an offensive message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="reportUserByIdData"> (optional)</param>
        /// <returns>ApiResponse of ReportUserByIdResponse</returns>
        public ApiResponse<ReportUserByIdResponse> ReportUserByIdWithHttpInfo (string apiToken, string offendingUserId, ReportUserByIdData reportUserByIdData = default(ReportUserByIdData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ReportUserById");
            // verify the required parameter 'offendingUserId' is set
            if (offendingUserId == null)
                throw new ApiException(400, "Missing required parameter 'offendingUserId' when calling ReportApi->ReportUserById");

            var localVarPath = "/v3/report/users/{offending_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offendingUserId != null) localVarPathParams.Add("offending_user_id", this.Configuration.ApiClient.ParameterToString(offendingUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (reportUserByIdData != null && reportUserByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reportUserByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportUserByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportUserByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReportUserByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportUserByIdResponse)));
        }

        /// <summary>
        /// Report a user ## Report a user  Reports a user who sends an offensive message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="reportUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ReportUserByIdResponse</returns>
        public async System.Threading.Tasks.Task<ReportUserByIdResponse> ReportUserByIdAsync (string apiToken, string offendingUserId, ReportUserByIdData reportUserByIdData = default(ReportUserByIdData), CancellationToken cancellationToken = default)
        {
             ApiResponse<ReportUserByIdResponse> localVarResponse = await ReportUserByIdWithHttpInfoAsync(apiToken, offendingUserId, reportUserByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Report a user ## Report a user  Reports a user who sends an offensive message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-report-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="offendingUserId"></param>
        /// <param name="reportUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ReportUserByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportUserByIdResponse>> ReportUserByIdWithHttpInfoAsync (string apiToken, string offendingUserId, ReportUserByIdData reportUserByIdData = default(ReportUserByIdData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ReportUserById");
            // verify the required parameter 'offendingUserId' is set
            if (offendingUserId == null)
                throw new ApiException(400, "Missing required parameter 'offendingUserId' when calling ReportApi->ReportUserById");

            var localVarPath = "/v3/report/users/{offending_user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offendingUserId != null) localVarPathParams.Add("offending_user_id", this.Configuration.ApiClient.ParameterToString(offendingUserId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (reportUserByIdData != null && reportUserByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reportUserByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportUserByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReportUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportUserByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ReportUserByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportUserByIdResponse)));
        }

        /// <summary>
        /// View a moderated message ## View a moderated message  Retrieves information on a message that has been moderated by the [profanity filter](https://sendbird.com/docs/chat/v3/platform-api/guides/filter-and-moderation#2-profanity-filter).  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-view-a-moderated-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <returns>Object</returns>
        public Object ViewModeratedMessageById (string apiToken, string channelType, string channelUrl, string messageId)
        {
             ApiResponse<Object> localVarResponse = ViewModeratedMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a moderated message ## View a moderated message  Retrieves information on a message that has been moderated by the [profanity filter](https://sendbird.com/docs/chat/v3/platform-api/guides/filter-and-moderation#2-profanity-filter).  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-view-a-moderated-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ViewModeratedMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ViewModeratedMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling ReportApi->ViewModeratedMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling ReportApi->ViewModeratedMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling ReportApi->ViewModeratedMessageById");

            var localVarPath = "/v3/report/{channel_type}/{channel_url}/profanity_messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewModeratedMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// View a moderated message ## View a moderated message  Retrieves information on a message that has been moderated by the [profanity filter](https://sendbird.com/docs/chat/v3/platform-api/guides/filter-and-moderation#2-profanity-filter).  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-view-a-moderated-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ViewModeratedMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await ViewModeratedMessageByIdWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a moderated message ## View a moderated message  Retrieves information on a message that has been moderated by the [profanity filter](https://sendbird.com/docs/chat/v3/platform-api/guides/filter-and-moderation#2-profanity-filter).  https://sendbird.com/docs/chat/v3/platform-api/guides/report-content-and-subject#2-view-a-moderated-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ViewModeratedMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ReportApi->ViewModeratedMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling ReportApi->ViewModeratedMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling ReportApi->ViewModeratedMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling ReportApi->ViewModeratedMessageById");

            var localVarPath = "/v3/report/{channel_type}/{channel_url}/profanity_messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewModeratedMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
