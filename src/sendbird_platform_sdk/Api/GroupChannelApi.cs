/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupChannelApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept an invitation
        /// </summary>
        /// <remarks>
        /// ## Accept an invitation  Accepts an invitation from a group channel for a user to join. A single user may join up to 2,000 group channels, and any invitation to a user who is at capacity will be automatically canceled. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: This action is only available when the `auto_accept` property of an application is set to **false**. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) action, or the [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference) action.      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="acceptAnInvitationRequest"> (optional)</param>
        /// <returns>SendbirdGroupChannelDetail</returns>
        SendbirdGroupChannelDetail AcceptAnInvitation (string channelUrl, string apiToken = default(string), AcceptAnInvitationRequest acceptAnInvitationRequest = default(AcceptAnInvitationRequest));

        /// <summary>
        /// Accept an invitation
        /// </summary>
        /// <remarks>
        /// ## Accept an invitation  Accepts an invitation from a group channel for a user to join. A single user may join up to 2,000 group channels, and any invitation to a user who is at capacity will be automatically canceled. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: This action is only available when the `auto_accept` property of an application is set to **false**. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) action, or the [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference) action.      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="acceptAnInvitationRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdGroupChannelDetail</returns>
        ApiResponse<SendbirdGroupChannelDetail> AcceptAnInvitationWithHttpInfo (string channelUrl, string apiToken = default(string), AcceptAnInvitationRequest acceptAnInvitationRequest = default(AcceptAnInvitationRequest));
        /// <summary>
        /// Cancel the registration of operators
        /// </summary>
        /// <remarks>
        /// ## Unregister operators from a group channel  You can unregister operators in a group channel but keep them in the channel as members using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/unregister-operators-from-a-group-channel#1-unregister-operators-from-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="operatorIds">Specifies an array of one or more operator IDs to unregister from the channel. The operators in this array remain as participants of the channel after losing their operational roles. Urlencoding each operator ID is recommended. An example of a Urlencoded array would be ?operator_ids&#x3D;urlencoded_id_1,urlencoded_id_2.</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        Object CancelTheRegistrationOfOperators (string channelUrl, string operatorIds, bool? deleteAll = default(bool?), string apiToken = default(string));

        /// <summary>
        /// Cancel the registration of operators
        /// </summary>
        /// <remarks>
        /// ## Unregister operators from a group channel  You can unregister operators in a group channel but keep them in the channel as members using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/unregister-operators-from-a-group-channel#1-unregister-operators-from-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="operatorIds">Specifies an array of one or more operator IDs to unregister from the channel. The operators in this array remain as participants of the channel after losing their operational roles. Urlencoding each operator ID is recommended. An example of a Urlencoded array would be ?operator_ids&#x3D;urlencoded_id_1,urlencoded_id_2.</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CancelTheRegistrationOfOperatorsWithHttpInfo (string channelUrl, string operatorIds, bool? deleteAll = default(bool?), string apiToken = default(string));
        /// <summary>
        /// Check if member
        /// </summary>
        /// <remarks>
        /// ## Check if user is a member  Checks if a user is a member of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>CheckIfMemberResponse</returns>
        CheckIfMemberResponse CheckIfMember (string channelUrl, string userId, string apiToken = default(string));

        /// <summary>
        /// Check if member
        /// </summary>
        /// <remarks>
        /// ## Check if user is a member  Checks if a user is a member of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of CheckIfMemberResponse</returns>
        ApiResponse<CheckIfMemberResponse> CheckIfMemberWithHttpInfo (string channelUrl, string userId, string apiToken = default(string));
        /// <summary>
        /// Create a group channel
        /// </summary>
        /// <remarks>
        /// ## Create a group channel  You can create a group channel for 1-to-1 and 1-to-N conversations. By default, group channels are used for conversations between up to 100 members. This number can stretch up to tens of thousands in Supergroup channels. Group channels can either be private and invite only, or public. They support typing indicators, unread count and read receipts, allowing for an interactive chat experience. A user can join up to 2000 group channels, and higher numbers would negatively impact the performance for the end user. The Chat history is turned off by default and its settings can be changed on Sendbird Dashboard by going to Settings > Chat > Channels > Group channels > Chat history. To learn more about group channels, see Channel Overview.  > If you are seeing the error message Maximum \"channel join\" count reached., then consider deleting channels that are no longer used. For situations where an agent connects with many customers such as support, delivery logistics or sales, we recommend using Sendbird Desk.  https://sendbird.com/docs/chat/platform-api/v3/channel/creating-a-channel/create-a-group-channel#1-create-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createAGroupChannelRequest"> (optional)</param>
        /// <returns>SendbirdGroupChannelDetail</returns>
        SendbirdGroupChannelDetail CreateAGroupChannel (string apiToken = default(string), CreateAGroupChannelRequest createAGroupChannelRequest = default(CreateAGroupChannelRequest));

        /// <summary>
        /// Create a group channel
        /// </summary>
        /// <remarks>
        /// ## Create a group channel  You can create a group channel for 1-to-1 and 1-to-N conversations. By default, group channels are used for conversations between up to 100 members. This number can stretch up to tens of thousands in Supergroup channels. Group channels can either be private and invite only, or public. They support typing indicators, unread count and read receipts, allowing for an interactive chat experience. A user can join up to 2000 group channels, and higher numbers would negatively impact the performance for the end user. The Chat history is turned off by default and its settings can be changed on Sendbird Dashboard by going to Settings > Chat > Channels > Group channels > Chat history. To learn more about group channels, see Channel Overview.  > If you are seeing the error message Maximum \"channel join\" count reached., then consider deleting channels that are no longer used. For situations where an agent connects with many customers such as support, delivery logistics or sales, we recommend using Sendbird Desk.  https://sendbird.com/docs/chat/platform-api/v3/channel/creating-a-channel/create-a-group-channel#1-create-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createAGroupChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdGroupChannelDetail</returns>
        ApiResponse<SendbirdGroupChannelDetail> CreateAGroupChannelWithHttpInfo (string apiToken = default(string), CreateAGroupChannelRequest createAGroupChannelRequest = default(CreateAGroupChannelRequest));
        /// <summary>
        /// Delete a group channel
        /// </summary>
        /// <remarks>
        /// ## Delete a group channel  You can delete a group channel or a Supergroup channel using this API. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteAGroupChannel (string channelUrl, string apiToken = default(string));

        /// <summary>
        /// Delete a group channel
        /// </summary>
        /// <remarks>
        /// ## Delete a group channel  You can delete a group channel or a Supergroup channel using this API. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteAGroupChannelWithHttpInfo (string channelUrl, string apiToken = default(string));
        /// <summary>
        /// Get a group channel
        /// </summary>
        /// <remarks>
        /// ## Get a group channel  This action retrieves information about a specific [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use the optional query parameters to determine whether to include delivery receipt, read receipt, or member information in the response.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/get-a-group-channel#1-get-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="memberActiveMode">Restricts the member list to members who are activated or deactivated in the channel. This parameter is only effective if the parameter show_member is true. Acceptable values are all, activated, and deactivated. (default: all) (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>GetAGroupChannelResponse</returns>
        GetAGroupChannelResponse GetAGroupChannel (string channelUrl, bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), string memberActiveMode = default(string), string userId = default(string), string apiToken = default(string));

        /// <summary>
        /// Get a group channel
        /// </summary>
        /// <remarks>
        /// ## Get a group channel  This action retrieves information about a specific [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use the optional query parameters to determine whether to include delivery receipt, read receipt, or member information in the response.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/get-a-group-channel#1-get-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="memberActiveMode">Restricts the member list to members who are activated or deactivated in the channel. This parameter is only effective if the parameter show_member is true. Acceptable values are all, activated, and deactivated. (default: all) (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of GetAGroupChannelResponse</returns>
        ApiResponse<GetAGroupChannelResponse> GetAGroupChannelWithHttpInfo (string channelUrl, bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), string memberActiveMode = default(string), string userId = default(string), string apiToken = default(string));
        /// <summary>
        /// Hide a channel
        /// </summary>
        /// <remarks>
        /// ## Hide a channel  This action allows you to hide a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) from a user's channel list. Hiding a channel gives users the ability to archive channels so that they can focus on channels that need the most attention.  With this API, you can allow users to hide a channel from themselves or from all channel members. You can also determine whether to have the channel remain hidden when a new message is sent to the channel. Note that only group channels can be hidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="hideAChannelRequest"> (optional)</param>
        /// <returns>Object</returns>
        Object HideAChannel (string channelUrl, string apiToken = default(string), HideAChannelRequest hideAChannelRequest = default(HideAChannelRequest));

        /// <summary>
        /// Hide a channel
        /// </summary>
        /// <remarks>
        /// ## Hide a channel  This action allows you to hide a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) from a user's channel list. Hiding a channel gives users the ability to archive channels so that they can focus on channels that need the most attention.  With this API, you can allow users to hide a channel from themselves or from all channel members. You can also determine whether to have the channel remain hidden when a new message is sent to the channel. Note that only group channels can be hidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="hideAChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> HideAChannelWithHttpInfo (string channelUrl, string apiToken = default(string), HideAChannelRequest hideAChannelRequest = default(HideAChannelRequest));
        /// <summary>
        /// Invite as members
        /// </summary>
        /// <remarks>
        /// ## Invite as members  Invites one or more users as members to a group channel. Users can join a group channel immediately after receiving an invitation, without having to accept it. To give users an option to accept or decline an invitation, see [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) or [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference). See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: By default, [blocked users](https://sendbird.com/docs/chat/platform-api/v3/moderation/blocking-users/block-users) are included when sending invitations. If you wish to exclude blocked users, [contact our sales team](https://get.sendbird.com/talk-to-sales.html).      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="inviteAsMembersRequest"> (optional)</param>
        /// <returns>InviteAsMembersResponse</returns>
        InviteAsMembersResponse InviteAsMembers (string channelUrl, string apiToken = default(string), InviteAsMembersRequest inviteAsMembersRequest = default(InviteAsMembersRequest));

        /// <summary>
        /// Invite as members
        /// </summary>
        /// <remarks>
        /// ## Invite as members  Invites one or more users as members to a group channel. Users can join a group channel immediately after receiving an invitation, without having to accept it. To give users an option to accept or decline an invitation, see [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) or [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference). See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: By default, [blocked users](https://sendbird.com/docs/chat/platform-api/v3/moderation/blocking-users/block-users) are included when sending invitations. If you wish to exclude blocked users, [contact our sales team](https://get.sendbird.com/talk-to-sales.html).      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="inviteAsMembersRequest"> (optional)</param>
        /// <returns>ApiResponse of InviteAsMembersResponse</returns>
        ApiResponse<InviteAsMembersResponse> InviteAsMembersWithHttpInfo (string channelUrl, string apiToken = default(string), InviteAsMembersRequest inviteAsMembersRequest = default(InviteAsMembersRequest));
        /// <summary>
        /// Join a channel
        /// </summary>
        /// <remarks>
        /// ## Join a channel  This API allows a user to join a [public](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-group-channel-types) group channel. Users can only join public group channels where the `is_public` property is set to `true` using this API. A single user can join up to 2,000 group channels, and a user who reaches the capacity can’t join a new channel. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinAChannelRequest"> (optional)</param>
        /// <returns>SendbirdGroupChannelDetail</returns>
        SendbirdGroupChannelDetail JoinAChannel (string channelUrl, string apiToken = default(string), JoinAChannelRequest joinAChannelRequest = default(JoinAChannelRequest));

        /// <summary>
        /// Join a channel
        /// </summary>
        /// <remarks>
        /// ## Join a channel  This API allows a user to join a [public](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-group-channel-types) group channel. Users can only join public group channels where the `is_public` property is set to `true` using this API. A single user can join up to 2,000 group channels, and a user who reaches the capacity can’t join a new channel. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinAChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdGroupChannelDetail</returns>
        ApiResponse<SendbirdGroupChannelDetail> JoinAChannelWithHttpInfo (string channelUrl, string apiToken = default(string), JoinAChannelRequest joinAChannelRequest = default(JoinAChannelRequest));
        /// <summary>
        /// Leave a channel
        /// </summary>
        /// <remarks>
        /// ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveAChannelRequest"> (optional)</param>
        /// <returns>Object</returns>
        Object LeaveAChannel (string channelUrl, string apiToken = default(string), LeaveAChannelRequest leaveAChannelRequest = default(LeaveAChannelRequest));

        /// <summary>
        /// Leave a channel
        /// </summary>
        /// <remarks>
        /// ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveAChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LeaveAChannelWithHttpInfo (string channelUrl, string apiToken = default(string), LeaveAChannelRequest leaveAChannelRequest = default(LeaveAChannelRequest));
        /// <summary>
        /// List channels
        /// </summary>
        /// <remarks>
        /// ## List group channels  This action retrieves a list of [group channels](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use various query parameters to determine the search scope and select what kind of information you want to receive about the queried channels.  If you want to retrieve a list of group channels that a specific user has joined, use the [list group channels by user](https://sendbird.com/docs/chat/platform-api/v3/user/managing-joined-group-channels/list-group-channels-by-user) action under the User section.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/list-group-channels#1-list-group-channels
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token">Specifies a page token that indicates the starting index of a chunk of results. If not specified, the index is set as 0. (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter">Restricts the search scope to only retrieve group channels which have been created after the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="createdBefore">Restricts the search scope to only retrieve group channels which have been created before the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey">Specifies the key of an item in metadata. When a value of the order parameter is set to metadata_value_alphabetical, the results are alphabetically sorted by the value of the item specified by the key. (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom types to filter group channels. URL encoding each type is recommended. If not specified, all channels are returned, regardless of their custom type. (optional)</param>
        /// <param name="customTypeStartswith">Searches for group channels with the custom type which starts with the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="channelUrls">Specifies a comma-separated string of one or more group channel URLs to restrict the search scope. URL encoding each channel URL is recommended. (optional)</param>
        /// <param name="name">Specifies one or more group channel names. (optional)</param>
        /// <param name="nameContains">Searches for group channels whose names contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="nameStartswith">Searches for group channels whose names start with the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersExactlyIn">Searches for group channels with all the specified users as members. The parameter value should consist of user IDs separated by commas.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="membersIncludeIn">Searches for group channels that include one or more users as members among the specified users. The value should consist of user IDs separated by commas or %2C. You can specify up to 60 user IDs.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="queryType">Specifies a logical condition applied to the members_include_in parameter. Acceptable values are either AND or OR. For example, if you specify three members, A, B, and C, in members_include_in, the value of AND returns all channels that include every one of {A. B, C} as members. The value of OR returns channels that include {A}, plus those that include {B}, plus those that include {C}. (Default: AND) (optional)</param>
        /// <param name="membersNickname">Searches for group channels with members whose nicknames match the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersNicknameContains">Searches for group channels with members whose nicknames contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended.  * We recommend using at least three characters for the parameter value for better search efficiency when you design and implement related features. If you would like to allow one or two characters for searching, use members_nickname instead to prevent performance issues. (optional)</param>
        /// <param name="metadataKey">Searches for group channels with metadata containing an item with the specified value as its key. To use this parameter, either the metadata_values parameter or the metadata_value_startswith parameter should be specified. (optional)</param>
        /// <param name="metadataValues">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the value of that item matches one or more values specified by this parameter. The string should be specified with multiple values separated by commas. URL encoding each value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metadataValueStartswith">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the values of that item that start with the specified value of this parameter. URL encoding the value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metacounterKey">Searches for group channels with metacounter containing an item with the specified value as its key. To use this parameter, either the metacounter_values parameter or one of the metacounter_value_gt, metacounter_value_gte, metacounter_value_lt, and metacounter_value_lte parameters should be specified. (optional)</param>
        /// <param name="metacounterValues">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is equal to one or more values specified by this parameter. The string should be specified with multiple values separated by commas. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage">Determines whether to include the sorted_metaarray as one of the last_message’s properties in the response. (optional)</param>
        /// <returns>GroupChatListChannelsResponse</returns>
        GroupChatListChannelsResponse ListChannels (string apiToken, string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), long? createdAfter = default(long?), long? createdBefore = default(long?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?));

        /// <summary>
        /// List channels
        /// </summary>
        /// <remarks>
        /// ## List group channels  This action retrieves a list of [group channels](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use various query parameters to determine the search scope and select what kind of information you want to receive about the queried channels.  If you want to retrieve a list of group channels that a specific user has joined, use the [list group channels by user](https://sendbird.com/docs/chat/platform-api/v3/user/managing-joined-group-channels/list-group-channels-by-user) action under the User section.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/list-group-channels#1-list-group-channels
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token">Specifies a page token that indicates the starting index of a chunk of results. If not specified, the index is set as 0. (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter">Restricts the search scope to only retrieve group channels which have been created after the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="createdBefore">Restricts the search scope to only retrieve group channels which have been created before the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey">Specifies the key of an item in metadata. When a value of the order parameter is set to metadata_value_alphabetical, the results are alphabetically sorted by the value of the item specified by the key. (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom types to filter group channels. URL encoding each type is recommended. If not specified, all channels are returned, regardless of their custom type. (optional)</param>
        /// <param name="customTypeStartswith">Searches for group channels with the custom type which starts with the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="channelUrls">Specifies a comma-separated string of one or more group channel URLs to restrict the search scope. URL encoding each channel URL is recommended. (optional)</param>
        /// <param name="name">Specifies one or more group channel names. (optional)</param>
        /// <param name="nameContains">Searches for group channels whose names contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="nameStartswith">Searches for group channels whose names start with the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersExactlyIn">Searches for group channels with all the specified users as members. The parameter value should consist of user IDs separated by commas.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="membersIncludeIn">Searches for group channels that include one or more users as members among the specified users. The value should consist of user IDs separated by commas or %2C. You can specify up to 60 user IDs.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="queryType">Specifies a logical condition applied to the members_include_in parameter. Acceptable values are either AND or OR. For example, if you specify three members, A, B, and C, in members_include_in, the value of AND returns all channels that include every one of {A. B, C} as members. The value of OR returns channels that include {A}, plus those that include {B}, plus those that include {C}. (Default: AND) (optional)</param>
        /// <param name="membersNickname">Searches for group channels with members whose nicknames match the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersNicknameContains">Searches for group channels with members whose nicknames contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended.  * We recommend using at least three characters for the parameter value for better search efficiency when you design and implement related features. If you would like to allow one or two characters for searching, use members_nickname instead to prevent performance issues. (optional)</param>
        /// <param name="metadataKey">Searches for group channels with metadata containing an item with the specified value as its key. To use this parameter, either the metadata_values parameter or the metadata_value_startswith parameter should be specified. (optional)</param>
        /// <param name="metadataValues">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the value of that item matches one or more values specified by this parameter. The string should be specified with multiple values separated by commas. URL encoding each value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metadataValueStartswith">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the values of that item that start with the specified value of this parameter. URL encoding the value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metacounterKey">Searches for group channels with metacounter containing an item with the specified value as its key. To use this parameter, either the metacounter_values parameter or one of the metacounter_value_gt, metacounter_value_gte, metacounter_value_lt, and metacounter_value_lte parameters should be specified. (optional)</param>
        /// <param name="metacounterValues">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is equal to one or more values specified by this parameter. The string should be specified with multiple values separated by commas. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage">Determines whether to include the sorted_metaarray as one of the last_message’s properties in the response. (optional)</param>
        /// <returns>ApiResponse of GroupChatListChannelsResponse</returns>
        ApiResponse<GroupChatListChannelsResponse> ListChannelsWithHttpInfo (string apiToken, string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), long? createdAfter = default(long?), long? createdBefore = default(long?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?));
        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// ## List members  Retrieves a list of members of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="userId">Specifies the unique ID of a user. If &#x60;user_id&#x60; is provided, the response will include two additional boolean properties about each user in the members list. - &#x60;is_blocking_me&#x60;: Indicates whether the listed user is blocking the user specified in the user_id parameter. - &#x60;is_blocked_by_me&#x60;: Indicates whether the listed user is blocked by the user specified in the user_id parameter. (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMemberIsMuted"> (optional)</param>
        /// <param name="order">Specifies the method to sort a list of results. Acceptable values are the following: - &#x60;member_nickname_alphabetical&#x60; (default): sorts by the member nicknames in alphabetical order. - &#x60;operator_then_member_alphabetical&#x60;: sorts by the operational role and member nickname in alphabetical order where channel operators are listed before channel members. (optional)</param>
        /// <param name="operatorFilter">Restricts the search scope to only retrieve operators or non-operator members of the channel. Acceptable values are the following: - &#x60;all&#x60; (default): no filter is applied to the list. - &#x60;operator&#x60;: only channel operators are retrieved. - &#x60;nonoperator&#x60;: all channel members, except channel operators, are retrieved. (optional)</param>
        /// <param name="memberStateFilter">Restricts the search scope to retrieve members based on if they have accepted an invitation or if they were invited by a friend. Acceptable values are &#x60;invited_only&#x60;, &#x60;joined_only&#x60;, &#x60;invited_by_friend&#x60;, &#x60;invited_by_non_friend&#x60;, and &#x60;all&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="mutedMemberFilter">Restricts the search scope to retrieve members who are muted or unmuted in the channel. Acceptable values are &#x60;all&#x60;, &#x60;muted&#x60;, and &#x60;unmuted&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="memberActiveModeFilter">Restricts the search scope to retrieve members who are activated or deactivated in the channel. Acceptable values are &#x60;all&#x60;, &#x60;activated&#x60;, and &#x60;deactivated&#x60;. (default: &#x60;activated&#x60;) (optional)</param>
        /// <param name="nicknameStartswith">Searches for members whose nicknames start with the specified value. Urlencoding the value is recommended. (optional)</param>
        /// <param name="includePushPreference">Determines whether to include information about the push preference of each member, such as &#x60;push_enabled&#x60;, &#x60;push_trigger_option&#x60;, and &#x60;do_not_disturb&#x60;. (Default: &#x60;false&#x60;) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>GroupChannelListMembersResponse</returns>
        GroupChannelListMembersResponse ListMembers (string channelUrl, string token = default(string), int? limit = default(int?), string userId = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMemberIsMuted = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string memberActiveModeFilter = default(string), string nicknameStartswith = default(string), bool? includePushPreference = default(bool?), string apiToken = default(string));

        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// ## List members  Retrieves a list of members of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="userId">Specifies the unique ID of a user. If &#x60;user_id&#x60; is provided, the response will include two additional boolean properties about each user in the members list. - &#x60;is_blocking_me&#x60;: Indicates whether the listed user is blocking the user specified in the user_id parameter. - &#x60;is_blocked_by_me&#x60;: Indicates whether the listed user is blocked by the user specified in the user_id parameter. (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMemberIsMuted"> (optional)</param>
        /// <param name="order">Specifies the method to sort a list of results. Acceptable values are the following: - &#x60;member_nickname_alphabetical&#x60; (default): sorts by the member nicknames in alphabetical order. - &#x60;operator_then_member_alphabetical&#x60;: sorts by the operational role and member nickname in alphabetical order where channel operators are listed before channel members. (optional)</param>
        /// <param name="operatorFilter">Restricts the search scope to only retrieve operators or non-operator members of the channel. Acceptable values are the following: - &#x60;all&#x60; (default): no filter is applied to the list. - &#x60;operator&#x60;: only channel operators are retrieved. - &#x60;nonoperator&#x60;: all channel members, except channel operators, are retrieved. (optional)</param>
        /// <param name="memberStateFilter">Restricts the search scope to retrieve members based on if they have accepted an invitation or if they were invited by a friend. Acceptable values are &#x60;invited_only&#x60;, &#x60;joined_only&#x60;, &#x60;invited_by_friend&#x60;, &#x60;invited_by_non_friend&#x60;, and &#x60;all&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="mutedMemberFilter">Restricts the search scope to retrieve members who are muted or unmuted in the channel. Acceptable values are &#x60;all&#x60;, &#x60;muted&#x60;, and &#x60;unmuted&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="memberActiveModeFilter">Restricts the search scope to retrieve members who are activated or deactivated in the channel. Acceptable values are &#x60;all&#x60;, &#x60;activated&#x60;, and &#x60;deactivated&#x60;. (default: &#x60;activated&#x60;) (optional)</param>
        /// <param name="nicknameStartswith">Searches for members whose nicknames start with the specified value. Urlencoding the value is recommended. (optional)</param>
        /// <param name="includePushPreference">Determines whether to include information about the push preference of each member, such as &#x60;push_enabled&#x60;, &#x60;push_trigger_option&#x60;, and &#x60;do_not_disturb&#x60;. (Default: &#x60;false&#x60;) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of GroupChannelListMembersResponse</returns>
        ApiResponse<GroupChannelListMembersResponse> ListMembersWithHttpInfo (string channelUrl, string token = default(string), int? limit = default(int?), string userId = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMemberIsMuted = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string memberActiveModeFilter = default(string), string nicknameStartswith = default(string), bool? includePushPreference = default(bool?), string apiToken = default(string));
        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// ## List operators  You can retrieve a list of operators of a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/list-operators-of-a-group-channel#1-list-operators-of-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListOperatorsResponse</returns>
        ListOperatorsResponse ListOperators (string channelUrl, string token = default(string), int? limit = default(int?), string apiToken = default(string));

        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// ## List operators  You can retrieve a list of operators of a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/list-operators-of-a-group-channel#1-list-operators-of-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListOperatorsResponse</returns>
        ApiResponse<ListOperatorsResponse> ListOperatorsWithHttpInfo (string channelUrl, string token = default(string), int? limit = default(int?), string apiToken = default(string));
        /// <summary>
        /// Register operators to a group channel
        /// </summary>
        /// <remarks>
        /// ## Register operators to a group channel  You can register one or more operators to a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/register-operators-to-a-group-channel#1-register-operators-to-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerOperatorsToAGroupChannelRequest"> (optional)</param>
        /// <returns>Object</returns>
        Object RegisterOperatorsToAGroupChannel (string channelUrl, string apiToken = default(string), RegisterOperatorsToAGroupChannelRequest registerOperatorsToAGroupChannelRequest = default(RegisterOperatorsToAGroupChannelRequest));

        /// <summary>
        /// Register operators to a group channel
        /// </summary>
        /// <remarks>
        /// ## Register operators to a group channel  You can register one or more operators to a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/register-operators-to-a-group-channel#1-register-operators-to-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerOperatorsToAGroupChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RegisterOperatorsToAGroupChannelWithHttpInfo (string channelUrl, string apiToken = default(string), RegisterOperatorsToAGroupChannelRequest registerOperatorsToAGroupChannelRequest = default(RegisterOperatorsToAGroupChannelRequest));
        /// <summary>
        /// Reset chat history
        /// </summary>
        /// <remarks>
        /// ## Reset chat history  This action resets the properties related to a specific user's chat history in a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel), clearing existing messages in a channel from only the specified user's end. Because this action doesn't delete messages from the Sendbird database, other members in the channel can still retrieve and see the messages.  This action clears the messages for the specified user by updating the `last_message` and `read_receipt` properties of the [group channel resource](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-list-of-properties-for-group-channels) in addition to other internally managed data such as the count of a user's unread messages.  Using the `reset_all` property, you can also reset the properties related to the chat history of all members in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/reset-chat-history#1-reset-chat-history
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="resetChatHistoryRequest"> (optional)</param>
        /// <returns>ResetChatHistoryResponse</returns>
        ResetChatHistoryResponse ResetChatHistory (string channelUrl, string apiToken = default(string), ResetChatHistoryRequest resetChatHistoryRequest = default(ResetChatHistoryRequest));

        /// <summary>
        /// Reset chat history
        /// </summary>
        /// <remarks>
        /// ## Reset chat history  This action resets the properties related to a specific user's chat history in a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel), clearing existing messages in a channel from only the specified user's end. Because this action doesn't delete messages from the Sendbird database, other members in the channel can still retrieve and see the messages.  This action clears the messages for the specified user by updating the `last_message` and `read_receipt` properties of the [group channel resource](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-list-of-properties-for-group-channels) in addition to other internally managed data such as the count of a user's unread messages.  Using the `reset_all` property, you can also reset the properties related to the chat history of all members in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/reset-chat-history#1-reset-chat-history
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="resetChatHistoryRequest"> (optional)</param>
        /// <returns>ApiResponse of ResetChatHistoryResponse</returns>
        ApiResponse<ResetChatHistoryResponse> ResetChatHistoryWithHttpInfo (string channelUrl, string apiToken = default(string), ResetChatHistoryRequest resetChatHistoryRequest = default(ResetChatHistoryRequest));
        /// <summary>
        /// Start typing indicators
        /// </summary>
        /// <remarks>
        /// ## Start typing indicators  You can start showing a typing indicator using this API. Seeing whether other users are typing can help a more interactive conversation environment by showing real-time engagement of other users.  If you're looking for an easy way to show typing indicators on your app, check out Sendbird UIKit for a ready-to-use UI feature that can be customized to fit your needs.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/start-typing-indicators#1-start-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <returns>Object</returns>
        Object StartTypingIndicators (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest));

        /// <summary>
        /// Start typing indicators
        /// </summary>
        /// <remarks>
        /// ## Start typing indicators  You can start showing a typing indicator using this API. Seeing whether other users are typing can help a more interactive conversation environment by showing real-time engagement of other users.  If you're looking for an easy way to show typing indicators on your app, check out Sendbird UIKit for a ready-to-use UI feature that can be customized to fit your needs.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/start-typing-indicators#1-start-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> StartTypingIndicatorsWithHttpInfo (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest));
        /// <summary>
        /// Stop typing indicators
        /// </summary>
        /// <remarks>
        /// ## Stop typing indicators  You can stop showing a typing indicator using this API. To signal that a user is no longer typing, you can let the indicator disappear when the user sends a message or completely deletes the message text.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/stop-typing-indicators#1-stop-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <returns>Object</returns>
        Object StopTypingIndicators (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest));

        /// <summary>
        /// Stop typing indicators
        /// </summary>
        /// <remarks>
        /// ## Stop typing indicators  You can stop showing a typing indicator using this API. To signal that a user is no longer typing, you can let the indicator disappear when the user sends a message or completely deletes the message text.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/stop-typing-indicators#1-stop-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> StopTypingIndicatorsWithHttpInfo (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest));
        /// <summary>
        /// Unhide a channel
        /// </summary>
        /// <remarks>
        /// ## Unhide a channel  This action lets a hidden [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) reappear on the channel list of a specific user or every member in the group channel. Hiding or unhiding a channel lets users organize their channel list based on those that require the most attention. Note that only group channels can be hidden or unhidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to unhide or unarchive.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        Object UnhideAChannel (string channelUrl, string userId, bool? shouldUnhideAll = default(bool?), string apiToken = default(string));

        /// <summary>
        /// Unhide a channel
        /// </summary>
        /// <remarks>
        /// ## Unhide a channel  This action lets a hidden [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) reappear on the channel list of a specific user or every member in the group channel. Hiding or unhiding a channel lets users organize their channel list based on those that require the most attention. Note that only group channels can be hidden or unhidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to unhide or unarchive.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UnhideAChannelWithHttpInfo (string channelUrl, string userId, bool? shouldUnhideAll = default(bool?), string apiToken = default(string));
        /// <summary>
        /// Update a group channel
        /// </summary>
        /// <remarks>
        /// ## Update a group channel  You can update information about a group channel or a Supergroup channel using this API. You can't make any changes to the members of a channel with this API. To change members, see [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) instead. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-a-group-channel#1-update-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAGroupChannelRequest"> (optional)</param>
        /// <returns>SendbirdGroupChannelDetail</returns>
        SendbirdGroupChannelDetail UpdateAGroupChannel (string channelUrl, string apiToken = default(string), UpdateAGroupChannelRequest updateAGroupChannelRequest = default(UpdateAGroupChannelRequest));

        /// <summary>
        /// Update a group channel
        /// </summary>
        /// <remarks>
        /// ## Update a group channel  You can update information about a group channel or a Supergroup channel using this API. You can't make any changes to the members of a channel with this API. To change members, see [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) instead. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-a-group-channel#1-update-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAGroupChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdGroupChannelDetail</returns>
        ApiResponse<SendbirdGroupChannelDetail> UpdateAGroupChannelWithHttpInfo (string channelUrl, string apiToken = default(string), UpdateAGroupChannelRequest updateAGroupChannelRequest = default(UpdateAGroupChannelRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accept an invitation
        /// </summary>
        /// <remarks>
        /// ## Accept an invitation  Accepts an invitation from a group channel for a user to join. A single user may join up to 2,000 group channels, and any invitation to a user who is at capacity will be automatically canceled. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: This action is only available when the `auto_accept` property of an application is set to **false**. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) action, or the [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference) action.      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="acceptAnInvitationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdGroupChannelDetail</returns>
        System.Threading.Tasks.Task<SendbirdGroupChannelDetail> AcceptAnInvitationAsync (string channelUrl, string apiToken = default(string), AcceptAnInvitationRequest acceptAnInvitationRequest = default(AcceptAnInvitationRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Accept an invitation
        /// </summary>
        /// <remarks>
        /// ## Accept an invitation  Accepts an invitation from a group channel for a user to join. A single user may join up to 2,000 group channels, and any invitation to a user who is at capacity will be automatically canceled. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: This action is only available when the `auto_accept` property of an application is set to **false**. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) action, or the [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference) action.      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="acceptAnInvitationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdGroupChannelDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendbirdGroupChannelDetail>> AcceptAnInvitationWithHttpInfoAsync (string channelUrl, string apiToken = default(string), AcceptAnInvitationRequest acceptAnInvitationRequest = default(AcceptAnInvitationRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancel the registration of operators
        /// </summary>
        /// <remarks>
        /// ## Unregister operators from a group channel  You can unregister operators in a group channel but keep them in the channel as members using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/unregister-operators-from-a-group-channel#1-unregister-operators-from-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="operatorIds">Specifies an array of one or more operator IDs to unregister from the channel. The operators in this array remain as participants of the channel after losing their operational roles. Urlencoding each operator ID is recommended. An example of a Urlencoded array would be ?operator_ids&#x3D;urlencoded_id_1,urlencoded_id_2.</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CancelTheRegistrationOfOperatorsAsync (string channelUrl, string operatorIds, bool? deleteAll = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel the registration of operators
        /// </summary>
        /// <remarks>
        /// ## Unregister operators from a group channel  You can unregister operators in a group channel but keep them in the channel as members using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/unregister-operators-from-a-group-channel#1-unregister-operators-from-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="operatorIds">Specifies an array of one or more operator IDs to unregister from the channel. The operators in this array remain as participants of the channel after losing their operational roles. Urlencoding each operator ID is recommended. An example of a Urlencoded array would be ?operator_ids&#x3D;urlencoded_id_1,urlencoded_id_2.</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelTheRegistrationOfOperatorsWithHttpInfoAsync (string channelUrl, string operatorIds, bool? deleteAll = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Check if member
        /// </summary>
        /// <remarks>
        /// ## Check if user is a member  Checks if a user is a member of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CheckIfMemberResponse</returns>
        System.Threading.Tasks.Task<CheckIfMemberResponse> CheckIfMemberAsync (string channelUrl, string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Check if member
        /// </summary>
        /// <remarks>
        /// ## Check if user is a member  Checks if a user is a member of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CheckIfMemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckIfMemberResponse>> CheckIfMemberWithHttpInfoAsync (string channelUrl, string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a group channel
        /// </summary>
        /// <remarks>
        /// ## Create a group channel  You can create a group channel for 1-to-1 and 1-to-N conversations. By default, group channels are used for conversations between up to 100 members. This number can stretch up to tens of thousands in Supergroup channels. Group channels can either be private and invite only, or public. They support typing indicators, unread count and read receipts, allowing for an interactive chat experience. A user can join up to 2000 group channels, and higher numbers would negatively impact the performance for the end user. The Chat history is turned off by default and its settings can be changed on Sendbird Dashboard by going to Settings > Chat > Channels > Group channels > Chat history. To learn more about group channels, see Channel Overview.  > If you are seeing the error message Maximum \"channel join\" count reached., then consider deleting channels that are no longer used. For situations where an agent connects with many customers such as support, delivery logistics or sales, we recommend using Sendbird Desk.  https://sendbird.com/docs/chat/platform-api/v3/channel/creating-a-channel/create-a-group-channel#1-create-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdGroupChannelDetail</returns>
        System.Threading.Tasks.Task<SendbirdGroupChannelDetail> CreateAGroupChannelAsync (string apiToken = default(string), CreateAGroupChannelRequest createAGroupChannelRequest = default(CreateAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a group channel
        /// </summary>
        /// <remarks>
        /// ## Create a group channel  You can create a group channel for 1-to-1 and 1-to-N conversations. By default, group channels are used for conversations between up to 100 members. This number can stretch up to tens of thousands in Supergroup channels. Group channels can either be private and invite only, or public. They support typing indicators, unread count and read receipts, allowing for an interactive chat experience. A user can join up to 2000 group channels, and higher numbers would negatively impact the performance for the end user. The Chat history is turned off by default and its settings can be changed on Sendbird Dashboard by going to Settings > Chat > Channels > Group channels > Chat history. To learn more about group channels, see Channel Overview.  > If you are seeing the error message Maximum \"channel join\" count reached., then consider deleting channels that are no longer used. For situations where an agent connects with many customers such as support, delivery logistics or sales, we recommend using Sendbird Desk.  https://sendbird.com/docs/chat/platform-api/v3/channel/creating-a-channel/create-a-group-channel#1-create-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdGroupChannelDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendbirdGroupChannelDetail>> CreateAGroupChannelWithHttpInfoAsync (string apiToken = default(string), CreateAGroupChannelRequest createAGroupChannelRequest = default(CreateAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a group channel
        /// </summary>
        /// <remarks>
        /// ## Delete a group channel  You can delete a group channel or a Supergroup channel using this API. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteAGroupChannelAsync (string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a group channel
        /// </summary>
        /// <remarks>
        /// ## Delete a group channel  You can delete a group channel or a Supergroup channel using this API. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAGroupChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a group channel
        /// </summary>
        /// <remarks>
        /// ## Get a group channel  This action retrieves information about a specific [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use the optional query parameters to determine whether to include delivery receipt, read receipt, or member information in the response.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/get-a-group-channel#1-get-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="memberActiveMode">Restricts the member list to members who are activated or deactivated in the channel. This parameter is only effective if the parameter show_member is true. Acceptable values are all, activated, and deactivated. (default: all) (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetAGroupChannelResponse</returns>
        System.Threading.Tasks.Task<GetAGroupChannelResponse> GetAGroupChannelAsync (string channelUrl, bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), string memberActiveMode = default(string), string userId = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a group channel
        /// </summary>
        /// <remarks>
        /// ## Get a group channel  This action retrieves information about a specific [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use the optional query parameters to determine whether to include delivery receipt, read receipt, or member information in the response.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/get-a-group-channel#1-get-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="memberActiveMode">Restricts the member list to members who are activated or deactivated in the channel. This parameter is only effective if the parameter show_member is true. Acceptable values are all, activated, and deactivated. (default: all) (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetAGroupChannelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAGroupChannelResponse>> GetAGroupChannelWithHttpInfoAsync (string channelUrl, bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), string memberActiveMode = default(string), string userId = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Hide a channel
        /// </summary>
        /// <remarks>
        /// ## Hide a channel  This action allows you to hide a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) from a user's channel list. Hiding a channel gives users the ability to archive channels so that they can focus on channels that need the most attention.  With this API, you can allow users to hide a channel from themselves or from all channel members. You can also determine whether to have the channel remain hidden when a new message is sent to the channel. Note that only group channels can be hidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="hideAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> HideAChannelAsync (string channelUrl, string apiToken = default(string), HideAChannelRequest hideAChannelRequest = default(HideAChannelRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Hide a channel
        /// </summary>
        /// <remarks>
        /// ## Hide a channel  This action allows you to hide a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) from a user's channel list. Hiding a channel gives users the ability to archive channels so that they can focus on channels that need the most attention.  With this API, you can allow users to hide a channel from themselves or from all channel members. You can also determine whether to have the channel remain hidden when a new message is sent to the channel. Note that only group channels can be hidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="hideAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HideAChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), HideAChannelRequest hideAChannelRequest = default(HideAChannelRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Invite as members
        /// </summary>
        /// <remarks>
        /// ## Invite as members  Invites one or more users as members to a group channel. Users can join a group channel immediately after receiving an invitation, without having to accept it. To give users an option to accept or decline an invitation, see [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) or [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference). See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: By default, [blocked users](https://sendbird.com/docs/chat/platform-api/v3/moderation/blocking-users/block-users) are included when sending invitations. If you wish to exclude blocked users, [contact our sales team](https://get.sendbird.com/talk-to-sales.html).      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="inviteAsMembersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InviteAsMembersResponse</returns>
        System.Threading.Tasks.Task<InviteAsMembersResponse> InviteAsMembersAsync (string channelUrl, string apiToken = default(string), InviteAsMembersRequest inviteAsMembersRequest = default(InviteAsMembersRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Invite as members
        /// </summary>
        /// <remarks>
        /// ## Invite as members  Invites one or more users as members to a group channel. Users can join a group channel immediately after receiving an invitation, without having to accept it. To give users an option to accept or decline an invitation, see [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) or [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference). See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: By default, [blocked users](https://sendbird.com/docs/chat/platform-api/v3/moderation/blocking-users/block-users) are included when sending invitations. If you wish to exclude blocked users, [contact our sales team](https://get.sendbird.com/talk-to-sales.html).      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="inviteAsMembersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InviteAsMembersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InviteAsMembersResponse>> InviteAsMembersWithHttpInfoAsync (string channelUrl, string apiToken = default(string), InviteAsMembersRequest inviteAsMembersRequest = default(InviteAsMembersRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Join a channel
        /// </summary>
        /// <remarks>
        /// ## Join a channel  This API allows a user to join a [public](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-group-channel-types) group channel. Users can only join public group channels where the `is_public` property is set to `true` using this API. A single user can join up to 2,000 group channels, and a user who reaches the capacity can’t join a new channel. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdGroupChannelDetail</returns>
        System.Threading.Tasks.Task<SendbirdGroupChannelDetail> JoinAChannelAsync (string channelUrl, string apiToken = default(string), JoinAChannelRequest joinAChannelRequest = default(JoinAChannelRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Join a channel
        /// </summary>
        /// <remarks>
        /// ## Join a channel  This API allows a user to join a [public](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-group-channel-types) group channel. Users can only join public group channels where the `is_public` property is set to `true` using this API. A single user can join up to 2,000 group channels, and a user who reaches the capacity can’t join a new channel. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdGroupChannelDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendbirdGroupChannelDetail>> JoinAChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), JoinAChannelRequest joinAChannelRequest = default(JoinAChannelRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leave a channel
        /// </summary>
        /// <remarks>
        /// ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LeaveAChannelAsync (string channelUrl, string apiToken = default(string), LeaveAChannelRequest leaveAChannelRequest = default(LeaveAChannelRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Leave a channel
        /// </summary>
        /// <remarks>
        /// ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaveAChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), LeaveAChannelRequest leaveAChannelRequest = default(LeaveAChannelRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List channels
        /// </summary>
        /// <remarks>
        /// ## List group channels  This action retrieves a list of [group channels](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use various query parameters to determine the search scope and select what kind of information you want to receive about the queried channels.  If you want to retrieve a list of group channels that a specific user has joined, use the [list group channels by user](https://sendbird.com/docs/chat/platform-api/v3/user/managing-joined-group-channels/list-group-channels-by-user) action under the User section.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/list-group-channels#1-list-group-channels
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token">Specifies a page token that indicates the starting index of a chunk of results. If not specified, the index is set as 0. (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter">Restricts the search scope to only retrieve group channels which have been created after the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="createdBefore">Restricts the search scope to only retrieve group channels which have been created before the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey">Specifies the key of an item in metadata. When a value of the order parameter is set to metadata_value_alphabetical, the results are alphabetically sorted by the value of the item specified by the key. (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom types to filter group channels. URL encoding each type is recommended. If not specified, all channels are returned, regardless of their custom type. (optional)</param>
        /// <param name="customTypeStartswith">Searches for group channels with the custom type which starts with the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="channelUrls">Specifies a comma-separated string of one or more group channel URLs to restrict the search scope. URL encoding each channel URL is recommended. (optional)</param>
        /// <param name="name">Specifies one or more group channel names. (optional)</param>
        /// <param name="nameContains">Searches for group channels whose names contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="nameStartswith">Searches for group channels whose names start with the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersExactlyIn">Searches for group channels with all the specified users as members. The parameter value should consist of user IDs separated by commas.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="membersIncludeIn">Searches for group channels that include one or more users as members among the specified users. The value should consist of user IDs separated by commas or %2C. You can specify up to 60 user IDs.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="queryType">Specifies a logical condition applied to the members_include_in parameter. Acceptable values are either AND or OR. For example, if you specify three members, A, B, and C, in members_include_in, the value of AND returns all channels that include every one of {A. B, C} as members. The value of OR returns channels that include {A}, plus those that include {B}, plus those that include {C}. (Default: AND) (optional)</param>
        /// <param name="membersNickname">Searches for group channels with members whose nicknames match the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersNicknameContains">Searches for group channels with members whose nicknames contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended.  * We recommend using at least three characters for the parameter value for better search efficiency when you design and implement related features. If you would like to allow one or two characters for searching, use members_nickname instead to prevent performance issues. (optional)</param>
        /// <param name="metadataKey">Searches for group channels with metadata containing an item with the specified value as its key. To use this parameter, either the metadata_values parameter or the metadata_value_startswith parameter should be specified. (optional)</param>
        /// <param name="metadataValues">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the value of that item matches one or more values specified by this parameter. The string should be specified with multiple values separated by commas. URL encoding each value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metadataValueStartswith">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the values of that item that start with the specified value of this parameter. URL encoding the value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metacounterKey">Searches for group channels with metacounter containing an item with the specified value as its key. To use this parameter, either the metacounter_values parameter or one of the metacounter_value_gt, metacounter_value_gte, metacounter_value_lt, and metacounter_value_lte parameters should be specified. (optional)</param>
        /// <param name="metacounterValues">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is equal to one or more values specified by this parameter. The string should be specified with multiple values separated by commas. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage">Determines whether to include the sorted_metaarray as one of the last_message’s properties in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupChatListChannelsResponse</returns>
        System.Threading.Tasks.Task<GroupChatListChannelsResponse> ListChannelsAsync (string apiToken, string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), long? createdAfter = default(long?), long? createdBefore = default(long?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List channels
        /// </summary>
        /// <remarks>
        /// ## List group channels  This action retrieves a list of [group channels](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use various query parameters to determine the search scope and select what kind of information you want to receive about the queried channels.  If you want to retrieve a list of group channels that a specific user has joined, use the [list group channels by user](https://sendbird.com/docs/chat/platform-api/v3/user/managing-joined-group-channels/list-group-channels-by-user) action under the User section.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/list-group-channels#1-list-group-channels
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token">Specifies a page token that indicates the starting index of a chunk of results. If not specified, the index is set as 0. (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter">Restricts the search scope to only retrieve group channels which have been created after the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="createdBefore">Restricts the search scope to only retrieve group channels which have been created before the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey">Specifies the key of an item in metadata. When a value of the order parameter is set to metadata_value_alphabetical, the results are alphabetically sorted by the value of the item specified by the key. (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom types to filter group channels. URL encoding each type is recommended. If not specified, all channels are returned, regardless of their custom type. (optional)</param>
        /// <param name="customTypeStartswith">Searches for group channels with the custom type which starts with the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="channelUrls">Specifies a comma-separated string of one or more group channel URLs to restrict the search scope. URL encoding each channel URL is recommended. (optional)</param>
        /// <param name="name">Specifies one or more group channel names. (optional)</param>
        /// <param name="nameContains">Searches for group channels whose names contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="nameStartswith">Searches for group channels whose names start with the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersExactlyIn">Searches for group channels with all the specified users as members. The parameter value should consist of user IDs separated by commas.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="membersIncludeIn">Searches for group channels that include one or more users as members among the specified users. The value should consist of user IDs separated by commas or %2C. You can specify up to 60 user IDs.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="queryType">Specifies a logical condition applied to the members_include_in parameter. Acceptable values are either AND or OR. For example, if you specify three members, A, B, and C, in members_include_in, the value of AND returns all channels that include every one of {A. B, C} as members. The value of OR returns channels that include {A}, plus those that include {B}, plus those that include {C}. (Default: AND) (optional)</param>
        /// <param name="membersNickname">Searches for group channels with members whose nicknames match the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersNicknameContains">Searches for group channels with members whose nicknames contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended.  * We recommend using at least three characters for the parameter value for better search efficiency when you design and implement related features. If you would like to allow one or two characters for searching, use members_nickname instead to prevent performance issues. (optional)</param>
        /// <param name="metadataKey">Searches for group channels with metadata containing an item with the specified value as its key. To use this parameter, either the metadata_values parameter or the metadata_value_startswith parameter should be specified. (optional)</param>
        /// <param name="metadataValues">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the value of that item matches one or more values specified by this parameter. The string should be specified with multiple values separated by commas. URL encoding each value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metadataValueStartswith">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the values of that item that start with the specified value of this parameter. URL encoding the value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metacounterKey">Searches for group channels with metacounter containing an item with the specified value as its key. To use this parameter, either the metacounter_values parameter or one of the metacounter_value_gt, metacounter_value_gte, metacounter_value_lt, and metacounter_value_lte parameters should be specified. (optional)</param>
        /// <param name="metacounterValues">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is equal to one or more values specified by this parameter. The string should be specified with multiple values separated by commas. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage">Determines whether to include the sorted_metaarray as one of the last_message’s properties in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupChatListChannelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupChatListChannelsResponse>> ListChannelsWithHttpInfoAsync (string apiToken, string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), long? createdAfter = default(long?), long? createdBefore = default(long?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// ## List members  Retrieves a list of members of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="userId">Specifies the unique ID of a user. If &#x60;user_id&#x60; is provided, the response will include two additional boolean properties about each user in the members list. - &#x60;is_blocking_me&#x60;: Indicates whether the listed user is blocking the user specified in the user_id parameter. - &#x60;is_blocked_by_me&#x60;: Indicates whether the listed user is blocked by the user specified in the user_id parameter. (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMemberIsMuted"> (optional)</param>
        /// <param name="order">Specifies the method to sort a list of results. Acceptable values are the following: - &#x60;member_nickname_alphabetical&#x60; (default): sorts by the member nicknames in alphabetical order. - &#x60;operator_then_member_alphabetical&#x60;: sorts by the operational role and member nickname in alphabetical order where channel operators are listed before channel members. (optional)</param>
        /// <param name="operatorFilter">Restricts the search scope to only retrieve operators or non-operator members of the channel. Acceptable values are the following: - &#x60;all&#x60; (default): no filter is applied to the list. - &#x60;operator&#x60;: only channel operators are retrieved. - &#x60;nonoperator&#x60;: all channel members, except channel operators, are retrieved. (optional)</param>
        /// <param name="memberStateFilter">Restricts the search scope to retrieve members based on if they have accepted an invitation or if they were invited by a friend. Acceptable values are &#x60;invited_only&#x60;, &#x60;joined_only&#x60;, &#x60;invited_by_friend&#x60;, &#x60;invited_by_non_friend&#x60;, and &#x60;all&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="mutedMemberFilter">Restricts the search scope to retrieve members who are muted or unmuted in the channel. Acceptable values are &#x60;all&#x60;, &#x60;muted&#x60;, and &#x60;unmuted&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="memberActiveModeFilter">Restricts the search scope to retrieve members who are activated or deactivated in the channel. Acceptable values are &#x60;all&#x60;, &#x60;activated&#x60;, and &#x60;deactivated&#x60;. (default: &#x60;activated&#x60;) (optional)</param>
        /// <param name="nicknameStartswith">Searches for members whose nicknames start with the specified value. Urlencoding the value is recommended. (optional)</param>
        /// <param name="includePushPreference">Determines whether to include information about the push preference of each member, such as &#x60;push_enabled&#x60;, &#x60;push_trigger_option&#x60;, and &#x60;do_not_disturb&#x60;. (Default: &#x60;false&#x60;) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupChannelListMembersResponse</returns>
        System.Threading.Tasks.Task<GroupChannelListMembersResponse> ListMembersAsync (string channelUrl, string token = default(string), int? limit = default(int?), string userId = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMemberIsMuted = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string memberActiveModeFilter = default(string), string nicknameStartswith = default(string), bool? includePushPreference = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List members
        /// </summary>
        /// <remarks>
        /// ## List members  Retrieves a list of members of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="userId">Specifies the unique ID of a user. If &#x60;user_id&#x60; is provided, the response will include two additional boolean properties about each user in the members list. - &#x60;is_blocking_me&#x60;: Indicates whether the listed user is blocking the user specified in the user_id parameter. - &#x60;is_blocked_by_me&#x60;: Indicates whether the listed user is blocked by the user specified in the user_id parameter. (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMemberIsMuted"> (optional)</param>
        /// <param name="order">Specifies the method to sort a list of results. Acceptable values are the following: - &#x60;member_nickname_alphabetical&#x60; (default): sorts by the member nicknames in alphabetical order. - &#x60;operator_then_member_alphabetical&#x60;: sorts by the operational role and member nickname in alphabetical order where channel operators are listed before channel members. (optional)</param>
        /// <param name="operatorFilter">Restricts the search scope to only retrieve operators or non-operator members of the channel. Acceptable values are the following: - &#x60;all&#x60; (default): no filter is applied to the list. - &#x60;operator&#x60;: only channel operators are retrieved. - &#x60;nonoperator&#x60;: all channel members, except channel operators, are retrieved. (optional)</param>
        /// <param name="memberStateFilter">Restricts the search scope to retrieve members based on if they have accepted an invitation or if they were invited by a friend. Acceptable values are &#x60;invited_only&#x60;, &#x60;joined_only&#x60;, &#x60;invited_by_friend&#x60;, &#x60;invited_by_non_friend&#x60;, and &#x60;all&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="mutedMemberFilter">Restricts the search scope to retrieve members who are muted or unmuted in the channel. Acceptable values are &#x60;all&#x60;, &#x60;muted&#x60;, and &#x60;unmuted&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="memberActiveModeFilter">Restricts the search scope to retrieve members who are activated or deactivated in the channel. Acceptable values are &#x60;all&#x60;, &#x60;activated&#x60;, and &#x60;deactivated&#x60;. (default: &#x60;activated&#x60;) (optional)</param>
        /// <param name="nicknameStartswith">Searches for members whose nicknames start with the specified value. Urlencoding the value is recommended. (optional)</param>
        /// <param name="includePushPreference">Determines whether to include information about the push preference of each member, such as &#x60;push_enabled&#x60;, &#x60;push_trigger_option&#x60;, and &#x60;do_not_disturb&#x60;. (Default: &#x60;false&#x60;) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupChannelListMembersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupChannelListMembersResponse>> ListMembersWithHttpInfoAsync (string channelUrl, string token = default(string), int? limit = default(int?), string userId = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMemberIsMuted = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string memberActiveModeFilter = default(string), string nicknameStartswith = default(string), bool? includePushPreference = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// ## List operators  You can retrieve a list of operators of a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/list-operators-of-a-group-channel#1-list-operators-of-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListOperatorsResponse</returns>
        System.Threading.Tasks.Task<ListOperatorsResponse> ListOperatorsAsync (string channelUrl, string token = default(string), int? limit = default(int?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List operators
        /// </summary>
        /// <remarks>
        /// ## List operators  You can retrieve a list of operators of a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/list-operators-of-a-group-channel#1-list-operators-of-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListOperatorsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOperatorsResponse>> ListOperatorsWithHttpInfoAsync (string channelUrl, string token = default(string), int? limit = default(int?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Register operators to a group channel
        /// </summary>
        /// <remarks>
        /// ## Register operators to a group channel  You can register one or more operators to a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/register-operators-to-a-group-channel#1-register-operators-to-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerOperatorsToAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RegisterOperatorsToAGroupChannelAsync (string channelUrl, string apiToken = default(string), RegisterOperatorsToAGroupChannelRequest registerOperatorsToAGroupChannelRequest = default(RegisterOperatorsToAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Register operators to a group channel
        /// </summary>
        /// <remarks>
        /// ## Register operators to a group channel  You can register one or more operators to a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/register-operators-to-a-group-channel#1-register-operators-to-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerOperatorsToAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterOperatorsToAGroupChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), RegisterOperatorsToAGroupChannelRequest registerOperatorsToAGroupChannelRequest = default(RegisterOperatorsToAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reset chat history
        /// </summary>
        /// <remarks>
        /// ## Reset chat history  This action resets the properties related to a specific user's chat history in a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel), clearing existing messages in a channel from only the specified user's end. Because this action doesn't delete messages from the Sendbird database, other members in the channel can still retrieve and see the messages.  This action clears the messages for the specified user by updating the `last_message` and `read_receipt` properties of the [group channel resource](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-list-of-properties-for-group-channels) in addition to other internally managed data such as the count of a user's unread messages.  Using the `reset_all` property, you can also reset the properties related to the chat history of all members in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/reset-chat-history#1-reset-chat-history
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="resetChatHistoryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResetChatHistoryResponse</returns>
        System.Threading.Tasks.Task<ResetChatHistoryResponse> ResetChatHistoryAsync (string channelUrl, string apiToken = default(string), ResetChatHistoryRequest resetChatHistoryRequest = default(ResetChatHistoryRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reset chat history
        /// </summary>
        /// <remarks>
        /// ## Reset chat history  This action resets the properties related to a specific user's chat history in a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel), clearing existing messages in a channel from only the specified user's end. Because this action doesn't delete messages from the Sendbird database, other members in the channel can still retrieve and see the messages.  This action clears the messages for the specified user by updating the `last_message` and `read_receipt` properties of the [group channel resource](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-list-of-properties-for-group-channels) in addition to other internally managed data such as the count of a user's unread messages.  Using the `reset_all` property, you can also reset the properties related to the chat history of all members in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/reset-chat-history#1-reset-chat-history
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="resetChatHistoryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResetChatHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResetChatHistoryResponse>> ResetChatHistoryWithHttpInfoAsync (string channelUrl, string apiToken = default(string), ResetChatHistoryRequest resetChatHistoryRequest = default(ResetChatHistoryRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Start typing indicators
        /// </summary>
        /// <remarks>
        /// ## Start typing indicators  You can start showing a typing indicator using this API. Seeing whether other users are typing can help a more interactive conversation environment by showing real-time engagement of other users.  If you're looking for an easy way to show typing indicators on your app, check out Sendbird UIKit for a ready-to-use UI feature that can be customized to fit your needs.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/start-typing-indicators#1-start-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> StartTypingIndicatorsAsync (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Start typing indicators
        /// </summary>
        /// <remarks>
        /// ## Start typing indicators  You can start showing a typing indicator using this API. Seeing whether other users are typing can help a more interactive conversation environment by showing real-time engagement of other users.  If you're looking for an easy way to show typing indicators on your app, check out Sendbird UIKit for a ready-to-use UI feature that can be customized to fit your needs.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/start-typing-indicators#1-start-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StartTypingIndicatorsWithHttpInfoAsync (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Stop typing indicators
        /// </summary>
        /// <remarks>
        /// ## Stop typing indicators  You can stop showing a typing indicator using this API. To signal that a user is no longer typing, you can let the indicator disappear when the user sends a message or completely deletes the message text.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/stop-typing-indicators#1-stop-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> StopTypingIndicatorsAsync (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Stop typing indicators
        /// </summary>
        /// <remarks>
        /// ## Stop typing indicators  You can stop showing a typing indicator using this API. To signal that a user is no longer typing, you can let the indicator disappear when the user sends a message or completely deletes the message text.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/stop-typing-indicators#1-stop-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StopTypingIndicatorsWithHttpInfoAsync (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Unhide a channel
        /// </summary>
        /// <remarks>
        /// ## Unhide a channel  This action lets a hidden [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) reappear on the channel list of a specific user or every member in the group channel. Hiding or unhiding a channel lets users organize their channel list based on those that require the most attention. Note that only group channels can be hidden or unhidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to unhide or unarchive.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UnhideAChannelAsync (string channelUrl, string userId, bool? shouldUnhideAll = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unhide a channel
        /// </summary>
        /// <remarks>
        /// ## Unhide a channel  This action lets a hidden [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) reappear on the channel list of a specific user or every member in the group channel. Hiding or unhiding a channel lets users organize their channel list based on those that require the most attention. Note that only group channels can be hidden or unhidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to unhide or unarchive.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnhideAChannelWithHttpInfoAsync (string channelUrl, string userId, bool? shouldUnhideAll = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a group channel
        /// </summary>
        /// <remarks>
        /// ## Update a group channel  You can update information about a group channel or a Supergroup channel using this API. You can't make any changes to the members of a channel with this API. To change members, see [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) instead. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-a-group-channel#1-update-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdGroupChannelDetail</returns>
        System.Threading.Tasks.Task<SendbirdGroupChannelDetail> UpdateAGroupChannelAsync (string channelUrl, string apiToken = default(string), UpdateAGroupChannelRequest updateAGroupChannelRequest = default(UpdateAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a group channel
        /// </summary>
        /// <remarks>
        /// ## Update a group channel  You can update information about a group channel or a Supergroup channel using this API. You can't make any changes to the members of a channel with this API. To change members, see [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) instead. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-a-group-channel#1-update-a-group-channel
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdGroupChannelDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendbirdGroupChannelDetail>> UpdateAGroupChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), UpdateAGroupChannelRequest updateAGroupChannelRequest = default(UpdateAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupChannelApi : IGroupChannelApi
    {
        private sendbird_platform_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupChannelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupChannelApi(String basePath)
        {
            this.Configuration = new sendbird_platform_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupChannelApi"/> class
        /// </summary>
        /// <returns></returns>
        public GroupChannelApi()
        {
            this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupChannelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupChannelApi(sendbird_platform_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird_platform_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird_platform_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accept an invitation ## Accept an invitation  Accepts an invitation from a group channel for a user to join. A single user may join up to 2,000 group channels, and any invitation to a user who is at capacity will be automatically canceled. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: This action is only available when the `auto_accept` property of an application is set to **false**. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) action, or the [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference) action.      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="acceptAnInvitationRequest"> (optional)</param>
        /// <returns>SendbirdGroupChannelDetail</returns>
        public SendbirdGroupChannelDetail AcceptAnInvitation (string channelUrl, string apiToken = default(string), AcceptAnInvitationRequest acceptAnInvitationRequest = default(AcceptAnInvitationRequest))
        {
             ApiResponse<SendbirdGroupChannelDetail> localVarResponse = AcceptAnInvitationWithHttpInfo(channelUrl, apiToken, acceptAnInvitationRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept an invitation ## Accept an invitation  Accepts an invitation from a group channel for a user to join. A single user may join up to 2,000 group channels, and any invitation to a user who is at capacity will be automatically canceled. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: This action is only available when the `auto_accept` property of an application is set to **false**. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) action, or the [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference) action.      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="acceptAnInvitationRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdGroupChannelDetail</returns>
        public ApiResponse<SendbirdGroupChannelDetail> AcceptAnInvitationWithHttpInfo (string channelUrl, string apiToken = default(string), AcceptAnInvitationRequest acceptAnInvitationRequest = default(AcceptAnInvitationRequest))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->AcceptAnInvitation");

            var localVarPath = "/v3/group_channels/{channel_url}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (acceptAnInvitationRequest != null && acceptAnInvitationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(acceptAnInvitationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = acceptAnInvitationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptAnInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdGroupChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdGroupChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdGroupChannelDetail)));
        }

        /// <summary>
        /// Accept an invitation ## Accept an invitation  Accepts an invitation from a group channel for a user to join. A single user may join up to 2,000 group channels, and any invitation to a user who is at capacity will be automatically canceled. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: This action is only available when the `auto_accept` property of an application is set to **false**. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) action, or the [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference) action.      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="acceptAnInvitationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdGroupChannelDetail</returns>
        public async System.Threading.Tasks.Task<SendbirdGroupChannelDetail> AcceptAnInvitationAsync (string channelUrl, string apiToken = default(string), AcceptAnInvitationRequest acceptAnInvitationRequest = default(AcceptAnInvitationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendbirdGroupChannelDetail> localVarResponse = await AcceptAnInvitationWithHttpInfoAsync(channelUrl, apiToken, acceptAnInvitationRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept an invitation ## Accept an invitation  Accepts an invitation from a group channel for a user to join. A single user may join up to 2,000 group channels, and any invitation to a user who is at capacity will be automatically canceled. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: This action is only available when the `auto_accept` property of an application is set to **false**. You can change the value of the property using the [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) action, or the [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference) action.      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/accept-an-invitation-channel#1-accept-an-invitation)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="acceptAnInvitationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdGroupChannelDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendbirdGroupChannelDetail>> AcceptAnInvitationWithHttpInfoAsync (string channelUrl, string apiToken = default(string), AcceptAnInvitationRequest acceptAnInvitationRequest = default(AcceptAnInvitationRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->AcceptAnInvitation");

            var localVarPath = "/v3/group_channels/{channel_url}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (acceptAnInvitationRequest != null && acceptAnInvitationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(acceptAnInvitationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = acceptAnInvitationRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptAnInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdGroupChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdGroupChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdGroupChannelDetail)));
        }

        /// <summary>
        /// Cancel the registration of operators ## Unregister operators from a group channel  You can unregister operators in a group channel but keep them in the channel as members using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/unregister-operators-from-a-group-channel#1-unregister-operators-from-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="operatorIds">Specifies an array of one or more operator IDs to unregister from the channel. The operators in this array remain as participants of the channel after losing their operational roles. Urlencoding each operator ID is recommended. An example of a Urlencoded array would be ?operator_ids&#x3D;urlencoded_id_1,urlencoded_id_2.</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        public Object CancelTheRegistrationOfOperators (string channelUrl, string operatorIds, bool? deleteAll = default(bool?), string apiToken = default(string))
        {
             ApiResponse<Object> localVarResponse = CancelTheRegistrationOfOperatorsWithHttpInfo(channelUrl, operatorIds, deleteAll, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel the registration of operators ## Unregister operators from a group channel  You can unregister operators in a group channel but keep them in the channel as members using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/unregister-operators-from-a-group-channel#1-unregister-operators-from-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="operatorIds">Specifies an array of one or more operator IDs to unregister from the channel. The operators in this array remain as participants of the channel after losing their operational roles. Urlencoding each operator ID is recommended. An example of a Urlencoded array would be ?operator_ids&#x3D;urlencoded_id_1,urlencoded_id_2.</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> CancelTheRegistrationOfOperatorsWithHttpInfo (string channelUrl, string operatorIds, bool? deleteAll = default(bool?), string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->CancelTheRegistrationOfOperators");
            // verify the required parameter 'operatorIds' is set
            if (operatorIds == null)
                throw new ApiException(400, "Missing required parameter 'operatorIds' when calling GroupChannelApi->CancelTheRegistrationOfOperators");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (operatorIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_ids", operatorIds)); // query parameter
            if (deleteAll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_all", deleteAll)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelTheRegistrationOfOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Cancel the registration of operators ## Unregister operators from a group channel  You can unregister operators in a group channel but keep them in the channel as members using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/unregister-operators-from-a-group-channel#1-unregister-operators-from-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="operatorIds">Specifies an array of one or more operator IDs to unregister from the channel. The operators in this array remain as participants of the channel after losing their operational roles. Urlencoding each operator ID is recommended. An example of a Urlencoded array would be ?operator_ids&#x3D;urlencoded_id_1,urlencoded_id_2.</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CancelTheRegistrationOfOperatorsAsync (string channelUrl, string operatorIds, bool? deleteAll = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await CancelTheRegistrationOfOperatorsWithHttpInfoAsync(channelUrl, operatorIds, deleteAll, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel the registration of operators ## Unregister operators from a group channel  You can unregister operators in a group channel but keep them in the channel as members using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/unregister-operators-from-a-group-channel#1-unregister-operators-from-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to cancel the registration of operators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="operatorIds">Specifies an array of one or more operator IDs to unregister from the channel. The operators in this array remain as participants of the channel after losing their operational roles. Urlencoding each operator ID is recommended. An example of a Urlencoded array would be ?operator_ids&#x3D;urlencoded_id_1,urlencoded_id_2.</param>
        /// <param name="deleteAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelTheRegistrationOfOperatorsWithHttpInfoAsync (string channelUrl, string operatorIds, bool? deleteAll = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->CancelTheRegistrationOfOperators");
            // verify the required parameter 'operatorIds' is set
            if (operatorIds == null)
                throw new ApiException(400, "Missing required parameter 'operatorIds' when calling GroupChannelApi->CancelTheRegistrationOfOperators");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (operatorIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_ids", operatorIds)); // query parameter
            if (deleteAll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delete_all", deleteAll)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelTheRegistrationOfOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Check if member ## Check if user is a member  Checks if a user is a member of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>CheckIfMemberResponse</returns>
        public CheckIfMemberResponse CheckIfMember (string channelUrl, string userId, string apiToken = default(string))
        {
             ApiResponse<CheckIfMemberResponse> localVarResponse = CheckIfMemberWithHttpInfo(channelUrl, userId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if member ## Check if user is a member  Checks if a user is a member of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of CheckIfMemberResponse</returns>
        public ApiResponse<CheckIfMemberResponse> CheckIfMemberWithHttpInfo (string channelUrl, string userId, string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->CheckIfMember");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupChannelApi->CheckIfMember");

            var localVarPath = "/v3/group_channels/{channel_url}/members/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckIfMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckIfMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CheckIfMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckIfMemberResponse)));
        }

        /// <summary>
        /// Check if member ## Check if user is a member  Checks if a user is a member of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CheckIfMemberResponse</returns>
        public async System.Threading.Tasks.Task<CheckIfMemberResponse> CheckIfMemberAsync (string channelUrl, string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CheckIfMemberResponse> localVarResponse = await CheckIfMemberWithHttpInfoAsync(channelUrl, userId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if member ## Check if user is a member  Checks if a user is a member of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/check-if-user-is-a-member#1-check-if-user-is-a-member)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CheckIfMemberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckIfMemberResponse>> CheckIfMemberWithHttpInfoAsync (string channelUrl, string userId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->CheckIfMember");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupChannelApi->CheckIfMember");

            var localVarPath = "/v3/group_channels/{channel_url}/members/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckIfMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckIfMemberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CheckIfMemberResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckIfMemberResponse)));
        }

        /// <summary>
        /// Create a group channel ## Create a group channel  You can create a group channel for 1-to-1 and 1-to-N conversations. By default, group channels are used for conversations between up to 100 members. This number can stretch up to tens of thousands in Supergroup channels. Group channels can either be private and invite only, or public. They support typing indicators, unread count and read receipts, allowing for an interactive chat experience. A user can join up to 2000 group channels, and higher numbers would negatively impact the performance for the end user. The Chat history is turned off by default and its settings can be changed on Sendbird Dashboard by going to Settings > Chat > Channels > Group channels > Chat history. To learn more about group channels, see Channel Overview.  > If you are seeing the error message Maximum \"channel join\" count reached., then consider deleting channels that are no longer used. For situations where an agent connects with many customers such as support, delivery logistics or sales, we recommend using Sendbird Desk.  https://sendbird.com/docs/chat/platform-api/v3/channel/creating-a-channel/create-a-group-channel#1-create-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createAGroupChannelRequest"> (optional)</param>
        /// <returns>SendbirdGroupChannelDetail</returns>
        public SendbirdGroupChannelDetail CreateAGroupChannel (string apiToken = default(string), CreateAGroupChannelRequest createAGroupChannelRequest = default(CreateAGroupChannelRequest))
        {
             ApiResponse<SendbirdGroupChannelDetail> localVarResponse = CreateAGroupChannelWithHttpInfo(apiToken, createAGroupChannelRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a group channel ## Create a group channel  You can create a group channel for 1-to-1 and 1-to-N conversations. By default, group channels are used for conversations between up to 100 members. This number can stretch up to tens of thousands in Supergroup channels. Group channels can either be private and invite only, or public. They support typing indicators, unread count and read receipts, allowing for an interactive chat experience. A user can join up to 2000 group channels, and higher numbers would negatively impact the performance for the end user. The Chat history is turned off by default and its settings can be changed on Sendbird Dashboard by going to Settings > Chat > Channels > Group channels > Chat history. To learn more about group channels, see Channel Overview.  > If you are seeing the error message Maximum \"channel join\" count reached., then consider deleting channels that are no longer used. For situations where an agent connects with many customers such as support, delivery logistics or sales, we recommend using Sendbird Desk.  https://sendbird.com/docs/chat/platform-api/v3/channel/creating-a-channel/create-a-group-channel#1-create-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createAGroupChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdGroupChannelDetail</returns>
        public ApiResponse<SendbirdGroupChannelDetail> CreateAGroupChannelWithHttpInfo (string apiToken = default(string), CreateAGroupChannelRequest createAGroupChannelRequest = default(CreateAGroupChannelRequest))
        {

            var localVarPath = "/v3/group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createAGroupChannelRequest != null && createAGroupChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAGroupChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAGroupChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdGroupChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdGroupChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdGroupChannelDetail)));
        }

        /// <summary>
        /// Create a group channel ## Create a group channel  You can create a group channel for 1-to-1 and 1-to-N conversations. By default, group channels are used for conversations between up to 100 members. This number can stretch up to tens of thousands in Supergroup channels. Group channels can either be private and invite only, or public. They support typing indicators, unread count and read receipts, allowing for an interactive chat experience. A user can join up to 2000 group channels, and higher numbers would negatively impact the performance for the end user. The Chat history is turned off by default and its settings can be changed on Sendbird Dashboard by going to Settings > Chat > Channels > Group channels > Chat history. To learn more about group channels, see Channel Overview.  > If you are seeing the error message Maximum \"channel join\" count reached., then consider deleting channels that are no longer used. For situations where an agent connects with many customers such as support, delivery logistics or sales, we recommend using Sendbird Desk.  https://sendbird.com/docs/chat/platform-api/v3/channel/creating-a-channel/create-a-group-channel#1-create-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdGroupChannelDetail</returns>
        public async System.Threading.Tasks.Task<SendbirdGroupChannelDetail> CreateAGroupChannelAsync (string apiToken = default(string), CreateAGroupChannelRequest createAGroupChannelRequest = default(CreateAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendbirdGroupChannelDetail> localVarResponse = await CreateAGroupChannelWithHttpInfoAsync(apiToken, createAGroupChannelRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a group channel ## Create a group channel  You can create a group channel for 1-to-1 and 1-to-N conversations. By default, group channels are used for conversations between up to 100 members. This number can stretch up to tens of thousands in Supergroup channels. Group channels can either be private and invite only, or public. They support typing indicators, unread count and read receipts, allowing for an interactive chat experience. A user can join up to 2000 group channels, and higher numbers would negatively impact the performance for the end user. The Chat history is turned off by default and its settings can be changed on Sendbird Dashboard by going to Settings > Chat > Channels > Group channels > Chat history. To learn more about group channels, see Channel Overview.  > If you are seeing the error message Maximum \"channel join\" count reached., then consider deleting channels that are no longer used. For situations where an agent connects with many customers such as support, delivery logistics or sales, we recommend using Sendbird Desk.  https://sendbird.com/docs/chat/platform-api/v3/channel/creating-a-channel/create-a-group-channel#1-create-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdGroupChannelDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendbirdGroupChannelDetail>> CreateAGroupChannelWithHttpInfoAsync (string apiToken = default(string), CreateAGroupChannelRequest createAGroupChannelRequest = default(CreateAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createAGroupChannelRequest != null && createAGroupChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createAGroupChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createAGroupChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdGroupChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdGroupChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdGroupChannelDetail)));
        }

        /// <summary>
        /// Delete a group channel ## Delete a group channel  You can delete a group channel or a Supergroup channel using this API. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteAGroupChannel (string channelUrl, string apiToken = default(string))
        {
             ApiResponse<Object> localVarResponse = DeleteAGroupChannelWithHttpInfo(channelUrl, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a group channel ## Delete a group channel  You can delete a group channel or a Supergroup channel using this API. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteAGroupChannelWithHttpInfo (string channelUrl, string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->DeleteAGroupChannel");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete a group channel ## Delete a group channel  You can delete a group channel or a Supergroup channel using this API. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteAGroupChannelAsync (string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteAGroupChannelWithHttpInfoAsync(channelUrl, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a group channel ## Delete a group channel  You can delete a group channel or a Supergroup channel using this API. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/delete-a-group-channel#1-delete-a-group-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAGroupChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->DeleteAGroupChannel");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get a group channel ## Get a group channel  This action retrieves information about a specific [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use the optional query parameters to determine whether to include delivery receipt, read receipt, or member information in the response.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/get-a-group-channel#1-get-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="memberActiveMode">Restricts the member list to members who are activated or deactivated in the channel. This parameter is only effective if the parameter show_member is true. Acceptable values are all, activated, and deactivated. (default: all) (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>GetAGroupChannelResponse</returns>
        public GetAGroupChannelResponse GetAGroupChannel (string channelUrl, bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), string memberActiveMode = default(string), string userId = default(string), string apiToken = default(string))
        {
             ApiResponse<GetAGroupChannelResponse> localVarResponse = GetAGroupChannelWithHttpInfo(channelUrl, showDeliveryReceipt, showReadReceipt, showMember, memberActiveMode, userId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a group channel ## Get a group channel  This action retrieves information about a specific [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use the optional query parameters to determine whether to include delivery receipt, read receipt, or member information in the response.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/get-a-group-channel#1-get-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="memberActiveMode">Restricts the member list to members who are activated or deactivated in the channel. This parameter is only effective if the parameter show_member is true. Acceptable values are all, activated, and deactivated. (default: all) (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of GetAGroupChannelResponse</returns>
        public ApiResponse<GetAGroupChannelResponse> GetAGroupChannelWithHttpInfo (string channelUrl, bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), string memberActiveMode = default(string), string userId = default(string), string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GetAGroupChannel");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (memberActiveMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_active_mode", memberActiveMode)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAGroupChannelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAGroupChannelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAGroupChannelResponse)));
        }

        /// <summary>
        /// Get a group channel ## Get a group channel  This action retrieves information about a specific [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use the optional query parameters to determine whether to include delivery receipt, read receipt, or member information in the response.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/get-a-group-channel#1-get-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="memberActiveMode">Restricts the member list to members who are activated or deactivated in the channel. This parameter is only effective if the parameter show_member is true. Acceptable values are all, activated, and deactivated. (default: all) (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetAGroupChannelResponse</returns>
        public async System.Threading.Tasks.Task<GetAGroupChannelResponse> GetAGroupChannelAsync (string channelUrl, bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), string memberActiveMode = default(string), string userId = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetAGroupChannelResponse> localVarResponse = await GetAGroupChannelWithHttpInfoAsync(channelUrl, showDeliveryReceipt, showReadReceipt, showMember, memberActiveMode, userId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a group channel ## Get a group channel  This action retrieves information about a specific [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use the optional query parameters to determine whether to include delivery receipt, read receipt, or member information in the response.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/get-a-group-channel#1-get-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="memberActiveMode">Restricts the member list to members who are activated or deactivated in the channel. This parameter is only effective if the parameter show_member is true. Acceptable values are all, activated, and deactivated. (default: all) (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetAGroupChannelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAGroupChannelResponse>> GetAGroupChannelWithHttpInfoAsync (string channelUrl, bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMember = default(bool?), string memberActiveMode = default(string), string userId = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->GetAGroupChannel");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (memberActiveMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_active_mode", memberActiveMode)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAGroupChannelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAGroupChannelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAGroupChannelResponse)));
        }

        /// <summary>
        /// Hide a channel ## Hide a channel  This action allows you to hide a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) from a user's channel list. Hiding a channel gives users the ability to archive channels so that they can focus on channels that need the most attention.  With this API, you can allow users to hide a channel from themselves or from all channel members. You can also determine whether to have the channel remain hidden when a new message is sent to the channel. Note that only group channels can be hidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="hideAChannelRequest"> (optional)</param>
        /// <returns>Object</returns>
        public Object HideAChannel (string channelUrl, string apiToken = default(string), HideAChannelRequest hideAChannelRequest = default(HideAChannelRequest))
        {
             ApiResponse<Object> localVarResponse = HideAChannelWithHttpInfo(channelUrl, apiToken, hideAChannelRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Hide a channel ## Hide a channel  This action allows you to hide a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) from a user's channel list. Hiding a channel gives users the ability to archive channels so that they can focus on channels that need the most attention.  With this API, you can allow users to hide a channel from themselves or from all channel members. You can also determine whether to have the channel remain hidden when a new message is sent to the channel. Note that only group channels can be hidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="hideAChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> HideAChannelWithHttpInfo (string channelUrl, string apiToken = default(string), HideAChannelRequest hideAChannelRequest = default(HideAChannelRequest))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->HideAChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (hideAChannelRequest != null && hideAChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(hideAChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hideAChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HideAChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Hide a channel ## Hide a channel  This action allows you to hide a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) from a user's channel list. Hiding a channel gives users the ability to archive channels so that they can focus on channels that need the most attention.  With this API, you can allow users to hide a channel from themselves or from all channel members. You can also determine whether to have the channel remain hidden when a new message is sent to the channel. Note that only group channels can be hidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="hideAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> HideAChannelAsync (string channelUrl, string apiToken = default(string), HideAChannelRequest hideAChannelRequest = default(HideAChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await HideAChannelWithHttpInfoAsync(channelUrl, apiToken, hideAChannelRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Hide a channel ## Hide a channel  This action allows you to hide a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) from a user's channel list. Hiding a channel gives users the ability to archive channels so that they can focus on channels that need the most attention.  With this API, you can allow users to hide a channel from themselves or from all channel members. You can also determine whether to have the channel remain hidden when a new message is sent to the channel. Note that only group channels can be hidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/hide-a-channel#1-hide-a-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="hideAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HideAChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), HideAChannelRequest hideAChannelRequest = default(HideAChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->HideAChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (hideAChannelRequest != null && hideAChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(hideAChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hideAChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HideAChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Invite as members ## Invite as members  Invites one or more users as members to a group channel. Users can join a group channel immediately after receiving an invitation, without having to accept it. To give users an option to accept or decline an invitation, see [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) or [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference). See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: By default, [blocked users](https://sendbird.com/docs/chat/platform-api/v3/moderation/blocking-users/block-users) are included when sending invitations. If you wish to exclude blocked users, [contact our sales team](https://get.sendbird.com/talk-to-sales.html).      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="inviteAsMembersRequest"> (optional)</param>
        /// <returns>InviteAsMembersResponse</returns>
        public InviteAsMembersResponse InviteAsMembers (string channelUrl, string apiToken = default(string), InviteAsMembersRequest inviteAsMembersRequest = default(InviteAsMembersRequest))
        {
             ApiResponse<InviteAsMembersResponse> localVarResponse = InviteAsMembersWithHttpInfo(channelUrl, apiToken, inviteAsMembersRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invite as members ## Invite as members  Invites one or more users as members to a group channel. Users can join a group channel immediately after receiving an invitation, without having to accept it. To give users an option to accept or decline an invitation, see [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) or [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference). See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: By default, [blocked users](https://sendbird.com/docs/chat/platform-api/v3/moderation/blocking-users/block-users) are included when sending invitations. If you wish to exclude blocked users, [contact our sales team](https://get.sendbird.com/talk-to-sales.html).      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="inviteAsMembersRequest"> (optional)</param>
        /// <returns>ApiResponse of InviteAsMembersResponse</returns>
        public ApiResponse<InviteAsMembersResponse> InviteAsMembersWithHttpInfo (string channelUrl, string apiToken = default(string), InviteAsMembersRequest inviteAsMembersRequest = default(InviteAsMembersRequest))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->InviteAsMembers");

            var localVarPath = "/v3/group_channels/{channel_url}/invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (inviteAsMembersRequest != null && inviteAsMembersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inviteAsMembersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inviteAsMembersRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteAsMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InviteAsMembersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InviteAsMembersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InviteAsMembersResponse)));
        }

        /// <summary>
        /// Invite as members ## Invite as members  Invites one or more users as members to a group channel. Users can join a group channel immediately after receiving an invitation, without having to accept it. To give users an option to accept or decline an invitation, see [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) or [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference). See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: By default, [blocked users](https://sendbird.com/docs/chat/platform-api/v3/moderation/blocking-users/block-users) are included when sending invitations. If you wish to exclude blocked users, [contact our sales team](https://get.sendbird.com/talk-to-sales.html).      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="inviteAsMembersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InviteAsMembersResponse</returns>
        public async System.Threading.Tasks.Task<InviteAsMembersResponse> InviteAsMembersAsync (string channelUrl, string apiToken = default(string), InviteAsMembersRequest inviteAsMembersRequest = default(InviteAsMembersRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InviteAsMembersResponse> localVarResponse = await InviteAsMembersWithHttpInfoAsync(channelUrl, apiToken, inviteAsMembersRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invite as members ## Invite as members  Invites one or more users as members to a group channel. Users can join a group channel immediately after receiving an invitation, without having to accept it. To give users an option to accept or decline an invitation, see [update default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference) or [update channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference). See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  > **Note**: By default, [blocked users](https://sendbird.com/docs/chat/platform-api/v3/moderation/blocking-users/block-users) are included when sending invitations. If you wish to exclude blocked users, [contact our sales team](https://get.sendbird.com/talk-to-sales.html).      [https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel#1-invite-as-members)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="inviteAsMembersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InviteAsMembersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InviteAsMembersResponse>> InviteAsMembersWithHttpInfoAsync (string channelUrl, string apiToken = default(string), InviteAsMembersRequest inviteAsMembersRequest = default(InviteAsMembersRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->InviteAsMembers");

            var localVarPath = "/v3/group_channels/{channel_url}/invite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (inviteAsMembersRequest != null && inviteAsMembersRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inviteAsMembersRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inviteAsMembersRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteAsMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InviteAsMembersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InviteAsMembersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InviteAsMembersResponse)));
        }

        /// <summary>
        /// Join a channel ## Join a channel  This API allows a user to join a [public](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-group-channel-types) group channel. Users can only join public group channels where the `is_public` property is set to `true` using this API. A single user can join up to 2,000 group channels, and a user who reaches the capacity can’t join a new channel. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinAChannelRequest"> (optional)</param>
        /// <returns>SendbirdGroupChannelDetail</returns>
        public SendbirdGroupChannelDetail JoinAChannel (string channelUrl, string apiToken = default(string), JoinAChannelRequest joinAChannelRequest = default(JoinAChannelRequest))
        {
             ApiResponse<SendbirdGroupChannelDetail> localVarResponse = JoinAChannelWithHttpInfo(channelUrl, apiToken, joinAChannelRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Join a channel ## Join a channel  This API allows a user to join a [public](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-group-channel-types) group channel. Users can only join public group channels where the `is_public` property is set to `true` using this API. A single user can join up to 2,000 group channels, and a user who reaches the capacity can’t join a new channel. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinAChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdGroupChannelDetail</returns>
        public ApiResponse<SendbirdGroupChannelDetail> JoinAChannelWithHttpInfo (string channelUrl, string apiToken = default(string), JoinAChannelRequest joinAChannelRequest = default(JoinAChannelRequest))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->JoinAChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (joinAChannelRequest != null && joinAChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(joinAChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = joinAChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinAChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdGroupChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdGroupChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdGroupChannelDetail)));
        }

        /// <summary>
        /// Join a channel ## Join a channel  This API allows a user to join a [public](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-group-channel-types) group channel. Users can only join public group channels where the `is_public` property is set to `true` using this API. A single user can join up to 2,000 group channels, and a user who reaches the capacity can’t join a new channel. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdGroupChannelDetail</returns>
        public async System.Threading.Tasks.Task<SendbirdGroupChannelDetail> JoinAChannelAsync (string channelUrl, string apiToken = default(string), JoinAChannelRequest joinAChannelRequest = default(JoinAChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendbirdGroupChannelDetail> localVarResponse = await JoinAChannelWithHttpInfoAsync(channelUrl, apiToken, joinAChannelRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Join a channel ## Join a channel  This API allows a user to join a [public](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-group-channel-types) group channel. Users can only join public group channels where the `is_public` property is set to `true` using this API. A single user can join up to 2,000 group channels, and a user who reaches the capacity can’t join a new channel. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/join-a-channel#1-join-a-channel)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdGroupChannelDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendbirdGroupChannelDetail>> JoinAChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), JoinAChannelRequest joinAChannelRequest = default(JoinAChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->JoinAChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (joinAChannelRequest != null && joinAChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(joinAChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = joinAChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinAChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdGroupChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdGroupChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdGroupChannelDetail)));
        }

        /// <summary>
        /// Leave a channel ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveAChannelRequest"> (optional)</param>
        /// <returns>Object</returns>
        public Object LeaveAChannel (string channelUrl, string apiToken = default(string), LeaveAChannelRequest leaveAChannelRequest = default(LeaveAChannelRequest))
        {
             ApiResponse<Object> localVarResponse = LeaveAChannelWithHttpInfo(channelUrl, apiToken, leaveAChannelRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leave a channel ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveAChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> LeaveAChannelWithHttpInfo (string channelUrl, string apiToken = default(string), LeaveAChannelRequest leaveAChannelRequest = default(LeaveAChannelRequest))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->LeaveAChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (leaveAChannelRequest != null && leaveAChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(leaveAChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = leaveAChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveAChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Leave a channel ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LeaveAChannelAsync (string channelUrl, string apiToken = default(string), LeaveAChannelRequest leaveAChannelRequest = default(LeaveAChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await LeaveAChannelWithHttpInfoAsync(channelUrl, apiToken, leaveAChannelRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leave a channel ## Leave a channel  Makes one or more members leave a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-leave-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="leaveAChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LeaveAChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), LeaveAChannelRequest leaveAChannelRequest = default(LeaveAChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->LeaveAChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (leaveAChannelRequest != null && leaveAChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(leaveAChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = leaveAChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveAChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List channels ## List group channels  This action retrieves a list of [group channels](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use various query parameters to determine the search scope and select what kind of information you want to receive about the queried channels.  If you want to retrieve a list of group channels that a specific user has joined, use the [list group channels by user](https://sendbird.com/docs/chat/platform-api/v3/user/managing-joined-group-channels/list-group-channels-by-user) action under the User section.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/list-group-channels#1-list-group-channels
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token">Specifies a page token that indicates the starting index of a chunk of results. If not specified, the index is set as 0. (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter">Restricts the search scope to only retrieve group channels which have been created after the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="createdBefore">Restricts the search scope to only retrieve group channels which have been created before the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey">Specifies the key of an item in metadata. When a value of the order parameter is set to metadata_value_alphabetical, the results are alphabetically sorted by the value of the item specified by the key. (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom types to filter group channels. URL encoding each type is recommended. If not specified, all channels are returned, regardless of their custom type. (optional)</param>
        /// <param name="customTypeStartswith">Searches for group channels with the custom type which starts with the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="channelUrls">Specifies a comma-separated string of one or more group channel URLs to restrict the search scope. URL encoding each channel URL is recommended. (optional)</param>
        /// <param name="name">Specifies one or more group channel names. (optional)</param>
        /// <param name="nameContains">Searches for group channels whose names contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="nameStartswith">Searches for group channels whose names start with the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersExactlyIn">Searches for group channels with all the specified users as members. The parameter value should consist of user IDs separated by commas.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="membersIncludeIn">Searches for group channels that include one or more users as members among the specified users. The value should consist of user IDs separated by commas or %2C. You can specify up to 60 user IDs.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="queryType">Specifies a logical condition applied to the members_include_in parameter. Acceptable values are either AND or OR. For example, if you specify three members, A, B, and C, in members_include_in, the value of AND returns all channels that include every one of {A. B, C} as members. The value of OR returns channels that include {A}, plus those that include {B}, plus those that include {C}. (Default: AND) (optional)</param>
        /// <param name="membersNickname">Searches for group channels with members whose nicknames match the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersNicknameContains">Searches for group channels with members whose nicknames contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended.  * We recommend using at least three characters for the parameter value for better search efficiency when you design and implement related features. If you would like to allow one or two characters for searching, use members_nickname instead to prevent performance issues. (optional)</param>
        /// <param name="metadataKey">Searches for group channels with metadata containing an item with the specified value as its key. To use this parameter, either the metadata_values parameter or the metadata_value_startswith parameter should be specified. (optional)</param>
        /// <param name="metadataValues">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the value of that item matches one or more values specified by this parameter. The string should be specified with multiple values separated by commas. URL encoding each value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metadataValueStartswith">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the values of that item that start with the specified value of this parameter. URL encoding the value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metacounterKey">Searches for group channels with metacounter containing an item with the specified value as its key. To use this parameter, either the metacounter_values parameter or one of the metacounter_value_gt, metacounter_value_gte, metacounter_value_lt, and metacounter_value_lte parameters should be specified. (optional)</param>
        /// <param name="metacounterValues">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is equal to one or more values specified by this parameter. The string should be specified with multiple values separated by commas. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage">Determines whether to include the sorted_metaarray as one of the last_message’s properties in the response. (optional)</param>
        /// <returns>GroupChatListChannelsResponse</returns>
        public GroupChatListChannelsResponse ListChannels (string apiToken, string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), long? createdAfter = default(long?), long? createdBefore = default(long?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?))
        {
             ApiResponse<GroupChatListChannelsResponse> localVarResponse = ListChannelsWithHttpInfo(apiToken, token, limit, distinctMode, publicMode, superMode, createdAfter, createdBefore, showEmpty, showMember, showDeliveryReceipt, showReadReceipt, showMetadata, showFrozen, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, includeSortedMetaarrayInLastMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List channels ## List group channels  This action retrieves a list of [group channels](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use various query parameters to determine the search scope and select what kind of information you want to receive about the queried channels.  If you want to retrieve a list of group channels that a specific user has joined, use the [list group channels by user](https://sendbird.com/docs/chat/platform-api/v3/user/managing-joined-group-channels/list-group-channels-by-user) action under the User section.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/list-group-channels#1-list-group-channels
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token">Specifies a page token that indicates the starting index of a chunk of results. If not specified, the index is set as 0. (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter">Restricts the search scope to only retrieve group channels which have been created after the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="createdBefore">Restricts the search scope to only retrieve group channels which have been created before the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey">Specifies the key of an item in metadata. When a value of the order parameter is set to metadata_value_alphabetical, the results are alphabetically sorted by the value of the item specified by the key. (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom types to filter group channels. URL encoding each type is recommended. If not specified, all channels are returned, regardless of their custom type. (optional)</param>
        /// <param name="customTypeStartswith">Searches for group channels with the custom type which starts with the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="channelUrls">Specifies a comma-separated string of one or more group channel URLs to restrict the search scope. URL encoding each channel URL is recommended. (optional)</param>
        /// <param name="name">Specifies one or more group channel names. (optional)</param>
        /// <param name="nameContains">Searches for group channels whose names contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="nameStartswith">Searches for group channels whose names start with the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersExactlyIn">Searches for group channels with all the specified users as members. The parameter value should consist of user IDs separated by commas.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="membersIncludeIn">Searches for group channels that include one or more users as members among the specified users. The value should consist of user IDs separated by commas or %2C. You can specify up to 60 user IDs.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="queryType">Specifies a logical condition applied to the members_include_in parameter. Acceptable values are either AND or OR. For example, if you specify three members, A, B, and C, in members_include_in, the value of AND returns all channels that include every one of {A. B, C} as members. The value of OR returns channels that include {A}, plus those that include {B}, plus those that include {C}. (Default: AND) (optional)</param>
        /// <param name="membersNickname">Searches for group channels with members whose nicknames match the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersNicknameContains">Searches for group channels with members whose nicknames contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended.  * We recommend using at least three characters for the parameter value for better search efficiency when you design and implement related features. If you would like to allow one or two characters for searching, use members_nickname instead to prevent performance issues. (optional)</param>
        /// <param name="metadataKey">Searches for group channels with metadata containing an item with the specified value as its key. To use this parameter, either the metadata_values parameter or the metadata_value_startswith parameter should be specified. (optional)</param>
        /// <param name="metadataValues">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the value of that item matches one or more values specified by this parameter. The string should be specified with multiple values separated by commas. URL encoding each value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metadataValueStartswith">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the values of that item that start with the specified value of this parameter. URL encoding the value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metacounterKey">Searches for group channels with metacounter containing an item with the specified value as its key. To use this parameter, either the metacounter_values parameter or one of the metacounter_value_gt, metacounter_value_gte, metacounter_value_lt, and metacounter_value_lte parameters should be specified. (optional)</param>
        /// <param name="metacounterValues">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is equal to one or more values specified by this parameter. The string should be specified with multiple values separated by commas. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage">Determines whether to include the sorted_metaarray as one of the last_message’s properties in the response. (optional)</param>
        /// <returns>ApiResponse of GroupChatListChannelsResponse</returns>
        public ApiResponse<GroupChatListChannelsResponse> ListChannelsWithHttpInfo (string apiToken, string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), long? createdAfter = default(long?), long? createdBefore = default(long?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling GroupChannelApi->ListChannels");

            var localVarPath = "/v3/group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (distinctMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinct_mode", distinctMode)); // query parameter
            if (publicMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public_mode", publicMode)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (showEmpty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_empty", showEmpty)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (showMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_metadata", showMetadata)); // query parameter
            if (showFrozen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_frozen", showFrozen)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (metadataOrderKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_order_key", metadataOrderKey)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (customTypeStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type_startswith", customTypeStartswith)); // query parameter
            if (channelUrls != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_urls", channelUrls)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_contains", nameContains)); // query parameter
            if (nameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_startswith", nameStartswith)); // query parameter
            if (membersExactlyIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_exactly_in", membersExactlyIn)); // query parameter
            if (membersIncludeIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_include_in", membersIncludeIn)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query_type", queryType)); // query parameter
            if (membersNickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname", membersNickname)); // query parameter
            if (membersNicknameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname_contains", membersNicknameContains)); // query parameter
            if (metadataKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_key", metadataKey)); // query parameter
            if (metadataValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_values", metadataValues)); // query parameter
            if (metadataValueStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_value_startswith", metadataValueStartswith)); // query parameter
            if (metacounterKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_key", metacounterKey)); // query parameter
            if (metacounterValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_values", metacounterValues)); // query parameter
            if (metacounterValueGt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gt", metacounterValueGt)); // query parameter
            if (metacounterValueGte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gte", metacounterValueGte)); // query parameter
            if (metacounterValueLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lt", metacounterValueLt)); // query parameter
            if (metacounterValueLte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lte", metacounterValueLte)); // query parameter
            if (includeSortedMetaarrayInLastMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_sorted_metaarray_in_last_message", includeSortedMetaarrayInLastMessage)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupChatListChannelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupChatListChannelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupChatListChannelsResponse)));
        }

        /// <summary>
        /// List channels ## List group channels  This action retrieves a list of [group channels](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use various query parameters to determine the search scope and select what kind of information you want to receive about the queried channels.  If you want to retrieve a list of group channels that a specific user has joined, use the [list group channels by user](https://sendbird.com/docs/chat/platform-api/v3/user/managing-joined-group-channels/list-group-channels-by-user) action under the User section.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/list-group-channels#1-list-group-channels
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token">Specifies a page token that indicates the starting index of a chunk of results. If not specified, the index is set as 0. (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter">Restricts the search scope to only retrieve group channels which have been created after the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="createdBefore">Restricts the search scope to only retrieve group channels which have been created before the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey">Specifies the key of an item in metadata. When a value of the order parameter is set to metadata_value_alphabetical, the results are alphabetically sorted by the value of the item specified by the key. (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom types to filter group channels. URL encoding each type is recommended. If not specified, all channels are returned, regardless of their custom type. (optional)</param>
        /// <param name="customTypeStartswith">Searches for group channels with the custom type which starts with the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="channelUrls">Specifies a comma-separated string of one or more group channel URLs to restrict the search scope. URL encoding each channel URL is recommended. (optional)</param>
        /// <param name="name">Specifies one or more group channel names. (optional)</param>
        /// <param name="nameContains">Searches for group channels whose names contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="nameStartswith">Searches for group channels whose names start with the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersExactlyIn">Searches for group channels with all the specified users as members. The parameter value should consist of user IDs separated by commas.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="membersIncludeIn">Searches for group channels that include one or more users as members among the specified users. The value should consist of user IDs separated by commas or %2C. You can specify up to 60 user IDs.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="queryType">Specifies a logical condition applied to the members_include_in parameter. Acceptable values are either AND or OR. For example, if you specify three members, A, B, and C, in members_include_in, the value of AND returns all channels that include every one of {A. B, C} as members. The value of OR returns channels that include {A}, plus those that include {B}, plus those that include {C}. (Default: AND) (optional)</param>
        /// <param name="membersNickname">Searches for group channels with members whose nicknames match the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersNicknameContains">Searches for group channels with members whose nicknames contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended.  * We recommend using at least three characters for the parameter value for better search efficiency when you design and implement related features. If you would like to allow one or two characters for searching, use members_nickname instead to prevent performance issues. (optional)</param>
        /// <param name="metadataKey">Searches for group channels with metadata containing an item with the specified value as its key. To use this parameter, either the metadata_values parameter or the metadata_value_startswith parameter should be specified. (optional)</param>
        /// <param name="metadataValues">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the value of that item matches one or more values specified by this parameter. The string should be specified with multiple values separated by commas. URL encoding each value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metadataValueStartswith">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the values of that item that start with the specified value of this parameter. URL encoding the value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metacounterKey">Searches for group channels with metacounter containing an item with the specified value as its key. To use this parameter, either the metacounter_values parameter or one of the metacounter_value_gt, metacounter_value_gte, metacounter_value_lt, and metacounter_value_lte parameters should be specified. (optional)</param>
        /// <param name="metacounterValues">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is equal to one or more values specified by this parameter. The string should be specified with multiple values separated by commas. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage">Determines whether to include the sorted_metaarray as one of the last_message’s properties in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupChatListChannelsResponse</returns>
        public async System.Threading.Tasks.Task<GroupChatListChannelsResponse> ListChannelsAsync (string apiToken, string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), long? createdAfter = default(long?), long? createdBefore = default(long?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupChatListChannelsResponse> localVarResponse = await ListChannelsWithHttpInfoAsync(apiToken, token, limit, distinctMode, publicMode, superMode, createdAfter, createdBefore, showEmpty, showMember, showDeliveryReceipt, showReadReceipt, showMetadata, showFrozen, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, includeSortedMetaarrayInLastMessage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List channels ## List group channels  This action retrieves a list of [group channels](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel). You can use various query parameters to determine the search scope and select what kind of information you want to receive about the queried channels.  If you want to retrieve a list of group channels that a specific user has joined, use the [list group channels by user](https://sendbird.com/docs/chat/platform-api/v3/user/managing-joined-group-channels/list-group-channels-by-user) action under the User section.  https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/list-group-channels#1-list-group-channels
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token">Specifies a page token that indicates the starting index of a chunk of results. If not specified, the index is set as 0. (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="createdAfter">Restricts the search scope to only retrieve group channels which have been created after the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="createdBefore">Restricts the search scope to only retrieve group channels which have been created before the specified time, in Unix milliseconds format. (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMetadata"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey">Specifies the key of an item in metadata. When a value of the order parameter is set to metadata_value_alphabetical, the results are alphabetically sorted by the value of the item specified by the key. (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom types to filter group channels. URL encoding each type is recommended. If not specified, all channels are returned, regardless of their custom type. (optional)</param>
        /// <param name="customTypeStartswith">Searches for group channels with the custom type which starts with the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="channelUrls">Specifies a comma-separated string of one or more group channel URLs to restrict the search scope. URL encoding each channel URL is recommended. (optional)</param>
        /// <param name="name">Specifies one or more group channel names. (optional)</param>
        /// <param name="nameContains">Searches for group channels whose names contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="nameStartswith">Searches for group channels whose names start with the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersExactlyIn">Searches for group channels with all the specified users as members. The parameter value should consist of user IDs separated by commas.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="membersIncludeIn">Searches for group channels that include one or more users as members among the specified users. The value should consist of user IDs separated by commas or %2C. You can specify up to 60 user IDs.  Only user IDs that match those of existing users are used for channel search. URL encoding each ID is recommended. (optional)</param>
        /// <param name="queryType">Specifies a logical condition applied to the members_include_in parameter. Acceptable values are either AND or OR. For example, if you specify three members, A, B, and C, in members_include_in, the value of AND returns all channels that include every one of {A. B, C} as members. The value of OR returns channels that include {A}, plus those that include {B}, plus those that include {C}. (Default: AND) (optional)</param>
        /// <param name="membersNickname">Searches for group channels with members whose nicknames match the specified value. URL encoding the value is recommended. (optional)</param>
        /// <param name="membersNicknameContains">Searches for group channels with members whose nicknames contain the specified value. Note that this parameter is case-insensitive. URL encoding the value is recommended.  * We recommend using at least three characters for the parameter value for better search efficiency when you design and implement related features. If you would like to allow one or two characters for searching, use members_nickname instead to prevent performance issues. (optional)</param>
        /// <param name="metadataKey">Searches for group channels with metadata containing an item with the specified value as its key. To use this parameter, either the metadata_values parameter or the metadata_value_startswith parameter should be specified. (optional)</param>
        /// <param name="metadataValues">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the value of that item matches one or more values specified by this parameter. The string should be specified with multiple values separated by commas. URL encoding each value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metadataValueStartswith">Searches for group channels with metadata containing an item with the key specified by the metadata_key parameter, and the values of that item that start with the specified value of this parameter. URL encoding the value is recommended. To use this parameter, the metadata_key parameter should be specified. (optional)</param>
        /// <param name="metacounterKey">Searches for group channels with metacounter containing an item with the specified value as its key. To use this parameter, either the metacounter_values parameter or one of the metacounter_value_gt, metacounter_value_gte, metacounter_value_lt, and metacounter_value_lte parameters should be specified. (optional)</param>
        /// <param name="metacounterValues">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is equal to one or more values specified by this parameter. The string should be specified with multiple values separated by commas. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueGte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is greater than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLt">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="metacounterValueLte">Searches for group channels with metacounter containing an item with the key specified by the metadata_key parameter, where the value of that item is lower than or equal to the value specified by this parameter. To use this parameter, the metacounter_key parameter should be specified. (optional)</param>
        /// <param name="includeSortedMetaarrayInLastMessage">Determines whether to include the sorted_metaarray as one of the last_message’s properties in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupChatListChannelsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupChatListChannelsResponse>> ListChannelsWithHttpInfoAsync (string apiToken, string token = default(string), int? limit = default(int?), string distinctMode = default(string), string publicMode = default(string), string superMode = default(string), long? createdAfter = default(long?), long? createdBefore = default(long?), bool? showEmpty = default(bool?), bool? showMember = default(bool?), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMetadata = default(bool?), bool? showFrozen = default(bool?), string order = default(string), string metadataOrderKey = default(string), string customTypes = default(string), string customTypeStartswith = default(string), string channelUrls = default(string), string name = default(string), string nameContains = default(string), string nameStartswith = default(string), string membersExactlyIn = default(string), string membersIncludeIn = default(string), string queryType = default(string), string membersNickname = default(string), string membersNicknameContains = default(string), string metadataKey = default(string), string metadataValues = default(string), string metadataValueStartswith = default(string), string metacounterKey = default(string), string metacounterValues = default(string), string metacounterValueGt = default(string), string metacounterValueGte = default(string), string metacounterValueLt = default(string), string metacounterValueLte = default(string), bool? includeSortedMetaarrayInLastMessage = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling GroupChannelApi->ListChannels");

            var localVarPath = "/v3/group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (distinctMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinct_mode", distinctMode)); // query parameter
            if (publicMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public_mode", publicMode)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (showEmpty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_empty", showEmpty)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (showMetadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_metadata", showMetadata)); // query parameter
            if (showFrozen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_frozen", showFrozen)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (metadataOrderKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_order_key", metadataOrderKey)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (customTypeStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type_startswith", customTypeStartswith)); // query parameter
            if (channelUrls != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_urls", channelUrls)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_contains", nameContains)); // query parameter
            if (nameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_startswith", nameStartswith)); // query parameter
            if (membersExactlyIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_exactly_in", membersExactlyIn)); // query parameter
            if (membersIncludeIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_include_in", membersIncludeIn)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query_type", queryType)); // query parameter
            if (membersNickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname", membersNickname)); // query parameter
            if (membersNicknameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname_contains", membersNicknameContains)); // query parameter
            if (metadataKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_key", metadataKey)); // query parameter
            if (metadataValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_values", metadataValues)); // query parameter
            if (metadataValueStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_value_startswith", metadataValueStartswith)); // query parameter
            if (metacounterKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_key", metacounterKey)); // query parameter
            if (metacounterValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_values", metacounterValues)); // query parameter
            if (metacounterValueGt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gt", metacounterValueGt)); // query parameter
            if (metacounterValueGte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gte", metacounterValueGte)); // query parameter
            if (metacounterValueLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lt", metacounterValueLt)); // query parameter
            if (metacounterValueLte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lte", metacounterValueLte)); // query parameter
            if (includeSortedMetaarrayInLastMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_sorted_metaarray_in_last_message", includeSortedMetaarrayInLastMessage)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupChatListChannelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupChatListChannelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupChatListChannelsResponse)));
        }

        /// <summary>
        /// List members ## List members  Retrieves a list of members of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="userId">Specifies the unique ID of a user. If &#x60;user_id&#x60; is provided, the response will include two additional boolean properties about each user in the members list. - &#x60;is_blocking_me&#x60;: Indicates whether the listed user is blocking the user specified in the user_id parameter. - &#x60;is_blocked_by_me&#x60;: Indicates whether the listed user is blocked by the user specified in the user_id parameter. (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMemberIsMuted"> (optional)</param>
        /// <param name="order">Specifies the method to sort a list of results. Acceptable values are the following: - &#x60;member_nickname_alphabetical&#x60; (default): sorts by the member nicknames in alphabetical order. - &#x60;operator_then_member_alphabetical&#x60;: sorts by the operational role and member nickname in alphabetical order where channel operators are listed before channel members. (optional)</param>
        /// <param name="operatorFilter">Restricts the search scope to only retrieve operators or non-operator members of the channel. Acceptable values are the following: - &#x60;all&#x60; (default): no filter is applied to the list. - &#x60;operator&#x60;: only channel operators are retrieved. - &#x60;nonoperator&#x60;: all channel members, except channel operators, are retrieved. (optional)</param>
        /// <param name="memberStateFilter">Restricts the search scope to retrieve members based on if they have accepted an invitation or if they were invited by a friend. Acceptable values are &#x60;invited_only&#x60;, &#x60;joined_only&#x60;, &#x60;invited_by_friend&#x60;, &#x60;invited_by_non_friend&#x60;, and &#x60;all&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="mutedMemberFilter">Restricts the search scope to retrieve members who are muted or unmuted in the channel. Acceptable values are &#x60;all&#x60;, &#x60;muted&#x60;, and &#x60;unmuted&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="memberActiveModeFilter">Restricts the search scope to retrieve members who are activated or deactivated in the channel. Acceptable values are &#x60;all&#x60;, &#x60;activated&#x60;, and &#x60;deactivated&#x60;. (default: &#x60;activated&#x60;) (optional)</param>
        /// <param name="nicknameStartswith">Searches for members whose nicknames start with the specified value. Urlencoding the value is recommended. (optional)</param>
        /// <param name="includePushPreference">Determines whether to include information about the push preference of each member, such as &#x60;push_enabled&#x60;, &#x60;push_trigger_option&#x60;, and &#x60;do_not_disturb&#x60;. (Default: &#x60;false&#x60;) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>GroupChannelListMembersResponse</returns>
        public GroupChannelListMembersResponse ListMembers (string channelUrl, string token = default(string), int? limit = default(int?), string userId = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMemberIsMuted = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string memberActiveModeFilter = default(string), string nicknameStartswith = default(string), bool? includePushPreference = default(bool?), string apiToken = default(string))
        {
             ApiResponse<GroupChannelListMembersResponse> localVarResponse = ListMembersWithHttpInfo(channelUrl, token, limit, userId, showDeliveryReceipt, showReadReceipt, showMemberIsMuted, order, operatorFilter, memberStateFilter, mutedMemberFilter, memberActiveModeFilter, nicknameStartswith, includePushPreference, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List members ## List members  Retrieves a list of members of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="userId">Specifies the unique ID of a user. If &#x60;user_id&#x60; is provided, the response will include two additional boolean properties about each user in the members list. - &#x60;is_blocking_me&#x60;: Indicates whether the listed user is blocking the user specified in the user_id parameter. - &#x60;is_blocked_by_me&#x60;: Indicates whether the listed user is blocked by the user specified in the user_id parameter. (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMemberIsMuted"> (optional)</param>
        /// <param name="order">Specifies the method to sort a list of results. Acceptable values are the following: - &#x60;member_nickname_alphabetical&#x60; (default): sorts by the member nicknames in alphabetical order. - &#x60;operator_then_member_alphabetical&#x60;: sorts by the operational role and member nickname in alphabetical order where channel operators are listed before channel members. (optional)</param>
        /// <param name="operatorFilter">Restricts the search scope to only retrieve operators or non-operator members of the channel. Acceptable values are the following: - &#x60;all&#x60; (default): no filter is applied to the list. - &#x60;operator&#x60;: only channel operators are retrieved. - &#x60;nonoperator&#x60;: all channel members, except channel operators, are retrieved. (optional)</param>
        /// <param name="memberStateFilter">Restricts the search scope to retrieve members based on if they have accepted an invitation or if they were invited by a friend. Acceptable values are &#x60;invited_only&#x60;, &#x60;joined_only&#x60;, &#x60;invited_by_friend&#x60;, &#x60;invited_by_non_friend&#x60;, and &#x60;all&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="mutedMemberFilter">Restricts the search scope to retrieve members who are muted or unmuted in the channel. Acceptable values are &#x60;all&#x60;, &#x60;muted&#x60;, and &#x60;unmuted&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="memberActiveModeFilter">Restricts the search scope to retrieve members who are activated or deactivated in the channel. Acceptable values are &#x60;all&#x60;, &#x60;activated&#x60;, and &#x60;deactivated&#x60;. (default: &#x60;activated&#x60;) (optional)</param>
        /// <param name="nicknameStartswith">Searches for members whose nicknames start with the specified value. Urlencoding the value is recommended. (optional)</param>
        /// <param name="includePushPreference">Determines whether to include information about the push preference of each member, such as &#x60;push_enabled&#x60;, &#x60;push_trigger_option&#x60;, and &#x60;do_not_disturb&#x60;. (Default: &#x60;false&#x60;) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of GroupChannelListMembersResponse</returns>
        public ApiResponse<GroupChannelListMembersResponse> ListMembersWithHttpInfo (string channelUrl, string token = default(string), int? limit = default(int?), string userId = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMemberIsMuted = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string memberActiveModeFilter = default(string), string nicknameStartswith = default(string), bool? includePushPreference = default(bool?), string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->ListMembers");

            var localVarPath = "/v3/group_channels/{channel_url}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (showMemberIsMuted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member_is_muted", showMemberIsMuted)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (operatorFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_filter", operatorFilter)); // query parameter
            if (memberStateFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_state_filter", memberStateFilter)); // query parameter
            if (mutedMemberFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "muted_member_filter", mutedMemberFilter)); // query parameter
            if (memberActiveModeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_active_mode_filter", memberActiveModeFilter)); // query parameter
            if (nicknameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname_startswith", nicknameStartswith)); // query parameter
            if (includePushPreference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_push_preference", includePushPreference)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupChannelListMembersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupChannelListMembersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupChannelListMembersResponse)));
        }

        /// <summary>
        /// List members ## List members  Retrieves a list of members of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="userId">Specifies the unique ID of a user. If &#x60;user_id&#x60; is provided, the response will include two additional boolean properties about each user in the members list. - &#x60;is_blocking_me&#x60;: Indicates whether the listed user is blocking the user specified in the user_id parameter. - &#x60;is_blocked_by_me&#x60;: Indicates whether the listed user is blocked by the user specified in the user_id parameter. (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMemberIsMuted"> (optional)</param>
        /// <param name="order">Specifies the method to sort a list of results. Acceptable values are the following: - &#x60;member_nickname_alphabetical&#x60; (default): sorts by the member nicknames in alphabetical order. - &#x60;operator_then_member_alphabetical&#x60;: sorts by the operational role and member nickname in alphabetical order where channel operators are listed before channel members. (optional)</param>
        /// <param name="operatorFilter">Restricts the search scope to only retrieve operators or non-operator members of the channel. Acceptable values are the following: - &#x60;all&#x60; (default): no filter is applied to the list. - &#x60;operator&#x60;: only channel operators are retrieved. - &#x60;nonoperator&#x60;: all channel members, except channel operators, are retrieved. (optional)</param>
        /// <param name="memberStateFilter">Restricts the search scope to retrieve members based on if they have accepted an invitation or if they were invited by a friend. Acceptable values are &#x60;invited_only&#x60;, &#x60;joined_only&#x60;, &#x60;invited_by_friend&#x60;, &#x60;invited_by_non_friend&#x60;, and &#x60;all&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="mutedMemberFilter">Restricts the search scope to retrieve members who are muted or unmuted in the channel. Acceptable values are &#x60;all&#x60;, &#x60;muted&#x60;, and &#x60;unmuted&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="memberActiveModeFilter">Restricts the search scope to retrieve members who are activated or deactivated in the channel. Acceptable values are &#x60;all&#x60;, &#x60;activated&#x60;, and &#x60;deactivated&#x60;. (default: &#x60;activated&#x60;) (optional)</param>
        /// <param name="nicknameStartswith">Searches for members whose nicknames start with the specified value. Urlencoding the value is recommended. (optional)</param>
        /// <param name="includePushPreference">Determines whether to include information about the push preference of each member, such as &#x60;push_enabled&#x60;, &#x60;push_trigger_option&#x60;, and &#x60;do_not_disturb&#x60;. (Default: &#x60;false&#x60;) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GroupChannelListMembersResponse</returns>
        public async System.Threading.Tasks.Task<GroupChannelListMembersResponse> ListMembersAsync (string channelUrl, string token = default(string), int? limit = default(int?), string userId = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMemberIsMuted = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string memberActiveModeFilter = default(string), string nicknameStartswith = default(string), bool? includePushPreference = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GroupChannelListMembersResponse> localVarResponse = await ListMembersWithHttpInfoAsync(channelUrl, token, limit, userId, showDeliveryReceipt, showReadReceipt, showMemberIsMuted, order, operatorFilter, memberStateFilter, mutedMemberFilter, memberActiveModeFilter, nicknameStartswith, includePushPreference, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List members ## List members  Retrieves a list of members of a group channel.  > **Note**: See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.      [https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-users/list-members-of-a-group-channel#1-list-members-of-a-group-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of members of.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="userId">Specifies the unique ID of a user. If &#x60;user_id&#x60; is provided, the response will include two additional boolean properties about each user in the members list. - &#x60;is_blocking_me&#x60;: Indicates whether the listed user is blocking the user specified in the user_id parameter. - &#x60;is_blocked_by_me&#x60;: Indicates whether the listed user is blocked by the user specified in the user_id parameter. (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="showMemberIsMuted"> (optional)</param>
        /// <param name="order">Specifies the method to sort a list of results. Acceptable values are the following: - &#x60;member_nickname_alphabetical&#x60; (default): sorts by the member nicknames in alphabetical order. - &#x60;operator_then_member_alphabetical&#x60;: sorts by the operational role and member nickname in alphabetical order where channel operators are listed before channel members. (optional)</param>
        /// <param name="operatorFilter">Restricts the search scope to only retrieve operators or non-operator members of the channel. Acceptable values are the following: - &#x60;all&#x60; (default): no filter is applied to the list. - &#x60;operator&#x60;: only channel operators are retrieved. - &#x60;nonoperator&#x60;: all channel members, except channel operators, are retrieved. (optional)</param>
        /// <param name="memberStateFilter">Restricts the search scope to retrieve members based on if they have accepted an invitation or if they were invited by a friend. Acceptable values are &#x60;invited_only&#x60;, &#x60;joined_only&#x60;, &#x60;invited_by_friend&#x60;, &#x60;invited_by_non_friend&#x60;, and &#x60;all&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="mutedMemberFilter">Restricts the search scope to retrieve members who are muted or unmuted in the channel. Acceptable values are &#x60;all&#x60;, &#x60;muted&#x60;, and &#x60;unmuted&#x60;. (Default: &#x60;all&#x60;) (optional)</param>
        /// <param name="memberActiveModeFilter">Restricts the search scope to retrieve members who are activated or deactivated in the channel. Acceptable values are &#x60;all&#x60;, &#x60;activated&#x60;, and &#x60;deactivated&#x60;. (default: &#x60;activated&#x60;) (optional)</param>
        /// <param name="nicknameStartswith">Searches for members whose nicknames start with the specified value. Urlencoding the value is recommended. (optional)</param>
        /// <param name="includePushPreference">Determines whether to include information about the push preference of each member, such as &#x60;push_enabled&#x60;, &#x60;push_trigger_option&#x60;, and &#x60;do_not_disturb&#x60;. (Default: &#x60;false&#x60;) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GroupChannelListMembersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GroupChannelListMembersResponse>> ListMembersWithHttpInfoAsync (string channelUrl, string token = default(string), int? limit = default(int?), string userId = default(string), bool? showDeliveryReceipt = default(bool?), bool? showReadReceipt = default(bool?), bool? showMemberIsMuted = default(bool?), string order = default(string), string operatorFilter = default(string), string memberStateFilter = default(string), string mutedMemberFilter = default(string), string memberActiveModeFilter = default(string), string nicknameStartswith = default(string), bool? includePushPreference = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->ListMembers");

            var localVarPath = "/v3/group_channels/{channel_url}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (showMemberIsMuted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member_is_muted", showMemberIsMuted)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (operatorFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_filter", operatorFilter)); // query parameter
            if (memberStateFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_state_filter", memberStateFilter)); // query parameter
            if (mutedMemberFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "muted_member_filter", mutedMemberFilter)); // query parameter
            if (memberActiveModeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_active_mode_filter", memberActiveModeFilter)); // query parameter
            if (nicknameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname_startswith", nicknameStartswith)); // query parameter
            if (includePushPreference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_push_preference", includePushPreference)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GroupChannelListMembersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GroupChannelListMembersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GroupChannelListMembersResponse)));
        }

        /// <summary>
        /// List operators ## List operators  You can retrieve a list of operators of a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/list-operators-of-a-group-channel#1-list-operators-of-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListOperatorsResponse</returns>
        public ListOperatorsResponse ListOperators (string channelUrl, string token = default(string), int? limit = default(int?), string apiToken = default(string))
        {
             ApiResponse<ListOperatorsResponse> localVarResponse = ListOperatorsWithHttpInfo(channelUrl, token, limit, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List operators ## List operators  You can retrieve a list of operators of a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/list-operators-of-a-group-channel#1-list-operators-of-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListOperatorsResponse</returns>
        public ApiResponse<ListOperatorsResponse> ListOperatorsWithHttpInfo (string channelUrl, string token = default(string), int? limit = default(int?), string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->ListOperators");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListOperatorsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListOperatorsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListOperatorsResponse)));
        }

        /// <summary>
        /// List operators ## List operators  You can retrieve a list of operators of a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/list-operators-of-a-group-channel#1-list-operators-of-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListOperatorsResponse</returns>
        public async System.Threading.Tasks.Task<ListOperatorsResponse> ListOperatorsAsync (string channelUrl, string token = default(string), int? limit = default(int?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListOperatorsResponse> localVarResponse = await ListOperatorsWithHttpInfoAsync(channelUrl, token, limit, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List operators ## List operators  You can retrieve a list of operators of a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/list-operators-of-a-group-channel#1-list-operators-of-a-group-channel  `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of operators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit">Specifies the number of results to return per page. Acceptable values are 1 to 100, inclusive. (Default: 10) (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListOperatorsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListOperatorsResponse>> ListOperatorsWithHttpInfoAsync (string channelUrl, string token = default(string), int? limit = default(int?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->ListOperators");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOperators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListOperatorsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListOperatorsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListOperatorsResponse)));
        }

        /// <summary>
        /// Register operators to a group channel ## Register operators to a group channel  You can register one or more operators to a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/register-operators-to-a-group-channel#1-register-operators-to-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerOperatorsToAGroupChannelRequest"> (optional)</param>
        /// <returns>Object</returns>
        public Object RegisterOperatorsToAGroupChannel (string channelUrl, string apiToken = default(string), RegisterOperatorsToAGroupChannelRequest registerOperatorsToAGroupChannelRequest = default(RegisterOperatorsToAGroupChannelRequest))
        {
             ApiResponse<Object> localVarResponse = RegisterOperatorsToAGroupChannelWithHttpInfo(channelUrl, apiToken, registerOperatorsToAGroupChannelRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register operators to a group channel ## Register operators to a group channel  You can register one or more operators to a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/register-operators-to-a-group-channel#1-register-operators-to-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerOperatorsToAGroupChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> RegisterOperatorsToAGroupChannelWithHttpInfo (string channelUrl, string apiToken = default(string), RegisterOperatorsToAGroupChannelRequest registerOperatorsToAGroupChannelRequest = default(RegisterOperatorsToAGroupChannelRequest))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->RegisterOperatorsToAGroupChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (registerOperatorsToAGroupChannelRequest != null && registerOperatorsToAGroupChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registerOperatorsToAGroupChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerOperatorsToAGroupChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterOperatorsToAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Register operators to a group channel ## Register operators to a group channel  You can register one or more operators to a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/register-operators-to-a-group-channel#1-register-operators-to-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerOperatorsToAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RegisterOperatorsToAGroupChannelAsync (string channelUrl, string apiToken = default(string), RegisterOperatorsToAGroupChannelRequest registerOperatorsToAGroupChannelRequest = default(RegisterOperatorsToAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await RegisterOperatorsToAGroupChannelWithHttpInfoAsync(channelUrl, apiToken, registerOperatorsToAGroupChannelRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register operators to a group channel ## Register operators to a group channel  You can register one or more operators to a group channel using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/assigning-a-user-role/register-operators-to-a-group-channel#1-register-operators-to-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="registerOperatorsToAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterOperatorsToAGroupChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), RegisterOperatorsToAGroupChannelRequest registerOperatorsToAGroupChannelRequest = default(RegisterOperatorsToAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->RegisterOperatorsToAGroupChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/operators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (registerOperatorsToAGroupChannelRequest != null && registerOperatorsToAGroupChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registerOperatorsToAGroupChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerOperatorsToAGroupChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterOperatorsToAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Reset chat history ## Reset chat history  This action resets the properties related to a specific user's chat history in a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel), clearing existing messages in a channel from only the specified user's end. Because this action doesn't delete messages from the Sendbird database, other members in the channel can still retrieve and see the messages.  This action clears the messages for the specified user by updating the `last_message` and `read_receipt` properties of the [group channel resource](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-list-of-properties-for-group-channels) in addition to other internally managed data such as the count of a user's unread messages.  Using the `reset_all` property, you can also reset the properties related to the chat history of all members in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/reset-chat-history#1-reset-chat-history
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="resetChatHistoryRequest"> (optional)</param>
        /// <returns>ResetChatHistoryResponse</returns>
        public ResetChatHistoryResponse ResetChatHistory (string channelUrl, string apiToken = default(string), ResetChatHistoryRequest resetChatHistoryRequest = default(ResetChatHistoryRequest))
        {
             ApiResponse<ResetChatHistoryResponse> localVarResponse = ResetChatHistoryWithHttpInfo(channelUrl, apiToken, resetChatHistoryRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset chat history ## Reset chat history  This action resets the properties related to a specific user's chat history in a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel), clearing existing messages in a channel from only the specified user's end. Because this action doesn't delete messages from the Sendbird database, other members in the channel can still retrieve and see the messages.  This action clears the messages for the specified user by updating the `last_message` and `read_receipt` properties of the [group channel resource](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-list-of-properties-for-group-channels) in addition to other internally managed data such as the count of a user's unread messages.  Using the `reset_all` property, you can also reset the properties related to the chat history of all members in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/reset-chat-history#1-reset-chat-history
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="resetChatHistoryRequest"> (optional)</param>
        /// <returns>ApiResponse of ResetChatHistoryResponse</returns>
        public ApiResponse<ResetChatHistoryResponse> ResetChatHistoryWithHttpInfo (string channelUrl, string apiToken = default(string), ResetChatHistoryRequest resetChatHistoryRequest = default(ResetChatHistoryRequest))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->ResetChatHistory");

            var localVarPath = "/v3/group_channels/{channel_url}/reset_user_history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (resetChatHistoryRequest != null && resetChatHistoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resetChatHistoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resetChatHistoryRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetChatHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResetChatHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResetChatHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResetChatHistoryResponse)));
        }

        /// <summary>
        /// Reset chat history ## Reset chat history  This action resets the properties related to a specific user's chat history in a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel), clearing existing messages in a channel from only the specified user's end. Because this action doesn't delete messages from the Sendbird database, other members in the channel can still retrieve and see the messages.  This action clears the messages for the specified user by updating the `last_message` and `read_receipt` properties of the [group channel resource](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-list-of-properties-for-group-channels) in addition to other internally managed data such as the count of a user's unread messages.  Using the `reset_all` property, you can also reset the properties related to the chat history of all members in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/reset-chat-history#1-reset-chat-history
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="resetChatHistoryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResetChatHistoryResponse</returns>
        public async System.Threading.Tasks.Task<ResetChatHistoryResponse> ResetChatHistoryAsync (string channelUrl, string apiToken = default(string), ResetChatHistoryRequest resetChatHistoryRequest = default(ResetChatHistoryRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResetChatHistoryResponse> localVarResponse = await ResetChatHistoryWithHttpInfoAsync(channelUrl, apiToken, resetChatHistoryRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset chat history ## Reset chat history  This action resets the properties related to a specific user's chat history in a [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel), clearing existing messages in a channel from only the specified user's end. Because this action doesn't delete messages from the Sendbird database, other members in the channel can still retrieve and see the messages.  This action clears the messages for the specified user by updating the `last_message` and `read_receipt` properties of the [group channel resource](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#4-list-of-properties-for-group-channels) in addition to other internally managed data such as the count of a user's unread messages.  Using the `reset_all` property, you can also reset the properties related to the chat history of all members in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/reset-chat-history#1-reset-chat-history
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="resetChatHistoryRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResetChatHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResetChatHistoryResponse>> ResetChatHistoryWithHttpInfoAsync (string channelUrl, string apiToken = default(string), ResetChatHistoryRequest resetChatHistoryRequest = default(ResetChatHistoryRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->ResetChatHistory");

            var localVarPath = "/v3/group_channels/{channel_url}/reset_user_history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (resetChatHistoryRequest != null && resetChatHistoryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resetChatHistoryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resetChatHistoryRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetChatHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResetChatHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResetChatHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResetChatHistoryResponse)));
        }

        /// <summary>
        /// Start typing indicators ## Start typing indicators  You can start showing a typing indicator using this API. Seeing whether other users are typing can help a more interactive conversation environment by showing real-time engagement of other users.  If you're looking for an easy way to show typing indicators on your app, check out Sendbird UIKit for a ready-to-use UI feature that can be customized to fit your needs.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/start-typing-indicators#1-start-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <returns>Object</returns>
        public Object StartTypingIndicators (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest))
        {
             ApiResponse<Object> localVarResponse = StartTypingIndicatorsWithHttpInfo(channelUrl, apiToken, startTypingIndicatorsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start typing indicators ## Start typing indicators  You can start showing a typing indicator using this API. Seeing whether other users are typing can help a more interactive conversation environment by showing real-time engagement of other users.  If you're looking for an easy way to show typing indicators on your app, check out Sendbird UIKit for a ready-to-use UI feature that can be customized to fit your needs.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/start-typing-indicators#1-start-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> StartTypingIndicatorsWithHttpInfo (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->StartTypingIndicators");

            var localVarPath = "/v3/group_channels/{channel_url}/typing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (startTypingIndicatorsRequest != null && startTypingIndicatorsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startTypingIndicatorsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startTypingIndicatorsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartTypingIndicators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Start typing indicators ## Start typing indicators  You can start showing a typing indicator using this API. Seeing whether other users are typing can help a more interactive conversation environment by showing real-time engagement of other users.  If you're looking for an easy way to show typing indicators on your app, check out Sendbird UIKit for a ready-to-use UI feature that can be customized to fit your needs.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/start-typing-indicators#1-start-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> StartTypingIndicatorsAsync (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await StartTypingIndicatorsWithHttpInfoAsync(channelUrl, apiToken, startTypingIndicatorsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start typing indicators ## Start typing indicators  You can start showing a typing indicator using this API. Seeing whether other users are typing can help a more interactive conversation environment by showing real-time engagement of other users.  If you're looking for an easy way to show typing indicators on your app, check out Sendbird UIKit for a ready-to-use UI feature that can be customized to fit your needs.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/start-typing-indicators#1-start-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StartTypingIndicatorsWithHttpInfoAsync (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->StartTypingIndicators");

            var localVarPath = "/v3/group_channels/{channel_url}/typing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (startTypingIndicatorsRequest != null && startTypingIndicatorsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startTypingIndicatorsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startTypingIndicatorsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartTypingIndicators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Stop typing indicators ## Stop typing indicators  You can stop showing a typing indicator using this API. To signal that a user is no longer typing, you can let the indicator disappear when the user sends a message or completely deletes the message text.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/stop-typing-indicators#1-stop-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <returns>Object</returns>
        public Object StopTypingIndicators (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest))
        {
             ApiResponse<Object> localVarResponse = StopTypingIndicatorsWithHttpInfo(channelUrl, apiToken, startTypingIndicatorsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop typing indicators ## Stop typing indicators  You can stop showing a typing indicator using this API. To signal that a user is no longer typing, you can let the indicator disappear when the user sends a message or completely deletes the message text.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/stop-typing-indicators#1-stop-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> StopTypingIndicatorsWithHttpInfo (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->StopTypingIndicators");

            var localVarPath = "/v3/group_channels/{channel_url}/typing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (startTypingIndicatorsRequest != null && startTypingIndicatorsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startTypingIndicatorsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startTypingIndicatorsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopTypingIndicators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Stop typing indicators ## Stop typing indicators  You can stop showing a typing indicator using this API. To signal that a user is no longer typing, you can let the indicator disappear when the user sends a message or completely deletes the message text.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/stop-typing-indicators#1-stop-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> StopTypingIndicatorsAsync (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await StopTypingIndicatorsWithHttpInfoAsync(channelUrl, apiToken, startTypingIndicatorsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop typing indicators ## Stop typing indicators  You can stop showing a typing indicator using this API. To signal that a user is no longer typing, you can let the indicator disappear when the user sends a message or completely deletes the message text.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-typing-indicators/stop-typing-indicators#1-stop-typing-indicators  `channel_url`   Type: string   Description: Specifies the URL of the channel to set typing indicators.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="startTypingIndicatorsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StopTypingIndicatorsWithHttpInfoAsync (string channelUrl, string apiToken = default(string), StartTypingIndicatorsRequest startTypingIndicatorsRequest = default(StartTypingIndicatorsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->StopTypingIndicators");

            var localVarPath = "/v3/group_channels/{channel_url}/typing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (startTypingIndicatorsRequest != null && startTypingIndicatorsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(startTypingIndicatorsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startTypingIndicatorsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopTypingIndicators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Unhide a channel ## Unhide a channel  This action lets a hidden [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) reappear on the channel list of a specific user or every member in the group channel. Hiding or unhiding a channel lets users organize their channel list based on those that require the most attention. Note that only group channels can be hidden or unhidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to unhide or unarchive.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        public Object UnhideAChannel (string channelUrl, string userId, bool? shouldUnhideAll = default(bool?), string apiToken = default(string))
        {
             ApiResponse<Object> localVarResponse = UnhideAChannelWithHttpInfo(channelUrl, userId, shouldUnhideAll, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unhide a channel ## Unhide a channel  This action lets a hidden [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) reappear on the channel list of a specific user or every member in the group channel. Hiding or unhiding a channel lets users organize their channel list based on those that require the most attention. Note that only group channels can be hidden or unhidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to unhide or unarchive.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> UnhideAChannelWithHttpInfo (string channelUrl, string userId, bool? shouldUnhideAll = default(bool?), string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->UnhideAChannel");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupChannelApi->UnhideAChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (shouldUnhideAll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "should_unhide_all", shouldUnhideAll)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnhideAChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Unhide a channel ## Unhide a channel  This action lets a hidden [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) reappear on the channel list of a specific user or every member in the group channel. Hiding or unhiding a channel lets users organize their channel list based on those that require the most attention. Note that only group channels can be hidden or unhidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to unhide or unarchive.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UnhideAChannelAsync (string channelUrl, string userId, bool? shouldUnhideAll = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await UnhideAChannelWithHttpInfoAsync(channelUrl, userId, shouldUnhideAll, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unhide a channel ## Unhide a channel  This action lets a hidden [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel) reappear on the channel list of a specific user or every member in the group channel. Hiding or unhiding a channel lets users organize their channel list based on those that require the most attention. Note that only group channels can be hidden or unhidden.  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/unhide-a-channel#1-unhide-a-channel)  `channel_url`   Type: string   Description: Specifies the URL of the channel to unhide or unarchive.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="userId">(Required) </param>
        /// <param name="shouldUnhideAll"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnhideAChannelWithHttpInfoAsync (string channelUrl, string userId, bool? shouldUnhideAll = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->UnhideAChannel");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GroupChannelApi->UnhideAChannel");

            var localVarPath = "/v3/group_channels/{channel_url}/hide";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (shouldUnhideAll != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "should_unhide_all", shouldUnhideAll)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnhideAChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update a group channel ## Update a group channel  You can update information about a group channel or a Supergroup channel using this API. You can't make any changes to the members of a channel with this API. To change members, see [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) instead. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-a-group-channel#1-update-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAGroupChannelRequest"> (optional)</param>
        /// <returns>SendbirdGroupChannelDetail</returns>
        public SendbirdGroupChannelDetail UpdateAGroupChannel (string channelUrl, string apiToken = default(string), UpdateAGroupChannelRequest updateAGroupChannelRequest = default(UpdateAGroupChannelRequest))
        {
             ApiResponse<SendbirdGroupChannelDetail> localVarResponse = UpdateAGroupChannelWithHttpInfo(channelUrl, apiToken, updateAGroupChannelRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a group channel ## Update a group channel  You can update information about a group channel or a Supergroup channel using this API. You can't make any changes to the members of a channel with this API. To change members, see [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) instead. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-a-group-channel#1-update-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAGroupChannelRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdGroupChannelDetail</returns>
        public ApiResponse<SendbirdGroupChannelDetail> UpdateAGroupChannelWithHttpInfo (string channelUrl, string apiToken = default(string), UpdateAGroupChannelRequest updateAGroupChannelRequest = default(UpdateAGroupChannelRequest))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->UpdateAGroupChannel");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateAGroupChannelRequest != null && updateAGroupChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateAGroupChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateAGroupChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdGroupChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdGroupChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdGroupChannelDetail)));
        }

        /// <summary>
        /// Update a group channel ## Update a group channel  You can update information about a group channel or a Supergroup channel using this API. You can't make any changes to the members of a channel with this API. To change members, see [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) instead. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-a-group-channel#1-update-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdGroupChannelDetail</returns>
        public async System.Threading.Tasks.Task<SendbirdGroupChannelDetail> UpdateAGroupChannelAsync (string channelUrl, string apiToken = default(string), UpdateAGroupChannelRequest updateAGroupChannelRequest = default(UpdateAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendbirdGroupChannelDetail> localVarResponse = await UpdateAGroupChannelWithHttpInfoAsync(channelUrl, apiToken, updateAGroupChannelRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a group channel ## Update a group channel  You can update information about a group channel or a Supergroup channel using this API. You can't make any changes to the members of a channel with this API. To change members, see [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) instead. See [this page](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-open-channel-vs-group-channel-vs-supergroup-channel) to learn more about channel types.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-a-group-channel#1-update-a-group-channel
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAGroupChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdGroupChannelDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendbirdGroupChannelDetail>> UpdateAGroupChannelWithHttpInfoAsync (string channelUrl, string apiToken = default(string), UpdateAGroupChannelRequest updateAGroupChannelRequest = default(UpdateAGroupChannelRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling GroupChannelApi->UpdateAGroupChannel");

            var localVarPath = "/v3/group_channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateAGroupChannelRequest != null && updateAGroupChannelRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateAGroupChannelRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateAGroupChannelRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdGroupChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdGroupChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdGroupChannelDetail)));
        }

    }
}
