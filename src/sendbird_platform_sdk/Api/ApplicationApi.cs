/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <returns>AddApnsPushConfigurationResponse</returns>
        AddApnsPushConfigurationResponse AddApnsPushConfiguration (string apiToken, AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData));

        /// <summary>
        /// Add an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddApnsPushConfigurationResponse</returns>
        ApiResponse<AddApnsPushConfigurationResponse> AddApnsPushConfigurationWithHttpInfo (string apiToken, AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData));
        /// <summary>
        /// Add a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <returns>AddFcmPushConfigurationResponse</returns>
        AddFcmPushConfigurationResponse AddFcmPushConfiguration (string apiToken, AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData));

        /// <summary>
        /// Add a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddFcmPushConfigurationResponse</returns>
        ApiResponse<AddFcmPushConfigurationResponse> AddFcmPushConfigurationWithHttpInfo (string apiToken, AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData));
        /// <summary>
        /// Add an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <returns>AddHmsPushConfigurationResponse</returns>
        AddHmsPushConfigurationResponse AddHmsPushConfiguration (string apiToken, AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData));

        /// <summary>
        /// Add an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddHmsPushConfigurationResponse</returns>
        ApiResponse<AddHmsPushConfigurationResponse> AddHmsPushConfigurationWithHttpInfo (string apiToken, AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData));
        /// <summary>
        /// Add an IP to a whitelist
        /// </summary>
        /// <remarks>
        /// ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <returns>AddIpToWhitelistResponse</returns>
        AddIpToWhitelistResponse AddIpToWhitelist (string apiToken, AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData));

        /// <summary>
        /// Add an IP to a whitelist
        /// </summary>
        /// <remarks>
        /// ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <returns>ApiResponse of AddIpToWhitelistResponse</returns>
        ApiResponse<AddIpToWhitelistResponse> AddIpToWhitelistWithHttpInfo (string apiToken, AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData));
        /// <summary>
        /// Ban users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Ban specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="banUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <returns>Object</returns>
        Object BanUsersInChannelsWithCustomChannelType (string apiToken, string customType, BanUsersInChannelsWithCustomChannelTypeData banUsersInChannelsWithCustomChannelTypeData = default(BanUsersInChannelsWithCustomChannelTypeData));

        /// <summary>
        /// Ban users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Ban specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="banUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BanUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, BanUsersInChannelsWithCustomChannelTypeData banUsersInChannelsWithCustomChannelTypeData = default(BanUsersInChannelsWithCustomChannelTypeData));
        /// <summary>
        /// Configure auto event message settings
        /// </summary>
        /// <remarks>
        /// ## Configure auto event message settings  Determines whether to automatically send event messages to group channels when events take place in an application. You can choose which auto event message to receive on the Sendbird Dashboard  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/configure-auto-event-message-settings - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="configureAutoEventData"> (optional)</param>
        /// <returns>SendBirdAutoEventMessageSettings</returns>
        SendBirdAutoEventMessageSettings ConfigureAutoEventMessages (string apiToken, ConfigureAutoEventData configureAutoEventData = default(ConfigureAutoEventData));

        /// <summary>
        /// Configure auto event message settings
        /// </summary>
        /// <remarks>
        /// ## Configure auto event message settings  Determines whether to automatically send event messages to group channels when events take place in an application. You can choose which auto event message to receive on the Sendbird Dashboard  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/configure-auto-event-message-settings - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="configureAutoEventData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdAutoEventMessageSettings</returns>
        ApiResponse<SendBirdAutoEventMessageSettings> ConfigureAutoEventMessagesWithHttpInfo (string apiToken, ConfigureAutoEventData configureAutoEventData = default(ConfigureAutoEventData));
        /// <summary>
        /// Delete allowed IPs from a whitelist
        /// </summary>
        /// <remarks>
        /// ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="ipWhitelistAddresses"></param>
        /// <returns>DeleteAllowedIpsFromWhitelistResponse</returns>
        DeleteAllowedIpsFromWhitelistResponse DeleteAllowedIpsFromWhitelist (string apiToken, List<string> ipWhitelistAddresses);

        /// <summary>
        /// Delete allowed IPs from a whitelist
        /// </summary>
        /// <remarks>
        /// ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="ipWhitelistAddresses"></param>
        /// <returns>ApiResponse of DeleteAllowedIpsFromWhitelistResponse</returns>
        ApiResponse<DeleteAllowedIpsFromWhitelistResponse> DeleteAllowedIpsFromWhitelistWithHttpInfo (string apiToken, List<string> ipWhitelistAddresses);
        /// <summary>
        /// Delete an APNs certificate
        /// </summary>
        /// <remarks>
        /// ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <returns>DeleteApnsCertificateByIdResponse</returns>
        DeleteApnsCertificateByIdResponse DeleteApnsCertificateById (string apiToken, string providerId);

        /// <summary>
        /// Delete an APNs certificate
        /// </summary>
        /// <remarks>
        /// ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <returns>ApiResponse of DeleteApnsCertificateByIdResponse</returns>
        ApiResponse<DeleteApnsCertificateByIdResponse> DeleteApnsCertificateByIdWithHttpInfo (string apiToken, string providerId);
        /// <summary>
        /// Generate a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <returns>GenerateSecondaryApiTokenResponse</returns>
        GenerateSecondaryApiTokenResponse GenerateSecondaryApiToken (string apiToken, GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData));

        /// <summary>
        /// Generate a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <returns>ApiResponse of GenerateSecondaryApiTokenResponse</returns>
        ApiResponse<GenerateSecondaryApiTokenResponse> GenerateSecondaryApiTokenWithHttpInfo (string apiToken, GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData));
        /// <summary>
        /// List auto event messages
        /// </summary>
        /// <remarks>
        /// ## List auto event messages  Retrieves a list of auto event messages that are sent in a specified application and indicates which ones are in use. Auto event messages are Admin messages that are automatically generated when a specific event occurs.  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/list-auto-event-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>SendBirdAutoEventMessageSettings</returns>
        SendBirdAutoEventMessageSettings ListAutoEventMessages (string apiToken);

        /// <summary>
        /// List auto event messages
        /// </summary>
        /// <remarks>
        /// ## List auto event messages  Retrieves a list of auto event messages that are sent in a specified application and indicates which ones are in use. Auto event messages are Admin messages that are automatically generated when a specific event occurs.  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/list-auto-event-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of SendBirdAutoEventMessageSettings</returns>
        ApiResponse<SendBirdAutoEventMessageSettings> ListAutoEventMessagesWithHttpInfo (string apiToken);
        /// <summary>
        /// List banned users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Retrieves a list of users banned from channels with the specified custom channel type.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>CustomTypeListBannedUsersResponse</returns>
        CustomTypeListBannedUsersResponse ListBannedUsersInChannelsWithCustomChannelType (string apiToken, string customType, string token = default, int? limit = default);

        /// <summary>
        /// List banned users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Retrieves a list of users banned from channels with the specified custom channel type.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of CustomTypeListBannedUsersResponse</returns>
        ApiResponse<CustomTypeListBannedUsersResponse> ListBannedUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, string token = default, int? limit = default);
        /// <summary>
        /// List muted users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Retrieves a list of the muted users in channels with a custom channel type.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ListMutedUsersInChannelsWithCustomChannelType200Response</returns>
        ListMutedUsersInChannelsWithCustomChannelType200Response ListMutedUsersInChannelsWithCustomChannelType (string apiToken, string customType, string token = default, int? limit = default);

        /// <summary>
        /// List muted users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Retrieves a list of the muted users in channels with a custom channel type.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of ListMutedUsersInChannelsWithCustomChannelType200Response</returns>
        ApiResponse<ListMutedUsersInChannelsWithCustomChannelType200Response> ListMutedUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, string token = default, int? limit = default);
        /// <summary>
        /// List push configurations
        /// </summary>
        /// <remarks>
        /// ## List push configurations  Retrieves a list of an application's registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <returns>ListPushConfigurationsResponse</returns>
        ListPushConfigurationsResponse ListPushConfigurations (string apiToken, string pushType);

        /// <summary>
        /// List push configurations
        /// </summary>
        /// <remarks>
        /// ## List push configurations  Retrieves a list of an application's registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <returns>ApiResponse of ListPushConfigurationsResponse</returns>
        ApiResponse<ListPushConfigurationsResponse> ListPushConfigurationsWithHttpInfo (string apiToken, string pushType);
        /// <summary>
        /// List push notification content templates
        /// </summary>
        /// <remarks>
        /// ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ListPushNotificationContentTemplatesResponse</returns>
        ListPushNotificationContentTemplatesResponse ListPushNotificationContentTemplates (string apiToken);

        /// <summary>
        /// List push notification content templates
        /// </summary>
        /// <remarks>
        /// ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ListPushNotificationContentTemplatesResponse</returns>
        ApiResponse<ListPushNotificationContentTemplatesResponse> ListPushNotificationContentTemplatesWithHttpInfo (string apiToken);
        /// <summary>
        /// List secondary API tokens
        /// </summary>
        /// <remarks>
        /// ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ListSecondaryApiTokensResponse</returns>
        ListSecondaryApiTokensResponse ListSecondaryApiTokens (string apiToken);

        /// <summary>
        /// List secondary API tokens
        /// </summary>
        /// <remarks>
        /// ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ListSecondaryApiTokensResponse</returns>
        ApiResponse<ListSecondaryApiTokensResponse> ListSecondaryApiTokensWithHttpInfo (string apiToken);
        /// <summary>
        /// Mute users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Mutes specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="muteUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <returns>Object</returns>
        Object MuteUsersInChannelsWithCustomChannelType (string apiToken, string customType, MuteUsersInChannelsWithCustomChannelTypeData muteUsersInChannelsWithCustomChannelTypeData = default(MuteUsersInChannelsWithCustomChannelTypeData));

        /// <summary>
        /// Mute users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Mutes specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="muteUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MuteUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, MuteUsersInChannelsWithCustomChannelTypeData muteUsersInChannelsWithCustomChannelTypeData = default(MuteUsersInChannelsWithCustomChannelTypeData));
        /// <summary>
        /// Remove a push configuration
        /// </summary>
        /// <remarks>
        /// ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <returns>RemovePushConfigurationByIdResponse</returns>
        RemovePushConfigurationByIdResponse RemovePushConfigurationById (string apiToken, string pushType, string providerId);

        /// <summary>
        /// Remove a push configuration
        /// </summary>
        /// <remarks>
        /// ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <returns>ApiResponse of RemovePushConfigurationByIdResponse</returns>
        ApiResponse<RemovePushConfigurationByIdResponse> RemovePushConfigurationByIdWithHttpInfo (string apiToken, string pushType, string providerId);
        /// <summary>
        /// Retrieve an IP whitelist
        /// </summary>
        /// <remarks>
        /// ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don't specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>RetrieveIpWhitelistResponse</returns>
        RetrieveIpWhitelistResponse RetrieveIpWhitelist (string apiToken);

        /// <summary>
        /// Retrieve an IP whitelist
        /// </summary>
        /// <remarks>
        /// ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don't specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of RetrieveIpWhitelistResponse</returns>
        ApiResponse<RetrieveIpWhitelistResponse> RetrieveIpWhitelistWithHttpInfo (string apiToken);
        /// <summary>
        /// Revoke a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <returns>RevokeSecondaryApiTokenByTokenResponse</returns>
        RevokeSecondaryApiTokenByTokenResponse RevokeSecondaryApiTokenByToken (string apiToken, string apiToken2);

        /// <summary>
        /// Revoke a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <returns>ApiResponse of RevokeSecondaryApiTokenByTokenResponse</returns>
        ApiResponse<RevokeSecondaryApiTokenByTokenResponse> RevokeSecondaryApiTokenByTokenWithHttpInfo (string apiToken, string apiToken2);
        /// <summary>
        /// Message moderation
        /// </summary>
        /// <remarks>
        /// ## 
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="setDomainFilterData"> (optional)</param>
        /// <returns>SendBirdChannelResponse</returns>
        SendBirdChannelResponse SetDomainFilter (string apiToken, string customType, SetDomainFilterData setDomainFilterData = default(SetDomainFilterData));

        /// <summary>
        /// Message moderation
        /// </summary>
        /// <remarks>
        /// ## 
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="setDomainFilterData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdChannelResponse</returns>
        ApiResponse<SendBirdChannelResponse> SetDomainFilterWithHttpInfo (string apiToken, string customType, SetDomainFilterData setDomainFilterData = default(SetDomainFilterData));
        /// <summary>
        /// Unban users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Unban specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <returns>Object</returns>
        Object UnbanUsersInChannelsWithCustomChannelType (string apiToken, string customType, List<string> userIds);

        /// <summary>
        /// Unban users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Unban specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UnbanUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, List<string> userIds);
        /// <summary>
        /// Unmute users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Unmute specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <returns>Object</returns>
        Object UnmuteUsersInChannelsWithCustomChannelType (string apiToken, string customType, List<string> userIds);

        /// <summary>
        /// Unmute users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Unmute specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UnmuteUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, List<string> userIds);
        /// <summary>
        /// Update an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateApnsPushConfigurationByIdResponse</returns>
        UpdateApnsPushConfigurationByIdResponse UpdateApnsPushConfigurationById (string apiToken, string providerId, UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData));

        /// <summary>
        /// Update an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateApnsPushConfigurationByIdResponse</returns>
        ApiResponse<UpdateApnsPushConfigurationByIdResponse> UpdateApnsPushConfigurationByIdWithHttpInfo (string apiToken, string providerId, UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData));
        /// <summary>
        /// Update default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  > __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>UpdateDefaultChannelInvitationPreferenceResponse</returns>
        UpdateDefaultChannelInvitationPreferenceResponse UpdateDefaultChannelInvitationPreference (string apiToken, UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData));

        /// <summary>
        /// Update default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  > __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>ApiResponse of UpdateDefaultChannelInvitationPreferenceResponse</returns>
        ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse> UpdateDefaultChannelInvitationPreferenceWithHttpInfo (string apiToken, UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData));
        /// <summary>
        /// Update a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateFcmPushConfigurationByIdResponse</returns>
        UpdateFcmPushConfigurationByIdResponse UpdateFcmPushConfigurationById (string apiToken, string providerId, UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData));

        /// <summary>
        /// Update a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateFcmPushConfigurationByIdResponse</returns>
        ApiResponse<UpdateFcmPushConfigurationByIdResponse> UpdateFcmPushConfigurationByIdWithHttpInfo (string apiToken, string providerId, UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData));
        /// <summary>
        /// Update an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateHmsPushConfigurationByIdResponse</returns>
        UpdateHmsPushConfigurationByIdResponse UpdateHmsPushConfigurationById (string apiToken, string providerId, UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData));

        /// <summary>
        /// Update an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateHmsPushConfigurationByIdResponse</returns>
        ApiResponse<UpdateHmsPushConfigurationByIdResponse> UpdateHmsPushConfigurationByIdWithHttpInfo (string apiToken, string providerId, UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData));
        /// <summary>
        /// Update a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <returns>UpdatePushNotificationContentTemplateResponse</returns>
        UpdatePushNotificationContentTemplateResponse UpdatePushNotificationContentTemplate (string apiToken, string templateName, UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData));

        /// <summary>
        /// Update a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <returns>ApiResponse of UpdatePushNotificationContentTemplateResponse</returns>
        ApiResponse<UpdatePushNotificationContentTemplateResponse> UpdatePushNotificationContentTemplateWithHttpInfo (string apiToken, string templateName, UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData));
        /// <summary>
        /// View default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  > __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ViewDefaultChannelInvitationPreferenceResponse</returns>
        ViewDefaultChannelInvitationPreferenceResponse ViewDefaultChannelInvitationPreference (string apiToken);

        /// <summary>
        /// View default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  > __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ViewDefaultChannelInvitationPreferenceResponse</returns>
        ApiResponse<ViewDefaultChannelInvitationPreferenceResponse> ViewDefaultChannelInvitationPreferenceWithHttpInfo (string apiToken);
        /// <summary>
        /// View a push configuration
        /// </summary>
        /// <remarks>
        /// ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <returns>ViewPushConfigurationByIdResponse</returns>
        ViewPushConfigurationByIdResponse ViewPushConfigurationById (string apiToken, string pushType, string providerId);

        /// <summary>
        /// View a push configuration
        /// </summary>
        /// <remarks>
        /// ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <returns>ApiResponse of ViewPushConfigurationByIdResponse</returns>
        ApiResponse<ViewPushConfigurationByIdResponse> ViewPushConfigurationByIdWithHttpInfo (string apiToken, string pushType, string providerId);
        /// <summary>
        /// View a push notification content template
        /// </summary>
        /// <remarks>
        /// ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <returns>ViewPushNotificationContentTemplateResponse</returns>
        ViewPushNotificationContentTemplateResponse ViewPushNotificationContentTemplate (string apiToken, string templateName);

        /// <summary>
        /// View a push notification content template
        /// </summary>
        /// <remarks>
        /// ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of ViewPushNotificationContentTemplateResponse</returns>
        ApiResponse<ViewPushNotificationContentTemplateResponse> ViewPushNotificationContentTemplateWithHttpInfo (string apiToken, string templateName);
        /// <summary>
        /// View a secondary API token
        /// </summary>
        /// <remarks>
        /// ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <returns>ViewSecondaryApiTokenByTokenResponse</returns>
        ViewSecondaryApiTokenByTokenResponse ViewSecondaryApiTokenByToken (string apiToken, string apiToken2);

        /// <summary>
        /// View a secondary API token
        /// </summary>
        /// <remarks>
        /// ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <returns>ApiResponse of ViewSecondaryApiTokenByTokenResponse</returns>
        ApiResponse<ViewSecondaryApiTokenByTokenResponse> ViewSecondaryApiTokenByTokenWithHttpInfo (string apiToken, string apiToken2);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddApnsPushConfigurationResponse</returns>
        System.Threading.Tasks.Task<AddApnsPushConfigurationResponse> AddApnsPushConfigurationAsync (string apiToken, AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddApnsPushConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddApnsPushConfigurationResponse>> AddApnsPushConfigurationWithHttpInfoAsync (string apiToken, AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Add a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddFcmPushConfigurationResponse</returns>
        System.Threading.Tasks.Task<AddFcmPushConfigurationResponse> AddFcmPushConfigurationAsync (string apiToken, AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddFcmPushConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddFcmPushConfigurationResponse>> AddFcmPushConfigurationWithHttpInfoAsync (string apiToken, AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Add an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddHmsPushConfigurationResponse</returns>
        System.Threading.Tasks.Task<AddHmsPushConfigurationResponse> AddHmsPushConfigurationAsync (string apiToken, AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddHmsPushConfigurationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddHmsPushConfigurationResponse>> AddHmsPushConfigurationWithHttpInfoAsync (string apiToken, AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Add an IP to a whitelist
        /// </summary>
        /// <remarks>
        /// ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddIpToWhitelistResponse</returns>
        System.Threading.Tasks.Task<AddIpToWhitelistResponse> AddIpToWhitelistAsync (string apiToken, AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Add an IP to a whitelist
        /// </summary>
        /// <remarks>
        /// ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddIpToWhitelistResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddIpToWhitelistResponse>> AddIpToWhitelistWithHttpInfoAsync (string apiToken, AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Ban users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Ban specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="banUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BanUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, BanUsersInChannelsWithCustomChannelTypeData banUsersInChannelsWithCustomChannelTypeData = default(BanUsersInChannelsWithCustomChannelTypeData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Ban users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Ban specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="banUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BanUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, BanUsersInChannelsWithCustomChannelTypeData banUsersInChannelsWithCustomChannelTypeData = default(BanUsersInChannelsWithCustomChannelTypeData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Configure auto event message settings
        /// </summary>
        /// <remarks>
        /// ## Configure auto event message settings  Determines whether to automatically send event messages to group channels when events take place in an application. You can choose which auto event message to receive on the Sendbird Dashboard  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/configure-auto-event-message-settings - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="configureAutoEventData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdAutoEventMessageSettings</returns>
        System.Threading.Tasks.Task<SendBirdAutoEventMessageSettings> ConfigureAutoEventMessagesAsync (string apiToken, ConfigureAutoEventData configureAutoEventData = default(ConfigureAutoEventData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Configure auto event message settings
        /// </summary>
        /// <remarks>
        /// ## Configure auto event message settings  Determines whether to automatically send event messages to group channels when events take place in an application. You can choose which auto event message to receive on the Sendbird Dashboard  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/configure-auto-event-message-settings - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="configureAutoEventData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdAutoEventMessageSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdAutoEventMessageSettings>> ConfigureAutoEventMessagesWithHttpInfoAsync (string apiToken, ConfigureAutoEventData configureAutoEventData = default(ConfigureAutoEventData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete allowed IPs from a whitelist
        /// </summary>
        /// <remarks>
        /// ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteAllowedIpsFromWhitelistResponse</returns>
        System.Threading.Tasks.Task<DeleteAllowedIpsFromWhitelistResponse> DeleteAllowedIpsFromWhitelistAsync (string apiToken, List<string> ipWhitelistAddresses, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete allowed IPs from a whitelist
        /// </summary>
        /// <remarks>
        /// ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteAllowedIpsFromWhitelistResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAllowedIpsFromWhitelistResponse>> DeleteAllowedIpsFromWhitelistWithHttpInfoAsync (string apiToken, List<string> ipWhitelistAddresses, CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete an APNs certificate
        /// </summary>
        /// <remarks>
        /// ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteApnsCertificateByIdResponse</returns>
        System.Threading.Tasks.Task<DeleteApnsCertificateByIdResponse> DeleteApnsCertificateByIdAsync (string apiToken, string providerId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an APNs certificate
        /// </summary>
        /// <remarks>
        /// ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteApnsCertificateByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteApnsCertificateByIdResponse>> DeleteApnsCertificateByIdWithHttpInfoAsync (string apiToken, string providerId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Generate a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GenerateSecondaryApiTokenResponse</returns>
        System.Threading.Tasks.Task<GenerateSecondaryApiTokenResponse> GenerateSecondaryApiTokenAsync (string apiToken, GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GenerateSecondaryApiTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateSecondaryApiTokenResponse>> GenerateSecondaryApiTokenWithHttpInfoAsync (string apiToken, GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData), CancellationToken cancellationToken = default);
        /// <summary>
        /// List auto event messages
        /// </summary>
        /// <remarks>
        /// ## List auto event messages  Retrieves a list of auto event messages that are sent in a specified application and indicates which ones are in use. Auto event messages are Admin messages that are automatically generated when a specific event occurs.  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/list-auto-event-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdAutoEventMessageSettings</returns>
        System.Threading.Tasks.Task<SendBirdAutoEventMessageSettings> ListAutoEventMessagesAsync (string apiToken, CancellationToken cancellationToken = default);

        /// <summary>
        /// List auto event messages
        /// </summary>
        /// <remarks>
        /// ## List auto event messages  Retrieves a list of auto event messages that are sent in a specified application and indicates which ones are in use. Auto event messages are Admin messages that are automatically generated when a specific event occurs.  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/list-auto-event-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdAutoEventMessageSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdAutoEventMessageSettings>> ListAutoEventMessagesWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default);
        /// <summary>
        /// List banned users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Retrieves a list of users banned from channels with the specified custom channel type.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomTypeListBannedUsersResponse</returns>
        System.Threading.Tasks.Task<CustomTypeListBannedUsersResponse> ListBannedUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, string token = default, int? limit = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List banned users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Retrieves a list of users banned from channels with the specified custom channel type.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomTypeListBannedUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomTypeListBannedUsersResponse>> ListBannedUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, string token = default, int? limit = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// List muted users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Retrieves a list of the muted users in channels with a custom channel type.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMutedUsersInChannelsWithCustomChannelType200Response</returns>
        System.Threading.Tasks.Task<ListMutedUsersInChannelsWithCustomChannelType200Response> ListMutedUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, string token = default, int? limit = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List muted users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Retrieves a list of the muted users in channels with a custom channel type.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMutedUsersInChannelsWithCustomChannelType200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMutedUsersInChannelsWithCustomChannelType200Response>> ListMutedUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, string token = default, int? limit = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// List push configurations
        /// </summary>
        /// <remarks>
        /// ## List push configurations  Retrieves a list of an application's registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListPushConfigurationsResponse</returns>
        System.Threading.Tasks.Task<ListPushConfigurationsResponse> ListPushConfigurationsAsync (string apiToken, string pushType, CancellationToken cancellationToken = default);

        /// <summary>
        /// List push configurations
        /// </summary>
        /// <remarks>
        /// ## List push configurations  Retrieves a list of an application's registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListPushConfigurationsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPushConfigurationsResponse>> ListPushConfigurationsWithHttpInfoAsync (string apiToken, string pushType, CancellationToken cancellationToken = default);
        /// <summary>
        /// List push notification content templates
        /// </summary>
        /// <remarks>
        /// ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListPushNotificationContentTemplatesResponse</returns>
        System.Threading.Tasks.Task<ListPushNotificationContentTemplatesResponse> ListPushNotificationContentTemplatesAsync (string apiToken, CancellationToken cancellationToken = default);

        /// <summary>
        /// List push notification content templates
        /// </summary>
        /// <remarks>
        /// ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListPushNotificationContentTemplatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPushNotificationContentTemplatesResponse>> ListPushNotificationContentTemplatesWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default);
        /// <summary>
        /// List secondary API tokens
        /// </summary>
        /// <remarks>
        /// ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListSecondaryApiTokensResponse</returns>
        System.Threading.Tasks.Task<ListSecondaryApiTokensResponse> ListSecondaryApiTokensAsync (string apiToken, CancellationToken cancellationToken = default);

        /// <summary>
        /// List secondary API tokens
        /// </summary>
        /// <remarks>
        /// ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListSecondaryApiTokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSecondaryApiTokensResponse>> ListSecondaryApiTokensWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default);
        /// <summary>
        /// Mute users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Mutes specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="muteUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MuteUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, MuteUsersInChannelsWithCustomChannelTypeData muteUsersInChannelsWithCustomChannelTypeData = default(MuteUsersInChannelsWithCustomChannelTypeData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Mute users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Mutes specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="muteUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MuteUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, MuteUsersInChannelsWithCustomChannelTypeData muteUsersInChannelsWithCustomChannelTypeData = default(MuteUsersInChannelsWithCustomChannelTypeData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Remove a push configuration
        /// </summary>
        /// <remarks>
        /// ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemovePushConfigurationByIdResponse</returns>
        System.Threading.Tasks.Task<RemovePushConfigurationByIdResponse> RemovePushConfigurationByIdAsync (string apiToken, string pushType, string providerId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a push configuration
        /// </summary>
        /// <remarks>
        /// ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemovePushConfigurationByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemovePushConfigurationByIdResponse>> RemovePushConfigurationByIdWithHttpInfoAsync (string apiToken, string pushType, string providerId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve an IP whitelist
        /// </summary>
        /// <remarks>
        /// ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don't specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RetrieveIpWhitelistResponse</returns>
        System.Threading.Tasks.Task<RetrieveIpWhitelistResponse> RetrieveIpWhitelistAsync (string apiToken, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve an IP whitelist
        /// </summary>
        /// <remarks>
        /// ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don't specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RetrieveIpWhitelistResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveIpWhitelistResponse>> RetrieveIpWhitelistWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default);
        /// <summary>
        /// Revoke a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RevokeSecondaryApiTokenByTokenResponse</returns>
        System.Threading.Tasks.Task<RevokeSecondaryApiTokenByTokenResponse> RevokeSecondaryApiTokenByTokenAsync (string apiToken, string apiToken2, CancellationToken cancellationToken = default);

        /// <summary>
        /// Revoke a secondary API token
        /// </summary>
        /// <remarks>
        /// ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RevokeSecondaryApiTokenByTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RevokeSecondaryApiTokenByTokenResponse>> RevokeSecondaryApiTokenByTokenWithHttpInfoAsync (string apiToken, string apiToken2, CancellationToken cancellationToken = default);
        /// <summary>
        /// Message moderation
        /// </summary>
        /// <remarks>
        /// ## 
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="setDomainFilterData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdChannelResponse</returns>
        System.Threading.Tasks.Task<SendBirdChannelResponse> SetDomainFilterAsync (string apiToken, string customType, SetDomainFilterData setDomainFilterData = default(SetDomainFilterData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Message moderation
        /// </summary>
        /// <remarks>
        /// ## 
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="setDomainFilterData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdChannelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdChannelResponse>> SetDomainFilterWithHttpInfoAsync (string apiToken, string customType, SetDomainFilterData setDomainFilterData = default(SetDomainFilterData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Unban users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Unban specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UnbanUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, List<string> userIds, CancellationToken cancellationToken = default);

        /// <summary>
        /// Unban users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Unban specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnbanUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, List<string> userIds, CancellationToken cancellationToken = default);
        /// <summary>
        /// Unmute users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Unmute specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UnmuteUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, List<string> userIds, CancellationToken cancellationToken = default);

        /// <summary>
        /// Unmute users in channels with a custom channel type
        /// </summary>
        /// <remarks>
        /// ## Unmute specified users in channels with a custom channel type at once.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnmuteUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, List<string> userIds, CancellationToken cancellationToken = default);
        /// <summary>
        /// Update an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateApnsPushConfigurationByIdResponse</returns>
        System.Threading.Tasks.Task<UpdateApnsPushConfigurationByIdResponse> UpdateApnsPushConfigurationByIdAsync (string apiToken, string providerId, UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an APNs push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateApnsPushConfigurationByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateApnsPushConfigurationByIdResponse>> UpdateApnsPushConfigurationByIdWithHttpInfoAsync (string apiToken, string providerId, UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Update default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  > __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateDefaultChannelInvitationPreferenceResponse</returns>
        System.Threading.Tasks.Task<UpdateDefaultChannelInvitationPreferenceResponse> UpdateDefaultChannelInvitationPreferenceAsync (string apiToken, UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Update default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  > __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateDefaultChannelInvitationPreferenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse>> UpdateDefaultChannelInvitationPreferenceWithHttpInfoAsync (string apiToken, UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateFcmPushConfigurationByIdResponse</returns>
        System.Threading.Tasks.Task<UpdateFcmPushConfigurationByIdResponse> UpdateFcmPushConfigurationByIdAsync (string apiToken, string providerId, UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a FCM push configuration
        /// </summary>
        /// <remarks>
        /// ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateFcmPushConfigurationByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateFcmPushConfigurationByIdResponse>> UpdateFcmPushConfigurationByIdWithHttpInfoAsync (string apiToken, string providerId, UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Update an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateHmsPushConfigurationByIdResponse</returns>
        System.Threading.Tasks.Task<UpdateHmsPushConfigurationByIdResponse> UpdateHmsPushConfigurationByIdAsync (string apiToken, string providerId, UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an HMS push configuration
        /// </summary>
        /// <remarks>
        /// ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateHmsPushConfigurationByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateHmsPushConfigurationByIdResponse>> UpdateHmsPushConfigurationByIdWithHttpInfoAsync (string apiToken, string providerId, UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdatePushNotificationContentTemplateResponse</returns>
        System.Threading.Tasks.Task<UpdatePushNotificationContentTemplateResponse> UpdatePushNotificationContentTemplateAsync (string apiToken, string templateName, UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdatePushNotificationContentTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePushNotificationContentTemplateResponse>> UpdatePushNotificationContentTemplateWithHttpInfoAsync (string apiToken, string templateName, UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData), CancellationToken cancellationToken = default);
        /// <summary>
        /// View default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  > __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewDefaultChannelInvitationPreferenceResponse</returns>
        System.Threading.Tasks.Task<ViewDefaultChannelInvitationPreferenceResponse> ViewDefaultChannelInvitationPreferenceAsync (string apiToken, CancellationToken cancellationToken = default);

        /// <summary>
        /// View default channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  > __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewDefaultChannelInvitationPreferenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewDefaultChannelInvitationPreferenceResponse>> ViewDefaultChannelInvitationPreferenceWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default);
        /// <summary>
        /// View a push configuration
        /// </summary>
        /// <remarks>
        /// ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushConfigurationByIdResponse</returns>
        System.Threading.Tasks.Task<ViewPushConfigurationByIdResponse> ViewPushConfigurationByIdAsync (string apiToken, string pushType, string providerId, CancellationToken cancellationToken = default);

        /// <summary>
        /// View a push configuration
        /// </summary>
        /// <remarks>
        /// ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushConfigurationByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewPushConfigurationByIdResponse>> ViewPushConfigurationByIdWithHttpInfoAsync (string apiToken, string pushType, string providerId, CancellationToken cancellationToken = default);
        /// <summary>
        /// View a push notification content template
        /// </summary>
        /// <remarks>
        /// ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushNotificationContentTemplateResponse</returns>
        System.Threading.Tasks.Task<ViewPushNotificationContentTemplateResponse> ViewPushNotificationContentTemplateAsync (string apiToken, string templateName, CancellationToken cancellationToken = default);

        /// <summary>
        /// View a push notification content template
        /// </summary>
        /// <remarks>
        /// ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushNotificationContentTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewPushNotificationContentTemplateResponse>> ViewPushNotificationContentTemplateWithHttpInfoAsync (string apiToken, string templateName, CancellationToken cancellationToken = default);
        /// <summary>
        /// View a secondary API token
        /// </summary>
        /// <remarks>
        /// ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewSecondaryApiTokenByTokenResponse</returns>
        System.Threading.Tasks.Task<ViewSecondaryApiTokenByTokenResponse> ViewSecondaryApiTokenByTokenAsync (string apiToken, string apiToken2, CancellationToken cancellationToken = default);

        /// <summary>
        /// View a secondary API token
        /// </summary>
        /// <remarks>
        /// ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewSecondaryApiTokenByTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewSecondaryApiTokenByTokenResponse>> ViewSecondaryApiTokenByTokenWithHttpInfoAsync (string apiToken, string apiToken2, CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationApi : IApplicationApi
    {
        private sendbird_platform_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationApi(String basePath)
        {
            this.Configuration = new sendbird_platform_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// </summary>
        /// <returns></returns>
        public ApplicationApi()
        {
            this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationApi(sendbird_platform_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird_platform_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird_platform_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add an APNs push configuration ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <returns>AddApnsPushConfigurationResponse</returns>
        public AddApnsPushConfigurationResponse AddApnsPushConfiguration (string apiToken, AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData))
        {
             ApiResponse<AddApnsPushConfigurationResponse> localVarResponse = AddApnsPushConfigurationWithHttpInfo(apiToken, addApnsPushConfigurationData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an APNs push configuration ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddApnsPushConfigurationResponse</returns>
        public ApiResponse<AddApnsPushConfigurationResponse> AddApnsPushConfigurationWithHttpInfo (string apiToken, AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->AddApnsPushConfiguration");

            var localVarPath = "/v3/applications/push/apns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addApnsPushConfigurationData != null && addApnsPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addApnsPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addApnsPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddApnsPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddApnsPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddApnsPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddApnsPushConfigurationResponse)));
        }

        /// <summary>
        /// Add an APNs push configuration ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddApnsPushConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<AddApnsPushConfigurationResponse> AddApnsPushConfigurationAsync (string apiToken, AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData), CancellationToken cancellationToken = default)
        {
             ApiResponse<AddApnsPushConfigurationResponse> localVarResponse = await AddApnsPushConfigurationWithHttpInfoAsync(apiToken, addApnsPushConfigurationData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an APNs push configuration ## Add an APNs push configuration  Registers an APNs (Apple Push Notification service) push configuration for your client app. To send push notifications to iOS devices, your should first register the APNs push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: To upload a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-apns-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addApnsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddApnsPushConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddApnsPushConfigurationResponse>> AddApnsPushConfigurationWithHttpInfoAsync (string apiToken, AddApnsPushConfigurationData addApnsPushConfigurationData = default(AddApnsPushConfigurationData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->AddApnsPushConfiguration");

            var localVarPath = "/v3/applications/push/apns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addApnsPushConfigurationData != null && addApnsPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addApnsPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addApnsPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddApnsPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddApnsPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddApnsPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddApnsPushConfigurationResponse)));
        }

        /// <summary>
        /// Add a FCM push configuration ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <returns>AddFcmPushConfigurationResponse</returns>
        public AddFcmPushConfigurationResponse AddFcmPushConfiguration (string apiToken, AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData))
        {
             ApiResponse<AddFcmPushConfigurationResponse> localVarResponse = AddFcmPushConfigurationWithHttpInfo(apiToken, addFcmPushConfigurationData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a FCM push configuration ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddFcmPushConfigurationResponse</returns>
        public ApiResponse<AddFcmPushConfigurationResponse> AddFcmPushConfigurationWithHttpInfo (string apiToken, AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->AddFcmPushConfiguration");

            var localVarPath = "/v3/applications/push/fcm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addFcmPushConfigurationData != null && addFcmPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addFcmPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addFcmPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFcmPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddFcmPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddFcmPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddFcmPushConfigurationResponse)));
        }

        /// <summary>
        /// Add a FCM push configuration ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddFcmPushConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<AddFcmPushConfigurationResponse> AddFcmPushConfigurationAsync (string apiToken, AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData), CancellationToken cancellationToken = default)
        {
             ApiResponse<AddFcmPushConfigurationResponse> localVarResponse = await AddFcmPushConfigurationWithHttpInfoAsync(apiToken, addFcmPushConfigurationData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a FCM push configuration ## Add a FCM push configuration  Registers a FCM (Firebase Cloud Messaging) push configuration for your client app. To send push notifications to Android devices, you should first register the FCM push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-a-fcm-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addFcmPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddFcmPushConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddFcmPushConfigurationResponse>> AddFcmPushConfigurationWithHttpInfoAsync (string apiToken, AddFcmPushConfigurationData addFcmPushConfigurationData = default(AddFcmPushConfigurationData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->AddFcmPushConfiguration");

            var localVarPath = "/v3/applications/push/fcm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addFcmPushConfigurationData != null && addFcmPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addFcmPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addFcmPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFcmPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddFcmPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddFcmPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddFcmPushConfigurationResponse)));
        }

        /// <summary>
        /// Add an HMS push configuration ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <returns>AddHmsPushConfigurationResponse</returns>
        public AddHmsPushConfigurationResponse AddHmsPushConfiguration (string apiToken, AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData))
        {
             ApiResponse<AddHmsPushConfigurationResponse> localVarResponse = AddHmsPushConfigurationWithHttpInfo(apiToken, addHmsPushConfigurationData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an HMS push configuration ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <returns>ApiResponse of AddHmsPushConfigurationResponse</returns>
        public ApiResponse<AddHmsPushConfigurationResponse> AddHmsPushConfigurationWithHttpInfo (string apiToken, AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->AddHmsPushConfiguration");

            var localVarPath = "/v3/applications/push/hms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addHmsPushConfigurationData != null && addHmsPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addHmsPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addHmsPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHmsPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddHmsPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddHmsPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddHmsPushConfigurationResponse)));
        }

        /// <summary>
        /// Add an HMS push configuration ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddHmsPushConfigurationResponse</returns>
        public async System.Threading.Tasks.Task<AddHmsPushConfigurationResponse> AddHmsPushConfigurationAsync (string apiToken, AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData), CancellationToken cancellationToken = default)
        {
             ApiResponse<AddHmsPushConfigurationResponse> localVarResponse = await AddHmsPushConfigurationWithHttpInfoAsync(apiToken, addHmsPushConfigurationData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an HMS push configuration ## Add an HMS push configuration  Registers an HMS (Huawei Mobile Services) push configuration for your client app. To send push notifications to Android devices for HMS, you should first register the HMS push configuration. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-hms-push-configuration
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addHmsPushConfigurationData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddHmsPushConfigurationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddHmsPushConfigurationResponse>> AddHmsPushConfigurationWithHttpInfoAsync (string apiToken, AddHmsPushConfigurationData addHmsPushConfigurationData = default(AddHmsPushConfigurationData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->AddHmsPushConfiguration");

            var localVarPath = "/v3/applications/push/hms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addHmsPushConfigurationData != null && addHmsPushConfigurationData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addHmsPushConfigurationData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addHmsPushConfigurationData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddHmsPushConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddHmsPushConfigurationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddHmsPushConfigurationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddHmsPushConfigurationResponse)));
        }

        /// <summary>
        /// Add an IP to a whitelist ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <returns>AddIpToWhitelistResponse</returns>
        public AddIpToWhitelistResponse AddIpToWhitelist (string apiToken, AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData))
        {
             ApiResponse<AddIpToWhitelistResponse> localVarResponse = AddIpToWhitelistWithHttpInfo(apiToken, addIpToWhitelistData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an IP to a whitelist ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <returns>ApiResponse of AddIpToWhitelistResponse</returns>
        public ApiResponse<AddIpToWhitelistResponse> AddIpToWhitelistWithHttpInfo (string apiToken, AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->AddIpToWhitelist");

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addIpToWhitelistData != null && addIpToWhitelistData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addIpToWhitelistData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addIpToWhitelistData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddIpToWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddIpToWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddIpToWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddIpToWhitelistResponse)));
        }

        /// <summary>
        /// Add an IP to a whitelist ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddIpToWhitelistResponse</returns>
        public async System.Threading.Tasks.Task<AddIpToWhitelistResponse> AddIpToWhitelistAsync (string apiToken, AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData), CancellationToken cancellationToken = default)
        {
             ApiResponse<AddIpToWhitelistResponse> localVarResponse = await AddIpToWhitelistWithHttpInfoAsync(apiToken, addIpToWhitelistData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an IP to a whitelist ## Add an IP to a whitelist  Adds IP addresses and ranges to your Sendbird application settings. Both currently added and any previously added IPs are granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-add-an-ip-to-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addIpToWhitelistData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddIpToWhitelistResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddIpToWhitelistResponse>> AddIpToWhitelistWithHttpInfoAsync (string apiToken, AddIpToWhitelistData addIpToWhitelistData = default(AddIpToWhitelistData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->AddIpToWhitelist");

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addIpToWhitelistData != null && addIpToWhitelistData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addIpToWhitelistData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addIpToWhitelistData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddIpToWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddIpToWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddIpToWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddIpToWhitelistResponse)));
        }

        /// <summary>
        /// Ban users in channels with a custom channel type ## Ban specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="banUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <returns>Object</returns>
        public Object BanUsersInChannelsWithCustomChannelType (string apiToken, string customType, BanUsersInChannelsWithCustomChannelTypeData banUsersInChannelsWithCustomChannelTypeData = default(BanUsersInChannelsWithCustomChannelTypeData))
        {
             ApiResponse<Object> localVarResponse = BanUsersInChannelsWithCustomChannelTypeWithHttpInfo(apiToken, customType, banUsersInChannelsWithCustomChannelTypeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ban users in channels with a custom channel type ## Ban specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="banUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> BanUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, BanUsersInChannelsWithCustomChannelTypeData banUsersInChannelsWithCustomChannelTypeData = default(BanUsersInChannelsWithCustomChannelTypeData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->BanUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->BanUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (banUsersInChannelsWithCustomChannelTypeData != null && banUsersInChannelsWithCustomChannelTypeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(banUsersInChannelsWithCustomChannelTypeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = banUsersInChannelsWithCustomChannelTypeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BanUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Ban users in channels with a custom channel type ## Ban specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="banUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BanUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, BanUsersInChannelsWithCustomChannelTypeData banUsersInChannelsWithCustomChannelTypeData = default(BanUsersInChannelsWithCustomChannelTypeData), CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await BanUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync(apiToken, customType, banUsersInChannelsWithCustomChannelTypeData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ban users in channels with a custom channel type ## Ban specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="banUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BanUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, BanUsersInChannelsWithCustomChannelTypeData banUsersInChannelsWithCustomChannelTypeData = default(BanUsersInChannelsWithCustomChannelTypeData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->BanUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->BanUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (banUsersInChannelsWithCustomChannelTypeData != null && banUsersInChannelsWithCustomChannelTypeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(banUsersInChannelsWithCustomChannelTypeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = banUsersInChannelsWithCustomChannelTypeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BanUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Configure auto event message settings ## Configure auto event message settings  Determines whether to automatically send event messages to group channels when events take place in an application. You can choose which auto event message to receive on the Sendbird Dashboard  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/configure-auto-event-message-settings - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="configureAutoEventData"> (optional)</param>
        /// <returns>SendBirdAutoEventMessageSettings</returns>
        public SendBirdAutoEventMessageSettings ConfigureAutoEventMessages (string apiToken, ConfigureAutoEventData configureAutoEventData = default(ConfigureAutoEventData))
        {
             ApiResponse<SendBirdAutoEventMessageSettings> localVarResponse = ConfigureAutoEventMessagesWithHttpInfo(apiToken, configureAutoEventData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Configure auto event message settings ## Configure auto event message settings  Determines whether to automatically send event messages to group channels when events take place in an application. You can choose which auto event message to receive on the Sendbird Dashboard  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/configure-auto-event-message-settings - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="configureAutoEventData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdAutoEventMessageSettings</returns>
        public ApiResponse<SendBirdAutoEventMessageSettings> ConfigureAutoEventMessagesWithHttpInfo (string apiToken, ConfigureAutoEventData configureAutoEventData = default(ConfigureAutoEventData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ConfigureAutoEventMessages");

            var localVarPath = "/v3/applications/settings/auto_event_message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (configureAutoEventData != null && configureAutoEventData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configureAutoEventData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configureAutoEventData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureAutoEventMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdAutoEventMessageSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdAutoEventMessageSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdAutoEventMessageSettings)));
        }

        /// <summary>
        /// Configure auto event message settings ## Configure auto event message settings  Determines whether to automatically send event messages to group channels when events take place in an application. You can choose which auto event message to receive on the Sendbird Dashboard  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/configure-auto-event-message-settings - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="configureAutoEventData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdAutoEventMessageSettings</returns>
        public async System.Threading.Tasks.Task<SendBirdAutoEventMessageSettings> ConfigureAutoEventMessagesAsync (string apiToken, ConfigureAutoEventData configureAutoEventData = default(ConfigureAutoEventData), CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdAutoEventMessageSettings> localVarResponse = await ConfigureAutoEventMessagesWithHttpInfoAsync(apiToken, configureAutoEventData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Configure auto event message settings ## Configure auto event message settings  Determines whether to automatically send event messages to group channels when events take place in an application. You can choose which auto event message to receive on the Sendbird Dashboard  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/configure-auto-event-message-settings - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="configureAutoEventData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdAutoEventMessageSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdAutoEventMessageSettings>> ConfigureAutoEventMessagesWithHttpInfoAsync (string apiToken, ConfigureAutoEventData configureAutoEventData = default(ConfigureAutoEventData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ConfigureAutoEventMessages");

            var localVarPath = "/v3/applications/settings/auto_event_message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (configureAutoEventData != null && configureAutoEventData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(configureAutoEventData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = configureAutoEventData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConfigureAutoEventMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdAutoEventMessageSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdAutoEventMessageSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdAutoEventMessageSettings)));
        }

        /// <summary>
        /// Delete allowed IPs from a whitelist ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="ipWhitelistAddresses"></param>
        /// <returns>DeleteAllowedIpsFromWhitelistResponse</returns>
        public DeleteAllowedIpsFromWhitelistResponse DeleteAllowedIpsFromWhitelist (string apiToken, List<string> ipWhitelistAddresses)
        {
             ApiResponse<DeleteAllowedIpsFromWhitelistResponse> localVarResponse = DeleteAllowedIpsFromWhitelistWithHttpInfo(apiToken, ipWhitelistAddresses);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete allowed IPs from a whitelist ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="ipWhitelistAddresses"></param>
        /// <returns>ApiResponse of DeleteAllowedIpsFromWhitelistResponse</returns>
        public ApiResponse<DeleteAllowedIpsFromWhitelistResponse> DeleteAllowedIpsFromWhitelistWithHttpInfo (string apiToken, List<string> ipWhitelistAddresses)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->DeleteAllowedIpsFromWhitelist");
            // verify the required parameter 'ipWhitelistAddresses' is set
            if (ipWhitelistAddresses == null)
                throw new ApiException(400, "Missing required parameter 'ipWhitelistAddresses' when calling ApplicationApi->DeleteAllowedIpsFromWhitelist");

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ipWhitelistAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ip_whitelist_addresses", ipWhitelistAddresses)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllowedIpsFromWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAllowedIpsFromWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAllowedIpsFromWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAllowedIpsFromWhitelistResponse)));
        }

        /// <summary>
        /// Delete allowed IPs from a whitelist ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteAllowedIpsFromWhitelistResponse</returns>
        public async System.Threading.Tasks.Task<DeleteAllowedIpsFromWhitelistResponse> DeleteAllowedIpsFromWhitelistAsync (string apiToken, List<string> ipWhitelistAddresses, CancellationToken cancellationToken = default)
        {
             ApiResponse<DeleteAllowedIpsFromWhitelistResponse> localVarResponse = await DeleteAllowedIpsFromWhitelistWithHttpInfoAsync(apiToken, ipWhitelistAddresses, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete allowed IPs from a whitelist ## Delete allowed IPs from a whitelist  Deletes allowed IPs from the whitelist by specifying their IP addresses or ranges. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-allowed-ips-from-a-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="ipWhitelistAddresses"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteAllowedIpsFromWhitelistResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteAllowedIpsFromWhitelistResponse>> DeleteAllowedIpsFromWhitelistWithHttpInfoAsync (string apiToken, List<string> ipWhitelistAddresses, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->DeleteAllowedIpsFromWhitelist");
            // verify the required parameter 'ipWhitelistAddresses' is set
            if (ipWhitelistAddresses == null)
                throw new ApiException(400, "Missing required parameter 'ipWhitelistAddresses' when calling ApplicationApi->DeleteAllowedIpsFromWhitelist");

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ipWhitelistAddresses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ip_whitelist_addresses", ipWhitelistAddresses)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllowedIpsFromWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAllowedIpsFromWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAllowedIpsFromWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAllowedIpsFromWhitelistResponse)));
        }

        /// <summary>
        /// Delete an APNs certificate ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <returns>DeleteApnsCertificateByIdResponse</returns>
        public DeleteApnsCertificateByIdResponse DeleteApnsCertificateById (string apiToken, string providerId)
        {
             ApiResponse<DeleteApnsCertificateByIdResponse> localVarResponse = DeleteApnsCertificateByIdWithHttpInfo(apiToken, providerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an APNs certificate ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <returns>ApiResponse of DeleteApnsCertificateByIdResponse</returns>
        public ApiResponse<DeleteApnsCertificateByIdResponse> DeleteApnsCertificateByIdWithHttpInfo (string apiToken, string providerId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->DeleteApnsCertificateById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->DeleteApnsCertificateById");

            var localVarPath = "/v3/applications/push/apns/cert/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApnsCertificateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteApnsCertificateByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteApnsCertificateByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteApnsCertificateByIdResponse)));
        }

        /// <summary>
        /// Delete an APNs certificate ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DeleteApnsCertificateByIdResponse</returns>
        public async System.Threading.Tasks.Task<DeleteApnsCertificateByIdResponse> DeleteApnsCertificateByIdAsync (string apiToken, string providerId, CancellationToken cancellationToken = default)
        {
             ApiResponse<DeleteApnsCertificateByIdResponse> localVarResponse = await DeleteApnsCertificateByIdWithHttpInfoAsync(apiToken, providerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an APNs certificate ## Delete an APNs certificate  Deletes a specific APNs certificate.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-delete-an-apns-certificate - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DeleteApnsCertificateByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteApnsCertificateByIdResponse>> DeleteApnsCertificateByIdWithHttpInfoAsync (string apiToken, string providerId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->DeleteApnsCertificateById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->DeleteApnsCertificateById");

            var localVarPath = "/v3/applications/push/apns/cert/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApnsCertificateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteApnsCertificateByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteApnsCertificateByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteApnsCertificateByIdResponse)));
        }

        /// <summary>
        /// Generate a secondary API token ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <returns>GenerateSecondaryApiTokenResponse</returns>
        public GenerateSecondaryApiTokenResponse GenerateSecondaryApiToken (string apiToken, GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData))
        {
             ApiResponse<GenerateSecondaryApiTokenResponse> localVarResponse = GenerateSecondaryApiTokenWithHttpInfo(apiToken, generateSecondaryApiTokenData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a secondary API token ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <returns>ApiResponse of GenerateSecondaryApiTokenResponse</returns>
        public ApiResponse<GenerateSecondaryApiTokenResponse> GenerateSecondaryApiTokenWithHttpInfo (string apiToken, GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->GenerateSecondaryApiToken");

            var localVarPath = "/v3/applications/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (generateSecondaryApiTokenData != null && generateSecondaryApiTokenData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSecondaryApiTokenData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSecondaryApiTokenData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSecondaryApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateSecondaryApiTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenerateSecondaryApiTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateSecondaryApiTokenResponse)));
        }

        /// <summary>
        /// Generate a secondary API token ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GenerateSecondaryApiTokenResponse</returns>
        public async System.Threading.Tasks.Task<GenerateSecondaryApiTokenResponse> GenerateSecondaryApiTokenAsync (string apiToken, GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData), CancellationToken cancellationToken = default)
        {
             ApiResponse<GenerateSecondaryApiTokenResponse> localVarResponse = await GenerateSecondaryApiTokenWithHttpInfoAsync(apiToken, generateSecondaryApiTokenData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a secondary API token ## Generate a secondary API token  Generates a new secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-generate-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="generateSecondaryApiTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GenerateSecondaryApiTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenerateSecondaryApiTokenResponse>> GenerateSecondaryApiTokenWithHttpInfoAsync (string apiToken, GenerateSecondaryApiTokenData generateSecondaryApiTokenData = default(GenerateSecondaryApiTokenData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->GenerateSecondaryApiToken");

            var localVarPath = "/v3/applications/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (generateSecondaryApiTokenData != null && generateSecondaryApiTokenData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(generateSecondaryApiTokenData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateSecondaryApiTokenData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateSecondaryApiToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenerateSecondaryApiTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenerateSecondaryApiTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenerateSecondaryApiTokenResponse)));
        }

        /// <summary>
        /// List auto event messages ## List auto event messages  Retrieves a list of auto event messages that are sent in a specified application and indicates which ones are in use. Auto event messages are Admin messages that are automatically generated when a specific event occurs.  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/list-auto-event-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>SendBirdAutoEventMessageSettings</returns>
        public SendBirdAutoEventMessageSettings ListAutoEventMessages (string apiToken)
        {
             ApiResponse<SendBirdAutoEventMessageSettings> localVarResponse = ListAutoEventMessagesWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List auto event messages ## List auto event messages  Retrieves a list of auto event messages that are sent in a specified application and indicates which ones are in use. Auto event messages are Admin messages that are automatically generated when a specific event occurs.  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/list-auto-event-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of SendBirdAutoEventMessageSettings</returns>
        public ApiResponse<SendBirdAutoEventMessageSettings> ListAutoEventMessagesWithHttpInfo (string apiToken)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListAutoEventMessages");

            var localVarPath = "/v3/applications/settings/auto_event_message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAutoEventMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdAutoEventMessageSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdAutoEventMessageSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdAutoEventMessageSettings)));
        }

        /// <summary>
        /// List auto event messages ## List auto event messages  Retrieves a list of auto event messages that are sent in a specified application and indicates which ones are in use. Auto event messages are Admin messages that are automatically generated when a specific event occurs.  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/list-auto-event-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdAutoEventMessageSettings</returns>
        public async System.Threading.Tasks.Task<SendBirdAutoEventMessageSettings> ListAutoEventMessagesAsync (string apiToken, CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdAutoEventMessageSettings> localVarResponse = await ListAutoEventMessagesWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List auto event messages ## List auto event messages  Retrieves a list of auto event messages that are sent in a specified application and indicates which ones are in use. Auto event messages are Admin messages that are automatically generated when a specific event occurs.  https://sendbird.com/docs/chat/v3/platform-api/application/managing-auto-event-messages/list-auto-event-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdAutoEventMessageSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdAutoEventMessageSettings>> ListAutoEventMessagesWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListAutoEventMessages");

            var localVarPath = "/v3/applications/settings/auto_event_message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAutoEventMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdAutoEventMessageSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdAutoEventMessageSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdAutoEventMessageSettings)));
        }

        /// <summary>
        /// List banned users in channels with a custom channel type ## Retrieves a list of users banned from channels with the specified custom channel type.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>CustomTypeListBannedUsersResponse</returns>
        public CustomTypeListBannedUsersResponse ListBannedUsersInChannelsWithCustomChannelType (string apiToken, string customType, string token = default, int? limit = default)
        {
             ApiResponse<CustomTypeListBannedUsersResponse> localVarResponse = ListBannedUsersInChannelsWithCustomChannelTypeWithHttpInfo(apiToken, customType, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List banned users in channels with a custom channel type ## Retrieves a list of users banned from channels with the specified custom channel type.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of CustomTypeListBannedUsersResponse</returns>
        public ApiResponse<CustomTypeListBannedUsersResponse> ListBannedUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, string token = default, int? limit = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListBannedUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->ListBannedUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBannedUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomTypeListBannedUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomTypeListBannedUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomTypeListBannedUsersResponse)));
        }

        /// <summary>
        /// List banned users in channels with a custom channel type ## Retrieves a list of users banned from channels with the specified custom channel type.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CustomTypeListBannedUsersResponse</returns>
        public async System.Threading.Tasks.Task<CustomTypeListBannedUsersResponse> ListBannedUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, string token = default, int? limit = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<CustomTypeListBannedUsersResponse> localVarResponse = await ListBannedUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync(apiToken, customType, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List banned users in channels with a custom channel type ## Retrieves a list of users banned from channels with the specified custom channel type.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CustomTypeListBannedUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomTypeListBannedUsersResponse>> ListBannedUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, string token = default, int? limit = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListBannedUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->ListBannedUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBannedUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomTypeListBannedUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomTypeListBannedUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomTypeListBannedUsersResponse)));
        }

        /// <summary>
        /// List muted users in channels with a custom channel type ## Retrieves a list of the muted users in channels with a custom channel type.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ListMutedUsersInChannelsWithCustomChannelType200Response</returns>
        public ListMutedUsersInChannelsWithCustomChannelType200Response ListMutedUsersInChannelsWithCustomChannelType (string apiToken, string customType, string token = default, int? limit = default)
        {
             ApiResponse<ListMutedUsersInChannelsWithCustomChannelType200Response> localVarResponse = ListMutedUsersInChannelsWithCustomChannelTypeWithHttpInfo(apiToken, customType, token, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List muted users in channels with a custom channel type ## Retrieves a list of the muted users in channels with a custom channel type.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of ListMutedUsersInChannelsWithCustomChannelType200Response</returns>
        public ApiResponse<ListMutedUsersInChannelsWithCustomChannelType200Response> ListMutedUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, string token = default, int? limit = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListMutedUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->ListMutedUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMutedUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMutedUsersInChannelsWithCustomChannelType200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMutedUsersInChannelsWithCustomChannelType200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMutedUsersInChannelsWithCustomChannelType200Response)));
        }

        /// <summary>
        /// List muted users in channels with a custom channel type ## Retrieves a list of the muted users in channels with a custom channel type.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMutedUsersInChannelsWithCustomChannelType200Response</returns>
        public async System.Threading.Tasks.Task<ListMutedUsersInChannelsWithCustomChannelType200Response> ListMutedUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, string token = default, int? limit = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListMutedUsersInChannelsWithCustomChannelType200Response> localVarResponse = await ListMutedUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync(apiToken, customType, token, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List muted users in channels with a custom channel type ## Retrieves a list of the muted users in channels with a custom channel type.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMutedUsersInChannelsWithCustomChannelType200Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListMutedUsersInChannelsWithCustomChannelType200Response>> ListMutedUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, string token = default, int? limit = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListMutedUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->ListMutedUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMutedUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMutedUsersInChannelsWithCustomChannelType200Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMutedUsersInChannelsWithCustomChannelType200Response) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMutedUsersInChannelsWithCustomChannelType200Response)));
        }

        /// <summary>
        /// List push configurations ## List push configurations  Retrieves a list of an application's registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <returns>ListPushConfigurationsResponse</returns>
        public ListPushConfigurationsResponse ListPushConfigurations (string apiToken, string pushType)
        {
             ApiResponse<ListPushConfigurationsResponse> localVarResponse = ListPushConfigurationsWithHttpInfo(apiToken, pushType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List push configurations ## List push configurations  Retrieves a list of an application's registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <returns>ApiResponse of ListPushConfigurationsResponse</returns>
        public ApiResponse<ListPushConfigurationsResponse> ListPushConfigurationsWithHttpInfo (string apiToken, string pushType)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListPushConfigurations");
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->ListPushConfigurations");

            var localVarPath = "/v3/applications/push/{push_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPushConfigurationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListPushConfigurationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPushConfigurationsResponse)));
        }

        /// <summary>
        /// List push configurations ## List push configurations  Retrieves a list of an application's registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListPushConfigurationsResponse</returns>
        public async System.Threading.Tasks.Task<ListPushConfigurationsResponse> ListPushConfigurationsAsync (string apiToken, string pushType, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListPushConfigurationsResponse> localVarResponse = await ListPushConfigurationsWithHttpInfoAsync(apiToken, pushType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List push configurations ## List push configurations  Retrieves a list of an application's registered push configurations.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-configurations - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListPushConfigurationsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPushConfigurationsResponse>> ListPushConfigurationsWithHttpInfoAsync (string apiToken, string pushType, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListPushConfigurations");
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->ListPushConfigurations");

            var localVarPath = "/v3/applications/push/{push_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPushConfigurationsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListPushConfigurationsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPushConfigurationsResponse)));
        }

        /// <summary>
        /// List push notification content templates ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ListPushNotificationContentTemplatesResponse</returns>
        public ListPushNotificationContentTemplatesResponse ListPushNotificationContentTemplates (string apiToken)
        {
             ApiResponse<ListPushNotificationContentTemplatesResponse> localVarResponse = ListPushNotificationContentTemplatesWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List push notification content templates ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ListPushNotificationContentTemplatesResponse</returns>
        public ApiResponse<ListPushNotificationContentTemplatesResponse> ListPushNotificationContentTemplatesWithHttpInfo (string apiToken)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListPushNotificationContentTemplates");

            var localVarPath = "/v3/applications/push/message_templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushNotificationContentTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPushNotificationContentTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListPushNotificationContentTemplatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPushNotificationContentTemplatesResponse)));
        }

        /// <summary>
        /// List push notification content templates ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListPushNotificationContentTemplatesResponse</returns>
        public async System.Threading.Tasks.Task<ListPushNotificationContentTemplatesResponse> ListPushNotificationContentTemplatesAsync (string apiToken, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListPushNotificationContentTemplatesResponse> localVarResponse = await ListPushNotificationContentTemplatesWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List push notification content templates ## List push notification content templates  Retrieves a list of push notification content templates of an application.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-push-notification-content-templates
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListPushNotificationContentTemplatesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPushNotificationContentTemplatesResponse>> ListPushNotificationContentTemplatesWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListPushNotificationContentTemplates");

            var localVarPath = "/v3/applications/push/message_templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushNotificationContentTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPushNotificationContentTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListPushNotificationContentTemplatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPushNotificationContentTemplatesResponse)));
        }

        /// <summary>
        /// List secondary API tokens ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ListSecondaryApiTokensResponse</returns>
        public ListSecondaryApiTokensResponse ListSecondaryApiTokens (string apiToken)
        {
             ApiResponse<ListSecondaryApiTokensResponse> localVarResponse = ListSecondaryApiTokensWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List secondary API tokens ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ListSecondaryApiTokensResponse</returns>
        public ApiResponse<ListSecondaryApiTokensResponse> ListSecondaryApiTokensWithHttpInfo (string apiToken)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListSecondaryApiTokens");

            var localVarPath = "/v3/applications/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSecondaryApiTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSecondaryApiTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListSecondaryApiTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSecondaryApiTokensResponse)));
        }

        /// <summary>
        /// List secondary API tokens ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListSecondaryApiTokensResponse</returns>
        public async System.Threading.Tasks.Task<ListSecondaryApiTokensResponse> ListSecondaryApiTokensAsync (string apiToken, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListSecondaryApiTokensResponse> localVarResponse = await ListSecondaryApiTokensWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List secondary API tokens ## List secondary API tokens  Retrieves a list of secondary API tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-list-secondary-api-tokens
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListSecondaryApiTokensResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListSecondaryApiTokensResponse>> ListSecondaryApiTokensWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ListSecondaryApiTokens");

            var localVarPath = "/v3/applications/api_tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSecondaryApiTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListSecondaryApiTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListSecondaryApiTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListSecondaryApiTokensResponse)));
        }

        /// <summary>
        /// Mute users in channels with a custom channel type ## Mutes specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="muteUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <returns>Object</returns>
        public Object MuteUsersInChannelsWithCustomChannelType (string apiToken, string customType, MuteUsersInChannelsWithCustomChannelTypeData muteUsersInChannelsWithCustomChannelTypeData = default(MuteUsersInChannelsWithCustomChannelTypeData))
        {
             ApiResponse<Object> localVarResponse = MuteUsersInChannelsWithCustomChannelTypeWithHttpInfo(apiToken, customType, muteUsersInChannelsWithCustomChannelTypeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mute users in channels with a custom channel type ## Mutes specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="muteUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> MuteUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, MuteUsersInChannelsWithCustomChannelTypeData muteUsersInChannelsWithCustomChannelTypeData = default(MuteUsersInChannelsWithCustomChannelTypeData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->MuteUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->MuteUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (muteUsersInChannelsWithCustomChannelTypeData != null && muteUsersInChannelsWithCustomChannelTypeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteUsersInChannelsWithCustomChannelTypeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteUsersInChannelsWithCustomChannelTypeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Mute users in channels with a custom channel type ## Mutes specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="muteUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MuteUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, MuteUsersInChannelsWithCustomChannelTypeData muteUsersInChannelsWithCustomChannelTypeData = default(MuteUsersInChannelsWithCustomChannelTypeData), CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await MuteUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync(apiToken, customType, muteUsersInChannelsWithCustomChannelTypeData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mute users in channels with a custom channel type ## Mutes specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="muteUsersInChannelsWithCustomChannelTypeData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MuteUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, MuteUsersInChannelsWithCustomChannelTypeData muteUsersInChannelsWithCustomChannelTypeData = default(MuteUsersInChannelsWithCustomChannelTypeData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->MuteUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->MuteUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (muteUsersInChannelsWithCustomChannelTypeData != null && muteUsersInChannelsWithCustomChannelTypeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteUsersInChannelsWithCustomChannelTypeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteUsersInChannelsWithCustomChannelTypeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove a push configuration ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <returns>RemovePushConfigurationByIdResponse</returns>
        public RemovePushConfigurationByIdResponse RemovePushConfigurationById (string apiToken, string pushType, string providerId)
        {
             ApiResponse<RemovePushConfigurationByIdResponse> localVarResponse = RemovePushConfigurationByIdWithHttpInfo(apiToken, pushType, providerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a push configuration ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <returns>ApiResponse of RemovePushConfigurationByIdResponse</returns>
        public ApiResponse<RemovePushConfigurationByIdResponse> RemovePushConfigurationByIdWithHttpInfo (string apiToken, string pushType, string providerId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->RemovePushConfigurationById");
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->RemovePushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->RemovePushConfigurationById");

            var localVarPath = "/v3/applications/push/{push_type}/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemovePushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemovePushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemovePushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Remove a push configuration ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemovePushConfigurationByIdResponse</returns>
        public async System.Threading.Tasks.Task<RemovePushConfigurationByIdResponse> RemovePushConfigurationByIdAsync (string apiToken, string pushType, string providerId, CancellationToken cancellationToken = default)
        {
             ApiResponse<RemovePushConfigurationByIdResponse> localVarResponse = await RemovePushConfigurationByIdWithHttpInfoAsync(apiToken, pushType, providerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a push configuration ## Remove a push configuration  Removes a specific push configuration from an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-remove-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemovePushConfigurationByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemovePushConfigurationByIdResponse>> RemovePushConfigurationByIdWithHttpInfoAsync (string apiToken, string pushType, string providerId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->RemovePushConfigurationById");
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->RemovePushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->RemovePushConfigurationById");

            var localVarPath = "/v3/applications/push/{push_type}/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemovePushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemovePushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemovePushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Retrieve an IP whitelist ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don't specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>RetrieveIpWhitelistResponse</returns>
        public RetrieveIpWhitelistResponse RetrieveIpWhitelist (string apiToken)
        {
             ApiResponse<RetrieveIpWhitelistResponse> localVarResponse = RetrieveIpWhitelistWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an IP whitelist ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don't specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of RetrieveIpWhitelistResponse</returns>
        public ApiResponse<RetrieveIpWhitelistResponse> RetrieveIpWhitelistWithHttpInfo (string apiToken)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->RetrieveIpWhitelist");

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveIpWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveIpWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveIpWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveIpWhitelistResponse)));
        }

        /// <summary>
        /// Retrieve an IP whitelist ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don't specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RetrieveIpWhitelistResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveIpWhitelistResponse> RetrieveIpWhitelistAsync (string apiToken, CancellationToken cancellationToken = default)
        {
             ApiResponse<RetrieveIpWhitelistResponse> localVarResponse = await RetrieveIpWhitelistWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an IP whitelist ## Retrieve an IP whitelist  Retrieves a list of all the IP ranges and addresses that have access to your Sendbird application. This list is called an IP whitelist and its addresses are granted API access when the IP whitelist API enables [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notations.  If you specify which IP addresses or ranges to include in the whitelist, any unlisted foreign IP addresses will be denied access. If you don't specify any IP address or range to include in the whitelist, all IP addresses will be granted API access. You can configure the IP whitelist under Settings > Security > Allowed IPs in the [Sendbird Dashboard](https://dashboard.sendbird.com).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-retrieve-an-ip-whitelist
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RetrieveIpWhitelistResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveIpWhitelistResponse>> RetrieveIpWhitelistWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->RetrieveIpWhitelist");

            var localVarPath = "/v3/applications/settings/ip_whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveIpWhitelist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveIpWhitelistResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveIpWhitelistResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveIpWhitelistResponse)));
        }

        /// <summary>
        /// Revoke a secondary API token ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <returns>RevokeSecondaryApiTokenByTokenResponse</returns>
        public RevokeSecondaryApiTokenByTokenResponse RevokeSecondaryApiTokenByToken (string apiToken, string apiToken2)
        {
             ApiResponse<RevokeSecondaryApiTokenByTokenResponse> localVarResponse = RevokeSecondaryApiTokenByTokenWithHttpInfo(apiToken, apiToken2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke a secondary API token ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <returns>ApiResponse of RevokeSecondaryApiTokenByTokenResponse</returns>
        public ApiResponse<RevokeSecondaryApiTokenByTokenResponse> RevokeSecondaryApiTokenByTokenWithHttpInfo (string apiToken, string apiToken2)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->RevokeSecondaryApiTokenByToken");
            // verify the required parameter 'apiToken2' is set
            if (apiToken2 == null)
                throw new ApiException(400, "Missing required parameter 'apiToken2' when calling ApplicationApi->RevokeSecondaryApiTokenByToken");

            var localVarPath = "/v3/applications/api_tokens/{api_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken2 != null) localVarPathParams.Add("api_token", this.Configuration.ApiClient.ParameterToString(apiToken2)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeSecondaryApiTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevokeSecondaryApiTokenByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RevokeSecondaryApiTokenByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevokeSecondaryApiTokenByTokenResponse)));
        }

        /// <summary>
        /// Revoke a secondary API token ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RevokeSecondaryApiTokenByTokenResponse</returns>
        public async System.Threading.Tasks.Task<RevokeSecondaryApiTokenByTokenResponse> RevokeSecondaryApiTokenByTokenAsync (string apiToken, string apiToken2, CancellationToken cancellationToken = default)
        {
             ApiResponse<RevokeSecondaryApiTokenByTokenResponse> localVarResponse = await RevokeSecondaryApiTokenByTokenWithHttpInfoAsync(apiToken, apiToken2, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revoke a secondary API token ## Revoke a secondary API token  Revokes a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-revoke-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RevokeSecondaryApiTokenByTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RevokeSecondaryApiTokenByTokenResponse>> RevokeSecondaryApiTokenByTokenWithHttpInfoAsync (string apiToken, string apiToken2, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->RevokeSecondaryApiTokenByToken");
            // verify the required parameter 'apiToken2' is set
            if (apiToken2 == null)
                throw new ApiException(400, "Missing required parameter 'apiToken2' when calling ApplicationApi->RevokeSecondaryApiTokenByToken");

            var localVarPath = "/v3/applications/api_tokens/{api_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken2 != null) localVarPathParams.Add("api_token", this.Configuration.ApiClient.ParameterToString(apiToken2)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeSecondaryApiTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevokeSecondaryApiTokenByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RevokeSecondaryApiTokenByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevokeSecondaryApiTokenByTokenResponse)));
        }

        /// <summary>
        /// Message moderation ## 
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="setDomainFilterData"> (optional)</param>
        /// <returns>SendBirdChannelResponse</returns>
        public SendBirdChannelResponse SetDomainFilter (string apiToken, string customType, SetDomainFilterData setDomainFilterData = default(SetDomainFilterData))
        {
             ApiResponse<SendBirdChannelResponse> localVarResponse = SetDomainFilterWithHttpInfo(apiToken, customType, setDomainFilterData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Message moderation ## 
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="setDomainFilterData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdChannelResponse</returns>
        public ApiResponse<SendBirdChannelResponse> SetDomainFilterWithHttpInfo (string apiToken, string customType, SetDomainFilterData setDomainFilterData = default(SetDomainFilterData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->SetDomainFilter");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->SetDomainFilter");

            var localVarPath = "/v3/applications/settings_global/{custom_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (setDomainFilterData != null && setDomainFilterData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setDomainFilterData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setDomainFilterData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDomainFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdChannelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdChannelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdChannelResponse)));
        }

        /// <summary>
        /// Message moderation ## 
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="setDomainFilterData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdChannelResponse</returns>
        public async System.Threading.Tasks.Task<SendBirdChannelResponse> SetDomainFilterAsync (string apiToken, string customType, SetDomainFilterData setDomainFilterData = default(SetDomainFilterData), CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdChannelResponse> localVarResponse = await SetDomainFilterWithHttpInfoAsync(apiToken, customType, setDomainFilterData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Message moderation ## 
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="setDomainFilterData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdChannelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdChannelResponse>> SetDomainFilterWithHttpInfoAsync (string apiToken, string customType, SetDomainFilterData setDomainFilterData = default(SetDomainFilterData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->SetDomainFilter");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->SetDomainFilter");

            var localVarPath = "/v3/applications/settings_global/{custom_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (setDomainFilterData != null && setDomainFilterData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setDomainFilterData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setDomainFilterData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDomainFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdChannelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdChannelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdChannelResponse)));
        }

        /// <summary>
        /// Unban users in channels with a custom channel type ## Unban specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <returns>Object</returns>
        public Object UnbanUsersInChannelsWithCustomChannelType (string apiToken, string customType, List<string> userIds)
        {
             ApiResponse<Object> localVarResponse = UnbanUsersInChannelsWithCustomChannelTypeWithHttpInfo(apiToken, customType, userIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unban users in channels with a custom channel type ## Unban specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> UnbanUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, List<string> userIds)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UnbanUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->UnbanUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ApplicationApi->UnbanUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "user_ids", userIds)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnbanUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Unban users in channels with a custom channel type ## Unban specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UnbanUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, List<string> userIds, CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await UnbanUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync(apiToken, customType, userIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unban users in channels with a custom channel type ## Unban specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnbanUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, List<string> userIds, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UnbanUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->UnbanUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ApplicationApi->UnbanUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "user_ids", userIds)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnbanUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Unmute users in channels with a custom channel type ## Unmute specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <returns>Object</returns>
        public Object UnmuteUsersInChannelsWithCustomChannelType (string apiToken, string customType, List<string> userIds)
        {
             ApiResponse<Object> localVarResponse = UnmuteUsersInChannelsWithCustomChannelTypeWithHttpInfo(apiToken, customType, userIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unmute users in channels with a custom channel type ## Unmute specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> UnmuteUsersInChannelsWithCustomChannelTypeWithHttpInfo (string apiToken, string customType, List<string> userIds)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UnmuteUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->UnmuteUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ApplicationApi->UnmuteUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "user_ids", userIds)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmuteUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Unmute users in channels with a custom channel type ## Unmute specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UnmuteUsersInChannelsWithCustomChannelTypeAsync (string apiToken, string customType, List<string> userIds, CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await UnmuteUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync(apiToken, customType, userIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unmute users in channels with a custom channel type ## Unmute specified users in channels with a custom channel type at once.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="customType"></param>
        /// <param name="userIds"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnmuteUsersInChannelsWithCustomChannelTypeWithHttpInfoAsync (string apiToken, string customType, List<string> userIds, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UnmuteUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'customType' is set
            if (customType == null)
                throw new ApiException(400, "Missing required parameter 'customType' when calling ApplicationApi->UnmuteUsersInChannelsWithCustomChannelType");
            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new ApiException(400, "Missing required parameter 'userIds' when calling ApplicationApi->UnmuteUsersInChannelsWithCustomChannelType");

            var localVarPath = "/v3/applications/settings_by_channel_custom_type/{custom_type}/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customType != null) localVarPathParams.Add("custom_type", this.Configuration.ApiClient.ParameterToString(customType)); // path parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "user_ids", userIds)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmuteUsersInChannelsWithCustomChannelType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update an APNs push configuration ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateApnsPushConfigurationByIdResponse</returns>
        public UpdateApnsPushConfigurationByIdResponse UpdateApnsPushConfigurationById (string apiToken, string providerId, UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData))
        {
             ApiResponse<UpdateApnsPushConfigurationByIdResponse> localVarResponse = UpdateApnsPushConfigurationByIdWithHttpInfo(apiToken, providerId, updateApnsPushConfigurationByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an APNs push configuration ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateApnsPushConfigurationByIdResponse</returns>
        public ApiResponse<UpdateApnsPushConfigurationByIdResponse> UpdateApnsPushConfigurationByIdWithHttpInfo (string apiToken, string providerId, UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UpdateApnsPushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateApnsPushConfigurationById");

            var localVarPath = "/v3/applications/push/apns/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateApnsPushConfigurationByIdData != null && updateApnsPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateApnsPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateApnsPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApnsPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateApnsPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateApnsPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateApnsPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update an APNs push configuration ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateApnsPushConfigurationByIdResponse</returns>
        public async System.Threading.Tasks.Task<UpdateApnsPushConfigurationByIdResponse> UpdateApnsPushConfigurationByIdAsync (string apiToken, string providerId, UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData), CancellationToken cancellationToken = default)
        {
             ApiResponse<UpdateApnsPushConfigurationByIdResponse> localVarResponse = await UpdateApnsPushConfigurationByIdWithHttpInfoAsync(apiToken, providerId, updateApnsPushConfigurationByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an APNs push configuration ## Update an APNs push configuration  Updates a specific APNs (Apple Push Notification service) push configuration for your client app. You can also register the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  > __Note__: If your HTTP request body contains a [.p12](https://sendbird.com/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) certificate file to upload to Sendbird server, you should send a [Multipart request](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api#2-headers-3-multipart-requests) .  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-apns-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateApnsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateApnsPushConfigurationByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateApnsPushConfigurationByIdResponse>> UpdateApnsPushConfigurationByIdWithHttpInfoAsync (string apiToken, string providerId, UpdateApnsPushConfigurationByIdData updateApnsPushConfigurationByIdData = default(UpdateApnsPushConfigurationByIdData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UpdateApnsPushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateApnsPushConfigurationById");

            var localVarPath = "/v3/applications/push/apns/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateApnsPushConfigurationByIdData != null && updateApnsPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateApnsPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateApnsPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApnsPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateApnsPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateApnsPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateApnsPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update default channel invitation preference ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  > __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>UpdateDefaultChannelInvitationPreferenceResponse</returns>
        public UpdateDefaultChannelInvitationPreferenceResponse UpdateDefaultChannelInvitationPreference (string apiToken, UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData))
        {
             ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse> localVarResponse = UpdateDefaultChannelInvitationPreferenceWithHttpInfo(apiToken, updateDefaultChannelInvitationPreferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update default channel invitation preference ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  > __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>ApiResponse of UpdateDefaultChannelInvitationPreferenceResponse</returns>
        public ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse> UpdateDefaultChannelInvitationPreferenceWithHttpInfo (string apiToken, UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UpdateDefaultChannelInvitationPreference");

            var localVarPath = "/v3/applications/default_channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateDefaultChannelInvitationPreferenceData != null && updateDefaultChannelInvitationPreferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateDefaultChannelInvitationPreferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateDefaultChannelInvitationPreferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDefaultChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateDefaultChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDefaultChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// Update default channel invitation preference ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  > __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateDefaultChannelInvitationPreferenceResponse</returns>
        public async System.Threading.Tasks.Task<UpdateDefaultChannelInvitationPreferenceResponse> UpdateDefaultChannelInvitationPreferenceAsync (string apiToken, UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData), CancellationToken cancellationToken = default)
        {
             ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse> localVarResponse = await UpdateDefaultChannelInvitationPreferenceWithHttpInfoAsync(apiToken, updateDefaultChannelInvitationPreferenceData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update default channel invitation preference ## Update default channel invitation preference  Updates the default channel invitation preference of an application.  > __Note__: Using the [update channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference) action, you can update the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="updateDefaultChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateDefaultChannelInvitationPreferenceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse>> UpdateDefaultChannelInvitationPreferenceWithHttpInfoAsync (string apiToken, UpdateDefaultChannelInvitationPreferenceData updateDefaultChannelInvitationPreferenceData = default(UpdateDefaultChannelInvitationPreferenceData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UpdateDefaultChannelInvitationPreference");

            var localVarPath = "/v3/applications/default_channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateDefaultChannelInvitationPreferenceData != null && updateDefaultChannelInvitationPreferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateDefaultChannelInvitationPreferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateDefaultChannelInvitationPreferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDefaultChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateDefaultChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateDefaultChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateDefaultChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// Update a FCM push configuration ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateFcmPushConfigurationByIdResponse</returns>
        public UpdateFcmPushConfigurationByIdResponse UpdateFcmPushConfigurationById (string apiToken, string providerId, UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData))
        {
             ApiResponse<UpdateFcmPushConfigurationByIdResponse> localVarResponse = UpdateFcmPushConfigurationByIdWithHttpInfo(apiToken, providerId, updateFcmPushConfigurationByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a FCM push configuration ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateFcmPushConfigurationByIdResponse</returns>
        public ApiResponse<UpdateFcmPushConfigurationByIdResponse> UpdateFcmPushConfigurationByIdWithHttpInfo (string apiToken, string providerId, UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UpdateFcmPushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateFcmPushConfigurationById");

            var localVarPath = "/v3/applications/push/fcm/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateFcmPushConfigurationByIdData != null && updateFcmPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateFcmPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateFcmPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFcmPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateFcmPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateFcmPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateFcmPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update a FCM push configuration ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateFcmPushConfigurationByIdResponse</returns>
        public async System.Threading.Tasks.Task<UpdateFcmPushConfigurationByIdResponse> UpdateFcmPushConfigurationByIdAsync (string apiToken, string providerId, UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData), CancellationToken cancellationToken = default)
        {
             ApiResponse<UpdateFcmPushConfigurationByIdResponse> localVarResponse = await UpdateFcmPushConfigurationByIdWithHttpInfoAsync(apiToken, providerId, updateFcmPushConfigurationByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a FCM push configuration ## Update a FCM push configuration  Updates a specific FCM (Firebase Cloud Messaging) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-fcm-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateFcmPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateFcmPushConfigurationByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateFcmPushConfigurationByIdResponse>> UpdateFcmPushConfigurationByIdWithHttpInfoAsync (string apiToken, string providerId, UpdateFcmPushConfigurationByIdData updateFcmPushConfigurationByIdData = default(UpdateFcmPushConfigurationByIdData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UpdateFcmPushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateFcmPushConfigurationById");

            var localVarPath = "/v3/applications/push/fcm/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateFcmPushConfigurationByIdData != null && updateFcmPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateFcmPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateFcmPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFcmPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateFcmPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateFcmPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateFcmPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update an HMS push configuration ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <returns>UpdateHmsPushConfigurationByIdResponse</returns>
        public UpdateHmsPushConfigurationByIdResponse UpdateHmsPushConfigurationById (string apiToken, string providerId, UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData))
        {
             ApiResponse<UpdateHmsPushConfigurationByIdResponse> localVarResponse = UpdateHmsPushConfigurationByIdWithHttpInfo(apiToken, providerId, updateHmsPushConfigurationByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an HMS push configuration ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <returns>ApiResponse of UpdateHmsPushConfigurationByIdResponse</returns>
        public ApiResponse<UpdateHmsPushConfigurationByIdResponse> UpdateHmsPushConfigurationByIdWithHttpInfo (string apiToken, string providerId, UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UpdateHmsPushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateHmsPushConfigurationById");

            var localVarPath = "/v3/applications/push/hms/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateHmsPushConfigurationByIdData != null && updateHmsPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateHmsPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateHmsPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHmsPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateHmsPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateHmsPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateHmsPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update an HMS push configuration ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateHmsPushConfigurationByIdResponse</returns>
        public async System.Threading.Tasks.Task<UpdateHmsPushConfigurationByIdResponse> UpdateHmsPushConfigurationByIdAsync (string apiToken, string providerId, UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData), CancellationToken cancellationToken = default)
        {
             ApiResponse<UpdateHmsPushConfigurationByIdResponse> localVarResponse = await UpdateHmsPushConfigurationByIdWithHttpInfoAsync(apiToken, providerId, updateHmsPushConfigurationByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an HMS push configuration ## Update an HMS push configuration  Updates a specific HMS (Huawei Mobile Services) push configuration for your client app. You can also update the configurations in your [dashboard](https://dashboard.sendbird.com) under Settings > Application > Notifications.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-an-hms-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="providerId"></param>
        /// <param name="updateHmsPushConfigurationByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateHmsPushConfigurationByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateHmsPushConfigurationByIdResponse>> UpdateHmsPushConfigurationByIdWithHttpInfoAsync (string apiToken, string providerId, UpdateHmsPushConfigurationByIdData updateHmsPushConfigurationByIdData = default(UpdateHmsPushConfigurationByIdData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UpdateHmsPushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->UpdateHmsPushConfigurationById");

            var localVarPath = "/v3/applications/push/hms/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateHmsPushConfigurationByIdData != null && updateHmsPushConfigurationByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateHmsPushConfigurationByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateHmsPushConfigurationByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateHmsPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateHmsPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateHmsPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateHmsPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// Update a push notification content template ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <returns>UpdatePushNotificationContentTemplateResponse</returns>
        public UpdatePushNotificationContentTemplateResponse UpdatePushNotificationContentTemplate (string apiToken, string templateName, UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData))
        {
             ApiResponse<UpdatePushNotificationContentTemplateResponse> localVarResponse = UpdatePushNotificationContentTemplateWithHttpInfo(apiToken, templateName, updatePushNotificationContentTemplateData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a push notification content template ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <returns>ApiResponse of UpdatePushNotificationContentTemplateResponse</returns>
        public ApiResponse<UpdatePushNotificationContentTemplateResponse> UpdatePushNotificationContentTemplateWithHttpInfo (string apiToken, string templateName, UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UpdatePushNotificationContentTemplate");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling ApplicationApi->UpdatePushNotificationContentTemplate");

            var localVarPath = "/v3/applications/push/message_templates/{template_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarPathParams.Add("template_name", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushNotificationContentTemplateData != null && updatePushNotificationContentTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushNotificationContentTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushNotificationContentTemplateData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePushNotificationContentTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePushNotificationContentTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePushNotificationContentTemplateResponse)));
        }

        /// <summary>
        /// Update a push notification content template ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdatePushNotificationContentTemplateResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePushNotificationContentTemplateResponse> UpdatePushNotificationContentTemplateAsync (string apiToken, string templateName, UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData), CancellationToken cancellationToken = default)
        {
             ApiResponse<UpdatePushNotificationContentTemplateResponse> localVarResponse = await UpdatePushNotificationContentTemplateWithHttpInfoAsync(apiToken, templateName, updatePushNotificationContentTemplateData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a push notification content template ## Update a push notification content template  Updates a specific push notification content template of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="updatePushNotificationContentTemplateData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdatePushNotificationContentTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatePushNotificationContentTemplateResponse>> UpdatePushNotificationContentTemplateWithHttpInfoAsync (string apiToken, string templateName, UpdatePushNotificationContentTemplateData updatePushNotificationContentTemplateData = default(UpdatePushNotificationContentTemplateData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->UpdatePushNotificationContentTemplate");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling ApplicationApi->UpdatePushNotificationContentTemplate");

            var localVarPath = "/v3/applications/push/message_templates/{template_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarPathParams.Add("template_name", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushNotificationContentTemplateData != null && updatePushNotificationContentTemplateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushNotificationContentTemplateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushNotificationContentTemplateData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePushNotificationContentTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePushNotificationContentTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePushNotificationContentTemplateResponse)));
        }

        /// <summary>
        /// View default channel invitation preference ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  > __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ViewDefaultChannelInvitationPreferenceResponse</returns>
        public ViewDefaultChannelInvitationPreferenceResponse ViewDefaultChannelInvitationPreference (string apiToken)
        {
             ApiResponse<ViewDefaultChannelInvitationPreferenceResponse> localVarResponse = ViewDefaultChannelInvitationPreferenceWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View default channel invitation preference ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  > __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ViewDefaultChannelInvitationPreferenceResponse</returns>
        public ApiResponse<ViewDefaultChannelInvitationPreferenceResponse> ViewDefaultChannelInvitationPreferenceWithHttpInfo (string apiToken)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ViewDefaultChannelInvitationPreference");

            var localVarPath = "/v3/applications/default_channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewDefaultChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewDefaultChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewDefaultChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewDefaultChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// View default channel invitation preference ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  > __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewDefaultChannelInvitationPreferenceResponse</returns>
        public async System.Threading.Tasks.Task<ViewDefaultChannelInvitationPreferenceResponse> ViewDefaultChannelInvitationPreferenceAsync (string apiToken, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewDefaultChannelInvitationPreferenceResponse> localVarResponse = await ViewDefaultChannelInvitationPreferenceWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View default channel invitation preference ## View default channel invitation preference  Retrieves the default channel invitation preference of an application.  > __Note__: Using the [view channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference) action, you can retrieve the value of a specific user's channel invitation preference, which can be set individually by user.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewDefaultChannelInvitationPreferenceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewDefaultChannelInvitationPreferenceResponse>> ViewDefaultChannelInvitationPreferenceWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ViewDefaultChannelInvitationPreference");

            var localVarPath = "/v3/applications/default_channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewDefaultChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewDefaultChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewDefaultChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewDefaultChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// View a push configuration ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <returns>ViewPushConfigurationByIdResponse</returns>
        public ViewPushConfigurationByIdResponse ViewPushConfigurationById (string apiToken, string pushType, string providerId)
        {
             ApiResponse<ViewPushConfigurationByIdResponse> localVarResponse = ViewPushConfigurationByIdWithHttpInfo(apiToken, pushType, providerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a push configuration ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <returns>ApiResponse of ViewPushConfigurationByIdResponse</returns>
        public ApiResponse<ViewPushConfigurationByIdResponse> ViewPushConfigurationByIdWithHttpInfo (string apiToken, string pushType, string providerId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ViewPushConfigurationById");
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->ViewPushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->ViewPushConfigurationById");

            var localVarPath = "/v3/applications/push/{push_type}/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// View a push configuration ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushConfigurationByIdResponse</returns>
        public async System.Threading.Tasks.Task<ViewPushConfigurationByIdResponse> ViewPushConfigurationByIdAsync (string apiToken, string pushType, string providerId, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewPushConfigurationByIdResponse> localVarResponse = await ViewPushConfigurationByIdWithHttpInfoAsync(apiToken, pushType, providerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a push configuration ## View a push configuration  Retrieves a specific push configuration of an application. The type of a push configuration is either `fcm`, `huawei`, or `apns`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-configuration - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="pushType"></param>
        /// <param name="providerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushConfigurationByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewPushConfigurationByIdResponse>> ViewPushConfigurationByIdWithHttpInfoAsync (string apiToken, string pushType, string providerId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ViewPushConfigurationById");
            // verify the required parameter 'pushType' is set
            if (pushType == null)
                throw new ApiException(400, "Missing required parameter 'pushType' when calling ApplicationApi->ViewPushConfigurationById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling ApplicationApi->ViewPushConfigurationById");

            var localVarPath = "/v3/applications/push/{push_type}/{provider_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pushType != null) localVarPathParams.Add("push_type", this.Configuration.ApiClient.ParameterToString(pushType)); // path parameter
            if (providerId != null) localVarPathParams.Add("provider_id", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushConfigurationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushConfigurationByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushConfigurationByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushConfigurationByIdResponse)));
        }

        /// <summary>
        /// View a push notification content template ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <returns>ViewPushNotificationContentTemplateResponse</returns>
        public ViewPushNotificationContentTemplateResponse ViewPushNotificationContentTemplate (string apiToken, string templateName)
        {
             ApiResponse<ViewPushNotificationContentTemplateResponse> localVarResponse = ViewPushNotificationContentTemplateWithHttpInfo(apiToken, templateName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a push notification content template ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <returns>ApiResponse of ViewPushNotificationContentTemplateResponse</returns>
        public ApiResponse<ViewPushNotificationContentTemplateResponse> ViewPushNotificationContentTemplateWithHttpInfo (string apiToken, string templateName)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ViewPushNotificationContentTemplate");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling ApplicationApi->ViewPushNotificationContentTemplate");

            var localVarPath = "/v3/applications/push/message_templates/{template_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarPathParams.Add("template_name", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushNotificationContentTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushNotificationContentTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushNotificationContentTemplateResponse)));
        }

        /// <summary>
        /// View a push notification content template ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushNotificationContentTemplateResponse</returns>
        public async System.Threading.Tasks.Task<ViewPushNotificationContentTemplateResponse> ViewPushNotificationContentTemplateAsync (string apiToken, string templateName, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewPushNotificationContentTemplateResponse> localVarResponse = await ViewPushNotificationContentTemplateWithHttpInfoAsync(apiToken, templateName, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a push notification content template ## View a push notification content template  Retrieves information on a specific push notification content templates of an application. The name of a content template is either `default` or `alternative`.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="templateName"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushNotificationContentTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewPushNotificationContentTemplateResponse>> ViewPushNotificationContentTemplateWithHttpInfoAsync (string apiToken, string templateName, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ViewPushNotificationContentTemplate");
            // verify the required parameter 'templateName' is set
            if (templateName == null)
                throw new ApiException(400, "Missing required parameter 'templateName' when calling ApplicationApi->ViewPushNotificationContentTemplate");

            var localVarPath = "/v3/applications/push/message_templates/{template_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateName != null) localVarPathParams.Add("template_name", this.Configuration.ApiClient.ParameterToString(templateName)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushNotificationContentTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushNotificationContentTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushNotificationContentTemplateResponse)));
        }

        /// <summary>
        /// View a secondary API token ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <returns>ViewSecondaryApiTokenByTokenResponse</returns>
        public ViewSecondaryApiTokenByTokenResponse ViewSecondaryApiTokenByToken (string apiToken, string apiToken2)
        {
             ApiResponse<ViewSecondaryApiTokenByTokenResponse> localVarResponse = ViewSecondaryApiTokenByTokenWithHttpInfo(apiToken, apiToken2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a secondary API token ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <returns>ApiResponse of ViewSecondaryApiTokenByTokenResponse</returns>
        public ApiResponse<ViewSecondaryApiTokenByTokenResponse> ViewSecondaryApiTokenByTokenWithHttpInfo (string apiToken, string apiToken2)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ViewSecondaryApiTokenByToken");
            // verify the required parameter 'apiToken2' is set
            if (apiToken2 == null)
                throw new ApiException(400, "Missing required parameter 'apiToken2' when calling ApplicationApi->ViewSecondaryApiTokenByToken");

            var localVarPath = "/v3/applications/api_tokens/{api_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken2 != null) localVarPathParams.Add("api_token", this.Configuration.ApiClient.ParameterToString(apiToken2)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewSecondaryApiTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewSecondaryApiTokenByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewSecondaryApiTokenByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewSecondaryApiTokenByTokenResponse)));
        }

        /// <summary>
        /// View a secondary API token ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewSecondaryApiTokenByTokenResponse</returns>
        public async System.Threading.Tasks.Task<ViewSecondaryApiTokenByTokenResponse> ViewSecondaryApiTokenByTokenAsync (string apiToken, string apiToken2, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewSecondaryApiTokenByTokenResponse> localVarResponse = await ViewSecondaryApiTokenByTokenWithHttpInfoAsync(apiToken, apiToken2, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a secondary API token ## View a secondary API token  Retrieves the information on a secondary API token.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-a-secondary-api-token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="apiToken2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewSecondaryApiTokenByTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewSecondaryApiTokenByTokenResponse>> ViewSecondaryApiTokenByTokenWithHttpInfoAsync (string apiToken, string apiToken2, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling ApplicationApi->ViewSecondaryApiTokenByToken");
            // verify the required parameter 'apiToken2' is set
            if (apiToken2 == null)
                throw new ApiException(400, "Missing required parameter 'apiToken2' when calling ApplicationApi->ViewSecondaryApiTokenByToken");

            var localVarPath = "/v3/applications/api_tokens/{api_token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken2 != null) localVarPathParams.Add("api_token", this.Configuration.ApiClient.ParameterToString(apiToken2)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewSecondaryApiTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewSecondaryApiTokenByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewSecondaryApiTokenByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewSecondaryApiTokenByTokenResponse)));
        }

    }
}
