/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get detailed open rate of an announcement
        /// </summary>
        /// <remarks>
        /// ## Get detailed open rate of an announcement  Retrieves the detailed open rate information of an announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-rate-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `unique_id`      Type: string      Description: Specifies the unique ID of the announcement to get its open rate.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <returns>GetDetailedOpenRateOfAnnouncementByIdResponse</returns>
        GetDetailedOpenRateOfAnnouncementByIdResponse GetDetailedOpenRateOfAnnouncementById (string apiToken, string uniqueId);

        /// <summary>
        /// Get detailed open rate of an announcement
        /// </summary>
        /// <remarks>
        /// ## Get detailed open rate of an announcement  Retrieves the detailed open rate information of an announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-rate-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `unique_id`      Type: string      Description: Specifies the unique ID of the announcement to get its open rate.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <returns>ApiResponse of GetDetailedOpenRateOfAnnouncementByIdResponse</returns>
        ApiResponse<GetDetailedOpenRateOfAnnouncementByIdResponse> GetDetailedOpenRateOfAnnouncementByIdWithHttpInfo (string apiToken, string uniqueId);
        /// <summary>
        /// Get detailed open status of an announcement
        /// </summary>
        /// <remarks>
        /// ## Get detailed open status of an announcement  Retrieves the detailed open status information of a specific announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-status-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="next"> (optional)</param>
        /// <param name="uniqueIds"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="hasOpened"> (optional)</param>
        /// <returns>GetDetailedOpenStatusOfAnnouncementByIdResponse</returns>
        GetDetailedOpenStatusOfAnnouncementByIdResponse GetDetailedOpenStatusOfAnnouncementById (string apiToken, string uniqueId, int? limit = default, string next = default, List<string> uniqueIds = default, List<string> channelUrls = default, bool? hasOpened = default);

        /// <summary>
        /// Get detailed open status of an announcement
        /// </summary>
        /// <remarks>
        /// ## Get detailed open status of an announcement  Retrieves the detailed open status information of a specific announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-status-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="next"> (optional)</param>
        /// <param name="uniqueIds"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="hasOpened"> (optional)</param>
        /// <returns>ApiResponse of GetDetailedOpenStatusOfAnnouncementByIdResponse</returns>
        ApiResponse<GetDetailedOpenStatusOfAnnouncementByIdResponse> GetDetailedOpenStatusOfAnnouncementByIdWithHttpInfo (string apiToken, string uniqueId, int? limit = default, string next = default, List<string> uniqueIds = default, List<string> channelUrls = default, bool? hasOpened = default);
        /// <summary>
        /// Retrieve Advanced analytics metrics
        /// </summary>
        /// <remarks>
        /// ## Retrieve Advanced analytics metrics  Retrieves Advanced analytics metrics based on the specified parameters. You can retrieve either daily or monthly metrics using the time_dimension parameter.  >__Note__: Daily metrics are calculated and updated every three hours, starting at 1 a.m. in UTC. Meanwhile, monthly metrics are calculated after the last day of the month.  https://sendbird.com/docs/chat/v3/platform-api/guides/advanced-analytics#2-retrieve-advanced-analytics-metrics - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>RetrieveAdvancedAnalyticsMetricsResponse</returns>
        RetrieveAdvancedAnalyticsMetricsResponse RetrieveAdvancedAnalyticsMetrics (string apiToken);

        /// <summary>
        /// Retrieve Advanced analytics metrics
        /// </summary>
        /// <remarks>
        /// ## Retrieve Advanced analytics metrics  Retrieves Advanced analytics metrics based on the specified parameters. You can retrieve either daily or monthly metrics using the time_dimension parameter.  >__Note__: Daily metrics are calculated and updated every three hours, starting at 1 a.m. in UTC. Meanwhile, monthly metrics are calculated after the last day of the month.  https://sendbird.com/docs/chat/v3/platform-api/guides/advanced-analytics#2-retrieve-advanced-analytics-metrics - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of RetrieveAdvancedAnalyticsMetricsResponse</returns>
        ApiResponse<RetrieveAdvancedAnalyticsMetricsResponse> RetrieveAdvancedAnalyticsMetricsWithHttpInfo (string apiToken);
        /// <summary>
        /// View number of concurrent connections
        /// </summary>
        /// <remarks>
        /// ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ViewNumberOfConcurrentConnectionsResponse</returns>
        ViewNumberOfConcurrentConnectionsResponse ViewNumberOfConcurrentConnections (string apiToken);

        /// <summary>
        /// View number of concurrent connections
        /// </summary>
        /// <remarks>
        /// ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ViewNumberOfConcurrentConnectionsResponse</returns>
        ApiResponse<ViewNumberOfConcurrentConnectionsResponse> ViewNumberOfConcurrentConnectionsWithHttpInfo (string apiToken);
        /// <summary>
        /// View number of daily active users
        /// </summary>
        /// <remarks>
        /// ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>ViewNumberOfDailyActiveUsersResponse</returns>
        ViewNumberOfDailyActiveUsersResponse ViewNumberOfDailyActiveUsers (string apiToken, string date = default);

        /// <summary>
        /// View number of daily active users
        /// </summary>
        /// <remarks>
        /// ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfDailyActiveUsersResponse</returns>
        ApiResponse<ViewNumberOfDailyActiveUsersResponse> ViewNumberOfDailyActiveUsersWithHttpInfo (string apiToken, string date = default);
        /// <summary>
        /// View number of monthly active users
        /// </summary>
        /// <remarks>
        /// ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>ViewNumberOfMonthlyActiveUsersResponse</returns>
        ViewNumberOfMonthlyActiveUsersResponse ViewNumberOfMonthlyActiveUsers (string apiToken, string date = default);

        /// <summary>
        /// View number of monthly active users
        /// </summary>
        /// <remarks>
        /// ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfMonthlyActiveUsersResponse</returns>
        ApiResponse<ViewNumberOfMonthlyActiveUsersResponse> ViewNumberOfMonthlyActiveUsersWithHttpInfo (string apiToken, string date = default);
        /// <summary>
        /// View number of peak connections
        /// </summary>
        /// <remarks>
        /// ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <returns>ViewNumberOfPeakConnectionsResponse</returns>
        ViewNumberOfPeakConnectionsResponse ViewNumberOfPeakConnections (string apiToken, string timeDimension, int startYear, int startMonth, int endYear, int endMonth, int? startDay = default, int? endDay = default);

        /// <summary>
        /// View number of peak connections
        /// </summary>
        /// <remarks>
        /// ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfPeakConnectionsResponse</returns>
        ApiResponse<ViewNumberOfPeakConnectionsResponse> ViewNumberOfPeakConnectionsWithHttpInfo (string apiToken, string timeDimension, int startYear, int startMonth, int endYear, int endMonth, int? startDay = default, int? endDay = default);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get detailed open rate of an announcement
        /// </summary>
        /// <remarks>
        /// ## Get detailed open rate of an announcement  Retrieves the detailed open rate information of an announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-rate-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `unique_id`      Type: string      Description: Specifies the unique ID of the announcement to get its open rate.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDetailedOpenRateOfAnnouncementByIdResponse</returns>
        System.Threading.Tasks.Task<GetDetailedOpenRateOfAnnouncementByIdResponse> GetDetailedOpenRateOfAnnouncementByIdAsync (string apiToken, string uniqueId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get detailed open rate of an announcement
        /// </summary>
        /// <remarks>
        /// ## Get detailed open rate of an announcement  Retrieves the detailed open rate information of an announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-rate-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `unique_id`      Type: string      Description: Specifies the unique ID of the announcement to get its open rate.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDetailedOpenRateOfAnnouncementByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDetailedOpenRateOfAnnouncementByIdResponse>> GetDetailedOpenRateOfAnnouncementByIdWithHttpInfoAsync (string apiToken, string uniqueId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get detailed open status of an announcement
        /// </summary>
        /// <remarks>
        /// ## Get detailed open status of an announcement  Retrieves the detailed open status information of a specific announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-status-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="next"> (optional)</param>
        /// <param name="uniqueIds"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="hasOpened"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDetailedOpenStatusOfAnnouncementByIdResponse</returns>
        System.Threading.Tasks.Task<GetDetailedOpenStatusOfAnnouncementByIdResponse> GetDetailedOpenStatusOfAnnouncementByIdAsync (string apiToken, string uniqueId, int? limit = default, string next = default, List<string> uniqueIds = default, List<string> channelUrls = default, bool? hasOpened = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get detailed open status of an announcement
        /// </summary>
        /// <remarks>
        /// ## Get detailed open status of an announcement  Retrieves the detailed open status information of a specific announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-status-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="next"> (optional)</param>
        /// <param name="uniqueIds"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="hasOpened"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDetailedOpenStatusOfAnnouncementByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDetailedOpenStatusOfAnnouncementByIdResponse>> GetDetailedOpenStatusOfAnnouncementByIdWithHttpInfoAsync (string apiToken, string uniqueId, int? limit = default, string next = default, List<string> uniqueIds = default, List<string> channelUrls = default, bool? hasOpened = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieve Advanced analytics metrics
        /// </summary>
        /// <remarks>
        /// ## Retrieve Advanced analytics metrics  Retrieves Advanced analytics metrics based on the specified parameters. You can retrieve either daily or monthly metrics using the time_dimension parameter.  >__Note__: Daily metrics are calculated and updated every three hours, starting at 1 a.m. in UTC. Meanwhile, monthly metrics are calculated after the last day of the month.  https://sendbird.com/docs/chat/v3/platform-api/guides/advanced-analytics#2-retrieve-advanced-analytics-metrics - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RetrieveAdvancedAnalyticsMetricsResponse</returns>
        System.Threading.Tasks.Task<RetrieveAdvancedAnalyticsMetricsResponse> RetrieveAdvancedAnalyticsMetricsAsync (string apiToken, CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieve Advanced analytics metrics
        /// </summary>
        /// <remarks>
        /// ## Retrieve Advanced analytics metrics  Retrieves Advanced analytics metrics based on the specified parameters. You can retrieve either daily or monthly metrics using the time_dimension parameter.  >__Note__: Daily metrics are calculated and updated every three hours, starting at 1 a.m. in UTC. Meanwhile, monthly metrics are calculated after the last day of the month.  https://sendbird.com/docs/chat/v3/platform-api/guides/advanced-analytics#2-retrieve-advanced-analytics-metrics - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RetrieveAdvancedAnalyticsMetricsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveAdvancedAnalyticsMetricsResponse>> RetrieveAdvancedAnalyticsMetricsWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default);
        /// <summary>
        /// View number of concurrent connections
        /// </summary>
        /// <remarks>
        /// ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfConcurrentConnectionsResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfConcurrentConnectionsResponse> ViewNumberOfConcurrentConnectionsAsync (string apiToken, CancellationToken cancellationToken = default);

        /// <summary>
        /// View number of concurrent connections
        /// </summary>
        /// <remarks>
        /// ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfConcurrentConnectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfConcurrentConnectionsResponse>> ViewNumberOfConcurrentConnectionsWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default);
        /// <summary>
        /// View number of daily active users
        /// </summary>
        /// <remarks>
        /// ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfDailyActiveUsersResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfDailyActiveUsersResponse> ViewNumberOfDailyActiveUsersAsync (string apiToken, string date = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// View number of daily active users
        /// </summary>
        /// <remarks>
        /// ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfDailyActiveUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfDailyActiveUsersResponse>> ViewNumberOfDailyActiveUsersWithHttpInfoAsync (string apiToken, string date = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// View number of monthly active users
        /// </summary>
        /// <remarks>
        /// ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfMonthlyActiveUsersResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfMonthlyActiveUsersResponse> ViewNumberOfMonthlyActiveUsersAsync (string apiToken, string date = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// View number of monthly active users
        /// </summary>
        /// <remarks>
        /// ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfMonthlyActiveUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfMonthlyActiveUsersResponse>> ViewNumberOfMonthlyActiveUsersWithHttpInfoAsync (string apiToken, string date = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// View number of peak connections
        /// </summary>
        /// <remarks>
        /// ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfPeakConnectionsResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfPeakConnectionsResponse> ViewNumberOfPeakConnectionsAsync (string apiToken, string timeDimension, int startYear, int startMonth, int endYear, int endMonth, int? startDay = default, int? endDay = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// View number of peak connections
        /// </summary>
        /// <remarks>
        /// ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfPeakConnectionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfPeakConnectionsResponse>> ViewNumberOfPeakConnectionsWithHttpInfoAsync (string apiToken, string timeDimension, int startYear, int startMonth, int endYear, int endMonth, int? startDay = default, int? endDay = default, CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatisticsApi : IStatisticsApi
    {
        private sendbird_platform_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi(String basePath)
        {
            this.Configuration = new sendbird_platform_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// </summary>
        /// <returns></returns>
        public StatisticsApi()
        {
            this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatisticsApi(sendbird_platform_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird_platform_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird_platform_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get detailed open rate of an announcement ## Get detailed open rate of an announcement  Retrieves the detailed open rate information of an announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-rate-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `unique_id`      Type: string      Description: Specifies the unique ID of the announcement to get its open rate.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <returns>GetDetailedOpenRateOfAnnouncementByIdResponse</returns>
        public GetDetailedOpenRateOfAnnouncementByIdResponse GetDetailedOpenRateOfAnnouncementById (string apiToken, string uniqueId)
        {
             ApiResponse<GetDetailedOpenRateOfAnnouncementByIdResponse> localVarResponse = GetDetailedOpenRateOfAnnouncementByIdWithHttpInfo(apiToken, uniqueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed open rate of an announcement ## Get detailed open rate of an announcement  Retrieves the detailed open rate information of an announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-rate-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `unique_id`      Type: string      Description: Specifies the unique ID of the announcement to get its open rate.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <returns>ApiResponse of GetDetailedOpenRateOfAnnouncementByIdResponse</returns>
        public ApiResponse<GetDetailedOpenRateOfAnnouncementByIdResponse> GetDetailedOpenRateOfAnnouncementByIdWithHttpInfo (string apiToken, string uniqueId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->GetDetailedOpenRateOfAnnouncementById");
            // verify the required parameter 'uniqueId' is set
            if (uniqueId == null)
                throw new ApiException(400, "Missing required parameter 'uniqueId' when calling StatisticsApi->GetDetailedOpenRateOfAnnouncementById");

            var localVarPath = "/v3/announcement_open_rate/{unique_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uniqueId != null) localVarPathParams.Add("unique_id", this.Configuration.ApiClient.ParameterToString(uniqueId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDetailedOpenRateOfAnnouncementById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDetailedOpenRateOfAnnouncementByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDetailedOpenRateOfAnnouncementByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDetailedOpenRateOfAnnouncementByIdResponse)));
        }

        /// <summary>
        /// Get detailed open rate of an announcement ## Get detailed open rate of an announcement  Retrieves the detailed open rate information of an announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-rate-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `unique_id`      Type: string      Description: Specifies the unique ID of the announcement to get its open rate.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDetailedOpenRateOfAnnouncementByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetDetailedOpenRateOfAnnouncementByIdResponse> GetDetailedOpenRateOfAnnouncementByIdAsync (string apiToken, string uniqueId, CancellationToken cancellationToken = default)
        {
             ApiResponse<GetDetailedOpenRateOfAnnouncementByIdResponse> localVarResponse = await GetDetailedOpenRateOfAnnouncementByIdWithHttpInfoAsync(apiToken, uniqueId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed open rate of an announcement ## Get detailed open rate of an announcement  Retrieves the detailed open rate information of an announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-rate-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `unique_id`      Type: string      Description: Specifies the unique ID of the announcement to get its open rate.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDetailedOpenRateOfAnnouncementByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDetailedOpenRateOfAnnouncementByIdResponse>> GetDetailedOpenRateOfAnnouncementByIdWithHttpInfoAsync (string apiToken, string uniqueId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->GetDetailedOpenRateOfAnnouncementById");
            // verify the required parameter 'uniqueId' is set
            if (uniqueId == null)
                throw new ApiException(400, "Missing required parameter 'uniqueId' when calling StatisticsApi->GetDetailedOpenRateOfAnnouncementById");

            var localVarPath = "/v3/announcement_open_rate/{unique_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uniqueId != null) localVarPathParams.Add("unique_id", this.Configuration.ApiClient.ParameterToString(uniqueId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDetailedOpenRateOfAnnouncementById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDetailedOpenRateOfAnnouncementByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDetailedOpenRateOfAnnouncementByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDetailedOpenRateOfAnnouncementByIdResponse)));
        }

        /// <summary>
        /// Get detailed open status of an announcement ## Get detailed open status of an announcement  Retrieves the detailed open status information of a specific announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-status-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="next"> (optional)</param>
        /// <param name="uniqueIds"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="hasOpened"> (optional)</param>
        /// <returns>GetDetailedOpenStatusOfAnnouncementByIdResponse</returns>
        public GetDetailedOpenStatusOfAnnouncementByIdResponse GetDetailedOpenStatusOfAnnouncementById (string apiToken, string uniqueId, int? limit = default, string next = default, List<string> uniqueIds = default, List<string> channelUrls = default, bool? hasOpened = default)
        {
             ApiResponse<GetDetailedOpenStatusOfAnnouncementByIdResponse> localVarResponse = GetDetailedOpenStatusOfAnnouncementByIdWithHttpInfo(apiToken, uniqueId, limit, next, uniqueIds, channelUrls, hasOpened);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed open status of an announcement ## Get detailed open status of an announcement  Retrieves the detailed open status information of a specific announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-status-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="next"> (optional)</param>
        /// <param name="uniqueIds"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="hasOpened"> (optional)</param>
        /// <returns>ApiResponse of GetDetailedOpenStatusOfAnnouncementByIdResponse</returns>
        public ApiResponse<GetDetailedOpenStatusOfAnnouncementByIdResponse> GetDetailedOpenStatusOfAnnouncementByIdWithHttpInfo (string apiToken, string uniqueId, int? limit = default, string next = default, List<string> uniqueIds = default, List<string> channelUrls = default, bool? hasOpened = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->GetDetailedOpenStatusOfAnnouncementById");
            // verify the required parameter 'uniqueId' is set
            if (uniqueId == null)
                throw new ApiException(400, "Missing required parameter 'uniqueId' when calling StatisticsApi->GetDetailedOpenStatusOfAnnouncementById");

            var localVarPath = "/v3/announcement_open_status/{unique_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uniqueId != null) localVarPathParams.Add("unique_id", this.Configuration.ApiClient.ParameterToString(uniqueId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter
            if (uniqueIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "unique_ids", uniqueIds)); // query parameter
            if (channelUrls != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "channel_urls", channelUrls)); // query parameter
            if (hasOpened != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "has_opened", hasOpened)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDetailedOpenStatusOfAnnouncementById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDetailedOpenStatusOfAnnouncementByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDetailedOpenStatusOfAnnouncementByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDetailedOpenStatusOfAnnouncementByIdResponse)));
        }

        /// <summary>
        /// Get detailed open status of an announcement ## Get detailed open status of an announcement  Retrieves the detailed open status information of a specific announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-status-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="next"> (optional)</param>
        /// <param name="uniqueIds"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="hasOpened"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetDetailedOpenStatusOfAnnouncementByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetDetailedOpenStatusOfAnnouncementByIdResponse> GetDetailedOpenStatusOfAnnouncementByIdAsync (string apiToken, string uniqueId, int? limit = default, string next = default, List<string> uniqueIds = default, List<string> channelUrls = default, bool? hasOpened = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<GetDetailedOpenStatusOfAnnouncementByIdResponse> localVarResponse = await GetDetailedOpenStatusOfAnnouncementByIdWithHttpInfoAsync(apiToken, uniqueId, limit, next, uniqueIds, channelUrls, hasOpened, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed open status of an announcement ## Get detailed open status of an announcement  Retrieves the detailed open status information of a specific announcement.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-get-detailed-open-status-of-an-announcement - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="uniqueId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="next"> (optional)</param>
        /// <param name="uniqueIds"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="hasOpened"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetDetailedOpenStatusOfAnnouncementByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDetailedOpenStatusOfAnnouncementByIdResponse>> GetDetailedOpenStatusOfAnnouncementByIdWithHttpInfoAsync (string apiToken, string uniqueId, int? limit = default, string next = default, List<string> uniqueIds = default, List<string> channelUrls = default, bool? hasOpened = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->GetDetailedOpenStatusOfAnnouncementById");
            // verify the required parameter 'uniqueId' is set
            if (uniqueId == null)
                throw new ApiException(400, "Missing required parameter 'uniqueId' when calling StatisticsApi->GetDetailedOpenStatusOfAnnouncementById");

            var localVarPath = "/v3/announcement_open_status/{unique_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uniqueId != null) localVarPathParams.Add("unique_id", this.Configuration.ApiClient.ParameterToString(uniqueId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (next != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next", next)); // query parameter
            if (uniqueIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "unique_ids", uniqueIds)); // query parameter
            if (channelUrls != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "channel_urls", channelUrls)); // query parameter
            if (hasOpened != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "has_opened", hasOpened)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDetailedOpenStatusOfAnnouncementById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDetailedOpenStatusOfAnnouncementByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDetailedOpenStatusOfAnnouncementByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDetailedOpenStatusOfAnnouncementByIdResponse)));
        }

        /// <summary>
        /// Retrieve Advanced analytics metrics ## Retrieve Advanced analytics metrics  Retrieves Advanced analytics metrics based on the specified parameters. You can retrieve either daily or monthly metrics using the time_dimension parameter.  >__Note__: Daily metrics are calculated and updated every three hours, starting at 1 a.m. in UTC. Meanwhile, monthly metrics are calculated after the last day of the month.  https://sendbird.com/docs/chat/v3/platform-api/guides/advanced-analytics#2-retrieve-advanced-analytics-metrics - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>RetrieveAdvancedAnalyticsMetricsResponse</returns>
        public RetrieveAdvancedAnalyticsMetricsResponse RetrieveAdvancedAnalyticsMetrics (string apiToken)
        {
             ApiResponse<RetrieveAdvancedAnalyticsMetricsResponse> localVarResponse = RetrieveAdvancedAnalyticsMetricsWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Advanced analytics metrics ## Retrieve Advanced analytics metrics  Retrieves Advanced analytics metrics based on the specified parameters. You can retrieve either daily or monthly metrics using the time_dimension parameter.  >__Note__: Daily metrics are calculated and updated every three hours, starting at 1 a.m. in UTC. Meanwhile, monthly metrics are calculated after the last day of the month.  https://sendbird.com/docs/chat/v3/platform-api/guides/advanced-analytics#2-retrieve-advanced-analytics-metrics - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of RetrieveAdvancedAnalyticsMetricsResponse</returns>
        public ApiResponse<RetrieveAdvancedAnalyticsMetricsResponse> RetrieveAdvancedAnalyticsMetricsWithHttpInfo (string apiToken)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->RetrieveAdvancedAnalyticsMetrics");

            var localVarPath = "/v3/statistics/metric";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveAdvancedAnalyticsMetrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveAdvancedAnalyticsMetricsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveAdvancedAnalyticsMetricsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveAdvancedAnalyticsMetricsResponse)));
        }

        /// <summary>
        /// Retrieve Advanced analytics metrics ## Retrieve Advanced analytics metrics  Retrieves Advanced analytics metrics based on the specified parameters. You can retrieve either daily or monthly metrics using the time_dimension parameter.  >__Note__: Daily metrics are calculated and updated every three hours, starting at 1 a.m. in UTC. Meanwhile, monthly metrics are calculated after the last day of the month.  https://sendbird.com/docs/chat/v3/platform-api/guides/advanced-analytics#2-retrieve-advanced-analytics-metrics - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RetrieveAdvancedAnalyticsMetricsResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveAdvancedAnalyticsMetricsResponse> RetrieveAdvancedAnalyticsMetricsAsync (string apiToken, CancellationToken cancellationToken = default)
        {
             ApiResponse<RetrieveAdvancedAnalyticsMetricsResponse> localVarResponse = await RetrieveAdvancedAnalyticsMetricsWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Advanced analytics metrics ## Retrieve Advanced analytics metrics  Retrieves Advanced analytics metrics based on the specified parameters. You can retrieve either daily or monthly metrics using the time_dimension parameter.  >__Note__: Daily metrics are calculated and updated every three hours, starting at 1 a.m. in UTC. Meanwhile, monthly metrics are calculated after the last day of the month.  https://sendbird.com/docs/chat/v3/platform-api/guides/advanced-analytics#2-retrieve-advanced-analytics-metrics - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RetrieveAdvancedAnalyticsMetricsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveAdvancedAnalyticsMetricsResponse>> RetrieveAdvancedAnalyticsMetricsWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->RetrieveAdvancedAnalyticsMetrics");

            var localVarPath = "/v3/statistics/metric";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveAdvancedAnalyticsMetrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveAdvancedAnalyticsMetricsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RetrieveAdvancedAnalyticsMetricsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveAdvancedAnalyticsMetricsResponse)));
        }

        /// <summary>
        /// View number of concurrent connections ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ViewNumberOfConcurrentConnectionsResponse</returns>
        public ViewNumberOfConcurrentConnectionsResponse ViewNumberOfConcurrentConnections (string apiToken)
        {
             ApiResponse<ViewNumberOfConcurrentConnectionsResponse> localVarResponse = ViewNumberOfConcurrentConnectionsWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of concurrent connections ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ViewNumberOfConcurrentConnectionsResponse</returns>
        public ApiResponse<ViewNumberOfConcurrentConnectionsResponse> ViewNumberOfConcurrentConnectionsWithHttpInfo (string apiToken)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->ViewNumberOfConcurrentConnections");

            var localVarPath = "/v3/applications/ccu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfConcurrentConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfConcurrentConnectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfConcurrentConnectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfConcurrentConnectionsResponse)));
        }

        /// <summary>
        /// View number of concurrent connections ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfConcurrentConnectionsResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfConcurrentConnectionsResponse> ViewNumberOfConcurrentConnectionsAsync (string apiToken, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewNumberOfConcurrentConnectionsResponse> localVarResponse = await ViewNumberOfConcurrentConnectionsWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of concurrent connections ## View number of concurrent connections  Retrieves the number of devices and opened browser tabs which are currently connected to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-concurrent-connections
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfConcurrentConnectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfConcurrentConnectionsResponse>> ViewNumberOfConcurrentConnectionsWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->ViewNumberOfConcurrentConnections");

            var localVarPath = "/v3/applications/ccu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfConcurrentConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfConcurrentConnectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfConcurrentConnectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfConcurrentConnectionsResponse)));
        }

        /// <summary>
        /// View number of daily active users ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>ViewNumberOfDailyActiveUsersResponse</returns>
        public ViewNumberOfDailyActiveUsersResponse ViewNumberOfDailyActiveUsers (string apiToken, string date = default)
        {
             ApiResponse<ViewNumberOfDailyActiveUsersResponse> localVarResponse = ViewNumberOfDailyActiveUsersWithHttpInfo(apiToken, date);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of daily active users ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfDailyActiveUsersResponse</returns>
        public ApiResponse<ViewNumberOfDailyActiveUsersResponse> ViewNumberOfDailyActiveUsersWithHttpInfo (string apiToken, string date = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->ViewNumberOfDailyActiveUsers");

            var localVarPath = "/v3/applications/dau";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfDailyActiveUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfDailyActiveUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfDailyActiveUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfDailyActiveUsersResponse)));
        }

        /// <summary>
        /// View number of daily active users ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfDailyActiveUsersResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfDailyActiveUsersResponse> ViewNumberOfDailyActiveUsersAsync (string apiToken, string date = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewNumberOfDailyActiveUsersResponse> localVarResponse = await ViewNumberOfDailyActiveUsersWithHttpInfoAsync(apiToken, date, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of daily active users ## View number of daily active users  Retrieves the number of daily active users of the application (DAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-daily-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfDailyActiveUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfDailyActiveUsersResponse>> ViewNumberOfDailyActiveUsersWithHttpInfoAsync (string apiToken, string date = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->ViewNumberOfDailyActiveUsers");

            var localVarPath = "/v3/applications/dau";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfDailyActiveUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfDailyActiveUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfDailyActiveUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfDailyActiveUsersResponse)));
        }

        /// <summary>
        /// View number of monthly active users ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>ViewNumberOfMonthlyActiveUsersResponse</returns>
        public ViewNumberOfMonthlyActiveUsersResponse ViewNumberOfMonthlyActiveUsers (string apiToken, string date = default)
        {
             ApiResponse<ViewNumberOfMonthlyActiveUsersResponse> localVarResponse = ViewNumberOfMonthlyActiveUsersWithHttpInfo(apiToken, date);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of monthly active users ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfMonthlyActiveUsersResponse</returns>
        public ApiResponse<ViewNumberOfMonthlyActiveUsersResponse> ViewNumberOfMonthlyActiveUsersWithHttpInfo (string apiToken, string date = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->ViewNumberOfMonthlyActiveUsers");

            var localVarPath = "/v3/applications/mau";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfMonthlyActiveUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfMonthlyActiveUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfMonthlyActiveUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfMonthlyActiveUsersResponse)));
        }

        /// <summary>
        /// View number of monthly active users ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfMonthlyActiveUsersResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfMonthlyActiveUsersResponse> ViewNumberOfMonthlyActiveUsersAsync (string apiToken, string date = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewNumberOfMonthlyActiveUsersResponse> localVarResponse = await ViewNumberOfMonthlyActiveUsersWithHttpInfoAsync(apiToken, date, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of monthly active users ## View number of monthly active users  Retrieves the number of monthly active users of the application (MAU).  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-monthly-active-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="date"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfMonthlyActiveUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfMonthlyActiveUsersResponse>> ViewNumberOfMonthlyActiveUsersWithHttpInfoAsync (string apiToken, string date = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->ViewNumberOfMonthlyActiveUsers");

            var localVarPath = "/v3/applications/mau";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfMonthlyActiveUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfMonthlyActiveUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfMonthlyActiveUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfMonthlyActiveUsersResponse)));
        }

        /// <summary>
        /// View number of peak connections ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <returns>ViewNumberOfPeakConnectionsResponse</returns>
        public ViewNumberOfPeakConnectionsResponse ViewNumberOfPeakConnections (string apiToken, string timeDimension, int startYear, int startMonth, int endYear, int endMonth, int? startDay = default, int? endDay = default)
        {
             ApiResponse<ViewNumberOfPeakConnectionsResponse> localVarResponse = ViewNumberOfPeakConnectionsWithHttpInfo(apiToken, timeDimension, startYear, startMonth, endYear, endMonth, startDay, endDay);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of peak connections ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfPeakConnectionsResponse</returns>
        public ApiResponse<ViewNumberOfPeakConnectionsResponse> ViewNumberOfPeakConnectionsWithHttpInfo (string apiToken, string timeDimension, int startYear, int startMonth, int endYear, int endMonth, int? startDay = default, int? endDay = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'timeDimension' is set
            if (timeDimension == null)
                throw new ApiException(400, "Missing required parameter 'timeDimension' when calling StatisticsApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'startYear' is set
            if (startYear == null)
                throw new ApiException(400, "Missing required parameter 'startYear' when calling StatisticsApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'startMonth' is set
            if (startMonth == null)
                throw new ApiException(400, "Missing required parameter 'startMonth' when calling StatisticsApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'endYear' is set
            if (endYear == null)
                throw new ApiException(400, "Missing required parameter 'endYear' when calling StatisticsApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'endMonth' is set
            if (endMonth == null)
                throw new ApiException(400, "Missing required parameter 'endMonth' when calling StatisticsApi->ViewNumberOfPeakConnections");

            var localVarPath = "/v3/applications/peak_connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeDimension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_dimension", timeDimension)); // query parameter
            if (startYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_year", startYear)); // query parameter
            if (startMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_month", startMonth)); // query parameter
            if (endYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_year", endYear)); // query parameter
            if (endMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_month", endMonth)); // query parameter
            if (startDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_day", startDay)); // query parameter
            if (endDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_day", endDay)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfPeakConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfPeakConnectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfPeakConnectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfPeakConnectionsResponse)));
        }

        /// <summary>
        /// View number of peak connections ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfPeakConnectionsResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfPeakConnectionsResponse> ViewNumberOfPeakConnectionsAsync (string apiToken, string timeDimension, int startYear, int startMonth, int endYear, int endMonth, int? startDay = default, int? endDay = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewNumberOfPeakConnectionsResponse> localVarResponse = await ViewNumberOfPeakConnectionsWithHttpInfoAsync(apiToken, timeDimension, startYear, startMonth, endYear, endMonth, startDay, endDay, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of peak connections ## View number of peak connections  Retrieves the number of concurrently connected devices to Sendbird server during the requested time period.  https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-number-of-peak-connections - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="timeDimension"></param>
        /// <param name="startYear"></param>
        /// <param name="startMonth"></param>
        /// <param name="endYear"></param>
        /// <param name="endMonth"></param>
        /// <param name="startDay"> (optional)</param>
        /// <param name="endDay"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfPeakConnectionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfPeakConnectionsResponse>> ViewNumberOfPeakConnectionsWithHttpInfoAsync (string apiToken, string timeDimension, int startYear, int startMonth, int endYear, int endMonth, int? startDay = default, int? endDay = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling StatisticsApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'timeDimension' is set
            if (timeDimension == null)
                throw new ApiException(400, "Missing required parameter 'timeDimension' when calling StatisticsApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'startYear' is set
            if (startYear == null)
                throw new ApiException(400, "Missing required parameter 'startYear' when calling StatisticsApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'startMonth' is set
            if (startMonth == null)
                throw new ApiException(400, "Missing required parameter 'startMonth' when calling StatisticsApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'endYear' is set
            if (endYear == null)
                throw new ApiException(400, "Missing required parameter 'endYear' when calling StatisticsApi->ViewNumberOfPeakConnections");
            // verify the required parameter 'endMonth' is set
            if (endMonth == null)
                throw new ApiException(400, "Missing required parameter 'endMonth' when calling StatisticsApi->ViewNumberOfPeakConnections");

            var localVarPath = "/v3/applications/peak_connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timeDimension != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_dimension", timeDimension)); // query parameter
            if (startYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_year", startYear)); // query parameter
            if (startMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_month", startMonth)); // query parameter
            if (endYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_year", endYear)); // query parameter
            if (endMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_month", endMonth)); // query parameter
            if (startDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_day", startDay)); // query parameter
            if (endDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_day", endDay)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfPeakConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfPeakConnectionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfPeakConnectionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfPeakConnectionsResponse)));
        }

    }
}
