/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBotApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// ## Create a bot  Creates a new bot within an application. Creating a bot is similar to creating a normal user, except a callback URL should be specified for a bot to receive events.  > **Note**: The bot must first [join a group channel](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels) to interact with users. In group channels, you can also invite a bot through the [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) action.      [https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot](https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createABotRequest"> (optional)</param>
        /// <returns>CreateABotResponse</returns>
        CreateABotResponse CreateABot (string apiToken = default(string), CreateABotRequest createABotRequest = default(CreateABotRequest));

        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// ## Create a bot  Creates a new bot within an application. Creating a bot is similar to creating a normal user, except a callback URL should be specified for a bot to receive events.  > **Note**: The bot must first [join a group channel](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels) to interact with users. In group channels, you can also invite a bot through the [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) action.      [https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot](https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createABotRequest"> (optional)</param>
        /// <returns>ApiResponse of CreateABotResponse</returns>
        ApiResponse<CreateABotResponse> CreateABotWithHttpInfo (string apiToken = default(string), CreateABotRequest createABotRequest = default(CreateABotRequest));
        /// <summary>
        /// Join channels
        /// </summary>
        /// <remarks>
        /// ## Join channels  Makes a bot join one or more group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsRequest"> (optional)</param>
        /// <returns>SendbirdGroupChannelDetail</returns>
        SendbirdGroupChannelDetail JoinChannels (string botUserid, string apiToken = default(string), JoinChannelsRequest joinChannelsRequest = default(JoinChannelsRequest));

        /// <summary>
        /// Join channels
        /// </summary>
        /// <remarks>
        /// ## Join channels  Makes a bot join one or more group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdGroupChannelDetail</returns>
        ApiResponse<SendbirdGroupChannelDetail> JoinChannelsWithHttpInfo (string botUserid, string apiToken = default(string), JoinChannelsRequest joinChannelsRequest = default(JoinChannelsRequest));
        /// <summary>
        /// Leave channels - When leaving a specific channel
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave a specific channel  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        Object LeaveAGroupChannel (string channelUrl, string botUserid, string apiToken = default(string));

        /// <summary>
        /// Leave channels - When leaving a specific channel
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave a specific channel  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LeaveAGroupChannelWithHttpInfo (string channelUrl, string botUserid, string apiToken = default(string));
        /// <summary>
        /// Leave channels - When leaving all channels
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave all group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        Object LeaveGroupChannels (string botUserid, string apiToken = default(string));

        /// <summary>
        /// Leave channels - When leaving all channels
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave all group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LeaveGroupChannelsWithHttpInfo (string botUserid, string apiToken = default(string));
        /// <summary>
        /// List bots
        /// </summary>
        /// <remarks>
        /// ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/platform-api/v3/bot/listing-bots/list-bots#1-list-bots
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListBotsResponse</returns>
        ListBotsResponse ListBots (string token = default(string), int? limit = default(int?), string apiToken = default(string));

        /// <summary>
        /// List bots
        /// </summary>
        /// <remarks>
        /// ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/platform-api/v3/bot/listing-bots/list-bots#1-list-bots
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListBotsResponse</returns>
        ApiResponse<ListBotsResponse> ListBotsWithHttpInfo (string token = default(string), int? limit = default(int?), string apiToken = default(string));
        /// <summary>
        /// Send a bot's message
        /// </summary>
        /// <remarks>
        /// ## Send a bot message  Sends a bot message to a group channel.  [https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message](https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message)  `bot_userid`   Type: string   Description: Specifies the ID of the bot to send a message.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendABotMessageRequest"> (optional)</param>
        /// <returns>SendbirdMessageResponse</returns>
        SendbirdMessageResponse SendABotMessage (string botUserid, string apiToken = default(string), SendABotMessageRequest sendABotMessageRequest = default(SendABotMessageRequest));

        /// <summary>
        /// Send a bot's message
        /// </summary>
        /// <remarks>
        /// ## Send a bot message  Sends a bot message to a group channel.  [https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message](https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message)  `bot_userid`   Type: string   Description: Specifies the ID of the bot to send a message.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendABotMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdMessageResponse</returns>
        ApiResponse<SendbirdMessageResponse> SendABotMessageWithHttpInfo (string botUserid, string apiToken = default(string), SendABotMessageRequest sendABotMessageRequest = default(SendABotMessageRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// ## Create a bot  Creates a new bot within an application. Creating a bot is similar to creating a normal user, except a callback URL should be specified for a bot to receive events.  > **Note**: The bot must first [join a group channel](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels) to interact with users. In group channels, you can also invite a bot through the [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) action.      [https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot](https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createABotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateABotResponse</returns>
        System.Threading.Tasks.Task<CreateABotResponse> CreateABotAsync (string apiToken = default(string), CreateABotRequest createABotRequest = default(CreateABotRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// ## Create a bot  Creates a new bot within an application. Creating a bot is similar to creating a normal user, except a callback URL should be specified for a bot to receive events.  > **Note**: The bot must first [join a group channel](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels) to interact with users. In group channels, you can also invite a bot through the [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) action.      [https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot](https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createABotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateABotResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateABotResponse>> CreateABotWithHttpInfoAsync (string apiToken = default(string), CreateABotRequest createABotRequest = default(CreateABotRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Join channels
        /// </summary>
        /// <remarks>
        /// ## Join channels  Makes a bot join one or more group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdGroupChannelDetail</returns>
        System.Threading.Tasks.Task<SendbirdGroupChannelDetail> JoinChannelsAsync (string botUserid, string apiToken = default(string), JoinChannelsRequest joinChannelsRequest = default(JoinChannelsRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Join channels
        /// </summary>
        /// <remarks>
        /// ## Join channels  Makes a bot join one or more group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdGroupChannelDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendbirdGroupChannelDetail>> JoinChannelsWithHttpInfoAsync (string botUserid, string apiToken = default(string), JoinChannelsRequest joinChannelsRequest = default(JoinChannelsRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leave channels - When leaving a specific channel
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave a specific channel  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LeaveAGroupChannelAsync (string channelUrl, string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Leave channels - When leaving a specific channel
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave a specific channel  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaveAGroupChannelWithHttpInfoAsync (string channelUrl, string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Leave channels - When leaving all channels
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave all group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LeaveGroupChannelsAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Leave channels - When leaving all channels
        /// </summary>
        /// <remarks>
        /// ## Leave channels  Makes a bot leave all group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaveGroupChannelsWithHttpInfoAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List bots
        /// </summary>
        /// <remarks>
        /// ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/platform-api/v3/bot/listing-bots/list-bots#1-list-bots
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListBotsResponse</returns>
        System.Threading.Tasks.Task<ListBotsResponse> ListBotsAsync (string token = default(string), int? limit = default(int?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List bots
        /// </summary>
        /// <remarks>
        /// ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/platform-api/v3/bot/listing-bots/list-bots#1-list-bots
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListBotsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListBotsResponse>> ListBotsWithHttpInfoAsync (string token = default(string), int? limit = default(int?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a bot's message
        /// </summary>
        /// <remarks>
        /// ## Send a bot message  Sends a bot message to a group channel.  [https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message](https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message)  `bot_userid`   Type: string   Description: Specifies the ID of the bot to send a message.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendABotMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendbirdMessageResponse> SendABotMessageAsync (string botUserid, string apiToken = default(string), SendABotMessageRequest sendABotMessageRequest = default(SendABotMessageRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a bot&#39;s message
        /// </summary>
        /// <remarks>
        /// ## Send a bot message  Sends a bot message to a group channel.  [https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message](https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message)  `bot_userid`   Type: string   Description: Specifies the ID of the bot to send a message.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendABotMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendbirdMessageResponse>> SendABotMessageWithHttpInfoAsync (string botUserid, string apiToken = default(string), SendABotMessageRequest sendABotMessageRequest = default(SendABotMessageRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BotApi : IBotApi
    {
        private sendbird_platform_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BotApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BotApi(String basePath)
        {
            this.Configuration = new sendbird_platform_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BotApi"/> class
        /// </summary>
        /// <returns></returns>
        public BotApi()
        {
            this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BotApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BotApi(sendbird_platform_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird_platform_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird_platform_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a bot ## Create a bot  Creates a new bot within an application. Creating a bot is similar to creating a normal user, except a callback URL should be specified for a bot to receive events.  > **Note**: The bot must first [join a group channel](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels) to interact with users. In group channels, you can also invite a bot through the [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) action.      [https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot](https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createABotRequest"> (optional)</param>
        /// <returns>CreateABotResponse</returns>
        public CreateABotResponse CreateABot (string apiToken = default(string), CreateABotRequest createABotRequest = default(CreateABotRequest))
        {
             ApiResponse<CreateABotResponse> localVarResponse = CreateABotWithHttpInfo(apiToken, createABotRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bot ## Create a bot  Creates a new bot within an application. Creating a bot is similar to creating a normal user, except a callback URL should be specified for a bot to receive events.  > **Note**: The bot must first [join a group channel](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels) to interact with users. In group channels, you can also invite a bot through the [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) action.      [https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot](https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createABotRequest"> (optional)</param>
        /// <returns>ApiResponse of CreateABotResponse</returns>
        public ApiResponse<CreateABotResponse> CreateABotWithHttpInfo (string apiToken = default(string), CreateABotRequest createABotRequest = default(CreateABotRequest))
        {

            var localVarPath = "/v3/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createABotRequest != null && createABotRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createABotRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createABotRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateABot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateABotResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateABotResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateABotResponse)));
        }

        /// <summary>
        /// Create a bot ## Create a bot  Creates a new bot within an application. Creating a bot is similar to creating a normal user, except a callback URL should be specified for a bot to receive events.  > **Note**: The bot must first [join a group channel](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels) to interact with users. In group channels, you can also invite a bot through the [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) action.      [https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot](https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createABotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateABotResponse</returns>
        public async System.Threading.Tasks.Task<CreateABotResponse> CreateABotAsync (string apiToken = default(string), CreateABotRequest createABotRequest = default(CreateABotRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreateABotResponse> localVarResponse = await CreateABotWithHttpInfoAsync(apiToken, createABotRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a bot ## Create a bot  Creates a new bot within an application. Creating a bot is similar to creating a normal user, except a callback URL should be specified for a bot to receive events.  > **Note**: The bot must first [join a group channel](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels) to interact with users. In group channels, you can also invite a bot through the [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) action.      [https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot](https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="createABotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateABotResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateABotResponse>> CreateABotWithHttpInfoAsync (string apiToken = default(string), CreateABotRequest createABotRequest = default(CreateABotRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createABotRequest != null && createABotRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createABotRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createABotRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateABot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateABotResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateABotResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateABotResponse)));
        }

        /// <summary>
        /// Join channels ## Join channels  Makes a bot join one or more group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsRequest"> (optional)</param>
        /// <returns>SendbirdGroupChannelDetail</returns>
        public SendbirdGroupChannelDetail JoinChannels (string botUserid, string apiToken = default(string), JoinChannelsRequest joinChannelsRequest = default(JoinChannelsRequest))
        {
             ApiResponse<SendbirdGroupChannelDetail> localVarResponse = JoinChannelsWithHttpInfo(botUserid, apiToken, joinChannelsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Join channels ## Join channels  Makes a bot join one or more group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdGroupChannelDetail</returns>
        public ApiResponse<SendbirdGroupChannelDetail> JoinChannelsWithHttpInfo (string botUserid, string apiToken = default(string), JoinChannelsRequest joinChannelsRequest = default(JoinChannelsRequest))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotApi->JoinChannels");

            var localVarPath = "/v3/bots/{bot_userid}/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (joinChannelsRequest != null && joinChannelsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(joinChannelsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = joinChannelsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdGroupChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdGroupChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdGroupChannelDetail)));
        }

        /// <summary>
        /// Join channels ## Join channels  Makes a bot join one or more group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdGroupChannelDetail</returns>
        public async System.Threading.Tasks.Task<SendbirdGroupChannelDetail> JoinChannelsAsync (string botUserid, string apiToken = default(string), JoinChannelsRequest joinChannelsRequest = default(JoinChannelsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendbirdGroupChannelDetail> localVarResponse = await JoinChannelsWithHttpInfoAsync(botUserid, apiToken, joinChannelsRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Join channels ## Join channels  Makes a bot join one or more group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="joinChannelsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdGroupChannelDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendbirdGroupChannelDetail>> JoinChannelsWithHttpInfoAsync (string botUserid, string apiToken = default(string), JoinChannelsRequest joinChannelsRequest = default(JoinChannelsRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotApi->JoinChannels");

            var localVarPath = "/v3/bots/{bot_userid}/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (joinChannelsRequest != null && joinChannelsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(joinChannelsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = joinChannelsRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdGroupChannelDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdGroupChannelDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdGroupChannelDetail)));
        }

        /// <summary>
        /// Leave channels - When leaving a specific channel ## Leave channels  Makes a bot leave a specific channel  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        public Object LeaveAGroupChannel (string channelUrl, string botUserid, string apiToken = default(string))
        {
             ApiResponse<Object> localVarResponse = LeaveAGroupChannelWithHttpInfo(channelUrl, botUserid, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leave channels - When leaving a specific channel ## Leave channels  Makes a bot leave a specific channel  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> LeaveAGroupChannelWithHttpInfo (string channelUrl, string botUserid, string apiToken = default(string))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling BotApi->LeaveAGroupChannel");
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotApi->LeaveAGroupChannel");

            var localVarPath = "/v3/bots/{bot_userid}/channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Leave channels - When leaving a specific channel ## Leave channels  Makes a bot leave a specific channel  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LeaveAGroupChannelAsync (string channelUrl, string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await LeaveAGroupChannelWithHttpInfoAsync(channelUrl, botUserid, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leave channels - When leaving a specific channel ## Leave channels  Makes a bot leave a specific channel  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl"></param>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LeaveAGroupChannelWithHttpInfoAsync (string channelUrl, string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling BotApi->LeaveAGroupChannel");
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotApi->LeaveAGroupChannel");

            var localVarPath = "/v3/bots/{bot_userid}/channels/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveAGroupChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Leave channels - When leaving all channels ## Leave channels  Makes a bot leave all group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        public Object LeaveGroupChannels (string botUserid, string apiToken = default(string))
        {
             ApiResponse<Object> localVarResponse = LeaveGroupChannelsWithHttpInfo(botUserid, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leave channels - When leaving all channels ## Leave channels  Makes a bot leave all group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> LeaveGroupChannelsWithHttpInfo (string botUserid, string apiToken = default(string))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotApi->LeaveGroupChannels");

            var localVarPath = "/v3/bots/{bot_userid}/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveGroupChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Leave channels - When leaving all channels ## Leave channels  Makes a bot leave all group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LeaveGroupChannelsAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await LeaveGroupChannelsWithHttpInfoAsync(botUserid, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leave channels - When leaving all channels ## Leave channels  Makes a bot leave all group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LeaveGroupChannelsWithHttpInfoAsync (string botUserid, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotApi->LeaveGroupChannels");

            var localVarPath = "/v3/bots/{bot_userid}/channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveGroupChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List bots ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/platform-api/v3/bot/listing-bots/list-bots#1-list-bots
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListBotsResponse</returns>
        public ListBotsResponse ListBots (string token = default(string), int? limit = default(int?), string apiToken = default(string))
        {
             ApiResponse<ListBotsResponse> localVarResponse = ListBotsWithHttpInfo(token, limit, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List bots ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/platform-api/v3/bot/listing-bots/list-bots#1-list-bots
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListBotsResponse</returns>
        public ApiResponse<ListBotsResponse> ListBotsWithHttpInfo (string token = default(string), int? limit = default(int?), string apiToken = default(string))
        {

            var localVarPath = "/v3/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListBotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListBotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListBotsResponse)));
        }

        /// <summary>
        /// List bots ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/platform-api/v3/bot/listing-bots/list-bots#1-list-bots
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListBotsResponse</returns>
        public async System.Threading.Tasks.Task<ListBotsResponse> ListBotsAsync (string token = default(string), int? limit = default(int?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListBotsResponse> localVarResponse = await ListBotsWithHttpInfoAsync(token, limit, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List bots ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/platform-api/v3/bot/listing-bots/list-bots#1-list-bots
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListBotsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListBotsResponse>> ListBotsWithHttpInfoAsync (string token = default(string), int? limit = default(int?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v3/bots";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBots", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListBotsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListBotsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListBotsResponse)));
        }

        /// <summary>
        /// Send a bot's message ## Send a bot message  Sends a bot message to a group channel.  [https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message](https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message)  `bot_userid`   Type: string   Description: Specifies the ID of the bot to send a message.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendABotMessageRequest"> (optional)</param>
        /// <returns>SendbirdMessageResponse</returns>
        public SendbirdMessageResponse SendABotMessage (string botUserid, string apiToken = default(string), SendABotMessageRequest sendABotMessageRequest = default(SendABotMessageRequest))
        {
             ApiResponse<SendbirdMessageResponse> localVarResponse = SendABotMessageWithHttpInfo(botUserid, apiToken, sendABotMessageRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a bot's message ## Send a bot message  Sends a bot message to a group channel.  [https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message](https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message)  `bot_userid`   Type: string   Description: Specifies the ID of the bot to send a message.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendABotMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdMessageResponse</returns>
        public ApiResponse<SendbirdMessageResponse> SendABotMessageWithHttpInfo (string botUserid, string apiToken = default(string), SendABotMessageRequest sendABotMessageRequest = default(SendABotMessageRequest))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotApi->SendABotMessage");

            var localVarPath = "/v3/bots/{bot_userid}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (sendABotMessageRequest != null && sendABotMessageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendABotMessageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendABotMessageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendABotMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdMessageResponse)));
        }

        /// <summary>
        /// Send a bot's message ## Send a bot message  Sends a bot message to a group channel.  [https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message](https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message)  `bot_userid`   Type: string   Description: Specifies the ID of the bot to send a message.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendABotMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendbirdMessageResponse> SendABotMessageAsync (string botUserid, string apiToken = default(string), SendABotMessageRequest sendABotMessageRequest = default(SendABotMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendbirdMessageResponse> localVarResponse = await SendABotMessageWithHttpInfoAsync(botUserid, apiToken, sendABotMessageRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a bot's message ## Send a bot message  Sends a bot message to a group channel.  [https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message](https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message)  `bot_userid`   Type: string   Description: Specifies the ID of the bot to send a message.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserid">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendABotMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendbirdMessageResponse>> SendABotMessageWithHttpInfoAsync (string botUserid, string apiToken = default(string), SendABotMessageRequest sendABotMessageRequest = default(SendABotMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'botUserid' is set
            if (botUserid == null)
                throw new ApiException(400, "Missing required parameter 'botUserid' when calling BotApi->SendABotMessage");

            var localVarPath = "/v3/bots/{bot_userid}/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (botUserid != null) localVarPathParams.Add("bot_userid", this.Configuration.ApiClient.ParameterToString(botUserid)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (sendABotMessageRequest != null && sendABotMessageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendABotMessageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendABotMessageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendABotMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdMessageResponse)));
        }

    }
}
