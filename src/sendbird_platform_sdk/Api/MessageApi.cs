/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-add-metadata#1-add-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToAMessageRequest"> (optional)</param>
        /// <returns>AddExtraDataToAMessageResponse</returns>
        AddExtraDataToAMessageResponse AddExtraDataToAMessage (string channelType, string channelUrl, long messageId, string apiToken = default(string), AddExtraDataToAMessageRequest addExtraDataToAMessageRequest = default(AddExtraDataToAMessageRequest));

        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-add-metadata#1-add-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToAMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of AddExtraDataToAMessageResponse</returns>
        ApiResponse<AddExtraDataToAMessageResponse> AddExtraDataToAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, string apiToken = default(string), AddExtraDataToAMessageRequest addExtraDataToAMessageRequest = default(AddExtraDataToAMessageRequest));
        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/delete-a-message#1-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteAMessage (string channelType, string channelUrl, long messageId, string apiToken = default(string));

        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/delete-a-message#1-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, string apiToken = default(string));
        /// <summary>
        /// Get a message
        /// </summary>
        /// <remarks>
        /// ## Get a message  Retrieves information on a specific message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-a-message#1-get-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>SendbirdMessageResponse</returns>
        SendbirdMessageResponse GetAMessage (string channelType, string channelUrl, long messageId, bool? includeReactions = default(bool?), bool? includeThreadInfo = default(bool?), bool? includeParentMessageInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), string apiToken = default(string));

        /// <summary>
        /// Get a message
        /// </summary>
        /// <remarks>
        /// ## Get a message  Retrieves information on a specific message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-a-message#1-get-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of SendbirdMessageResponse</returns>
        ApiResponse<SendbirdMessageResponse> GetAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, bool? includeReactions = default(bool?), bool? includeThreadInfo = default(bool?), bool? includeParentMessageInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), string apiToken = default(string));
        /// <summary>
        /// Get total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## Get total number of messages in a channel  Retrieves the total number of messages in a specific channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-total-number-of-messages-in-a-channel#1-get-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>GetTotalNumberOfMessagesInAChannelResponse</returns>
        GetTotalNumberOfMessagesInAChannelResponse GetTotalNumberOfMessagesInAChannel (string channelType, string channelUrl, string apiToken = default(string));

        /// <summary>
        /// Get total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## Get total number of messages in a channel  Retrieves the total number of messages in a specific channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-total-number-of-messages-in-a-channel#1-get-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of GetTotalNumberOfMessagesInAChannelResponse</returns>
        ApiResponse<GetTotalNumberOfMessagesInAChannelResponse> GetTotalNumberOfMessagesInAChannelWithHttpInfo (string channelType, string channelUrl, string apiToken = default(string));
        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  You can retrieve a list of past messages of a specific channel with this API.  By default, this action returns a list of messages in the order they were created. Replies in threaded messages are also listed in the chronological order of their creation like other messages, not grouped with their parent messages.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/list-messages#1-list-messages  `channel_type`   Type: string   Description: Specifies the type of the channel. Either open_channels or group_channels.   `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageTs">Specifies the timestamp to be the reference point of the query in Unix milliseconds. Either this or the message_id parameter below should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_ts and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="messageId">Specifies the unique ID of the message to be the reference point of the query. Either this or the message_ts parameter above should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_id and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="prevLimit">Specifies the number of previously sent messages to retrieve before message_ts. For example, if message_ts&#x3D;1484202848298, then prev_limit&#x3D;50 returns 50 messages sent by 1484202848297 (message_ts - 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="nextLimit">Specifies the number of sent messages to retrieve after message_ts. For example, if message_ts&#x3D;1484202848298, then next_limit&#x3D;50 returns 50 messages sent from 1484202848299 (message_ts + 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="include">Determines whether to include messages sent exactly on the specified message_ts in the results. (Default: true) (optional)</param>
        /// <param name="reverse">Determines whether to sort the results in reverse chronological order. If set to true, messages appear in reverse chronological order where the newest comes first and the oldest last. (Default: false) (optional)</param>
        /// <param name="senderId">Restricts the search scope to only retrieve messages sent by the user with the specified ID. (optional)</param>
        /// <param name="senderIds">Restricts the search scope to only retrieve messages sent by one or more users with the specified IDs listed in a comma-separated string. (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom message types to retrieve. The value set to this parameter can serve as a filter as follows: - A string of specific custom types: Messages with the corresponding custom types are returned. - Empty like &amp;custom_types&#x3D;&amp;...: Messages whose custom_type property is empty or has a value of null are returned. - An asterisk (\\*) (default): All messages are returned regardless of their custom_type. (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeReplyType">One of following values: NONE, ALL, ONLY_REPLY_TO_CHANNEL (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray">Determines whether to include the sorted_metaarray property in the response. (Default: false) (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListMessagesResponse</returns>
        ListMessagesResponse ListMessages (string channelType, string channelUrl, long messageTs, long messageId, int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), string includeReplyType = default(string), bool? includeParentMessageInfo = default(bool?), bool? includeThreadInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string apiToken = default(string));

        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  You can retrieve a list of past messages of a specific channel with this API.  By default, this action returns a list of messages in the order they were created. Replies in threaded messages are also listed in the chronological order of their creation like other messages, not grouped with their parent messages.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/list-messages#1-list-messages  `channel_type`   Type: string   Description: Specifies the type of the channel. Either open_channels or group_channels.   `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageTs">Specifies the timestamp to be the reference point of the query in Unix milliseconds. Either this or the message_id parameter below should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_ts and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="messageId">Specifies the unique ID of the message to be the reference point of the query. Either this or the message_ts parameter above should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_id and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="prevLimit">Specifies the number of previously sent messages to retrieve before message_ts. For example, if message_ts&#x3D;1484202848298, then prev_limit&#x3D;50 returns 50 messages sent by 1484202848297 (message_ts - 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="nextLimit">Specifies the number of sent messages to retrieve after message_ts. For example, if message_ts&#x3D;1484202848298, then next_limit&#x3D;50 returns 50 messages sent from 1484202848299 (message_ts + 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="include">Determines whether to include messages sent exactly on the specified message_ts in the results. (Default: true) (optional)</param>
        /// <param name="reverse">Determines whether to sort the results in reverse chronological order. If set to true, messages appear in reverse chronological order where the newest comes first and the oldest last. (Default: false) (optional)</param>
        /// <param name="senderId">Restricts the search scope to only retrieve messages sent by the user with the specified ID. (optional)</param>
        /// <param name="senderIds">Restricts the search scope to only retrieve messages sent by one or more users with the specified IDs listed in a comma-separated string. (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom message types to retrieve. The value set to this parameter can serve as a filter as follows: - A string of specific custom types: Messages with the corresponding custom types are returned. - Empty like &amp;custom_types&#x3D;&amp;...: Messages whose custom_type property is empty or has a value of null are returned. - An asterisk (\\*) (default): All messages are returned regardless of their custom_type. (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeReplyType">One of following values: NONE, ALL, ONLY_REPLY_TO_CHANNEL (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray">Determines whether to include the sorted_metaarray property in the response. (Default: false) (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListMessagesResponse</returns>
        ApiResponse<ListMessagesResponse> ListMessagesWithHttpInfo (string channelType, string channelUrl, long messageTs, long messageId, int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), string includeReplyType = default(string), bool? includeParentMessageInfo = default(bool?), bool? includeThreadInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string apiToken = default(string));
        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a specific user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/message/read-receipts/mark-all-messages-as-read-message#1-mark-all-messages-as-read
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markChannelMessagesAsReadRequest"> (optional)</param>
        /// <returns>Object</returns>
        Object MarkChannelMessagesAsRead (string channelUrl, string apiToken = default(string), MarkChannelMessagesAsReadRequest markChannelMessagesAsReadRequest = default(MarkChannelMessagesAsReadRequest));

        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a specific user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/message/read-receipts/mark-all-messages-as-read-message#1-mark-all-messages-as-read
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markChannelMessagesAsReadRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MarkChannelMessagesAsReadWithHttpInfo (string channelUrl, string apiToken = default(string), MarkChannelMessagesAsReadRequest markChannelMessagesAsReadRequest = default(MarkChannelMessagesAsReadRequest));
        /// <summary>
        /// Migrate messages
        /// </summary>
        /// <remarks>
        /// ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).      There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user).      2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically.      3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.       https://sendbird.com/docs/chat/platform-api/v3/message/migration/migrate-messages#1-migrate-messages
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetChannelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="migrateMessagesRequest"> (optional)</param>
        /// <returns>Object</returns>
        Object MigrateMessages (string targetChannelUrl, string apiToken = default(string), MigrateMessagesRequest migrateMessagesRequest = default(MigrateMessagesRequest));

        /// <summary>
        /// Migrate messages
        /// </summary>
        /// <remarks>
        /// ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).      There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user).      2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically.      3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.       https://sendbird.com/docs/chat/platform-api/v3/message/migration/migrate-messages#1-migrate-messages
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetChannelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="migrateMessagesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MigrateMessagesWithHttpInfo (string targetChannelUrl, string apiToken = default(string), MigrateMessagesRequest migrateMessagesRequest = default(MigrateMessagesRequest));
        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-remove-metadata#1-remove-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="keys"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        Object RemoveExtraDataFromAMessage (string channelType, string channelUrl, long messageId, string keys = default(string), string apiToken = default(string));

        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-remove-metadata#1-remove-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="keys"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveExtraDataFromAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, string keys = default(string), string apiToken = default(string));
        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  You can use this action to send a text message, a file message, or an admin message to a specific channel. Sendbird Chat SDKs and the platform API allows you to upload any type of files in messages to the Sendbird server. See [Message Overview](https://sendbird.com/docs/chat/platform-api/v3/message/message-overview) for more information on each message type. Messages are sent between client devices running the Sendbird Chat SDK or UIKit as well as programmatically from businesses to their customers. For instance, a delivery app can automatically send a message like \"Arriving in one minute!\" on behalf of a delivery driver.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/send-a-message#1-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendAMessageRequest"> (optional)</param>
        /// <returns>SendbirdMessageResponse</returns>
        SendbirdMessageResponse SendAMessage (string channelType, string channelUrl, string apiToken = default(string), SendAMessageRequest sendAMessageRequest = default(SendAMessageRequest));

        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  You can use this action to send a text message, a file message, or an admin message to a specific channel. Sendbird Chat SDKs and the platform API allows you to upload any type of files in messages to the Sendbird server. See [Message Overview](https://sendbird.com/docs/chat/platform-api/v3/message/message-overview) for more information on each message type. Messages are sent between client devices running the Sendbird Chat SDK or UIKit as well as programmatically from businesses to their customers. For instance, a delivery app can automatically send a message like \"Arriving in one minute!\" on behalf of a delivery driver.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/send-a-message#1-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendAMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdMessageResponse</returns>
        ApiResponse<SendbirdMessageResponse> SendAMessageWithHttpInfo (string channelType, string channelUrl, string apiToken = default(string), SendAMessageRequest sendAMessageRequest = default(SendAMessageRequest));
        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates specific information on a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/update-a-message#1-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAMessageRequest"> (optional)</param>
        /// <returns>SendbirdMessageResponse</returns>
        SendbirdMessageResponse UpdateAMessage (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateAMessageRequest updateAMessageRequest = default(UpdateAMessageRequest));

        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates specific information on a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/update-a-message#1-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdMessageResponse</returns>
        ApiResponse<SendbirdMessageResponse> UpdateAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateAMessageRequest updateAMessageRequest = default(UpdateAMessageRequest));
        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-update-metadata#1-update-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInAMessageRequest"> (optional)</param>
        /// <returns>UpdateExtraDataInAMessageResponse</returns>
        UpdateExtraDataInAMessageResponse UpdateExtraDataInAMessage (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateExtraDataInAMessageRequest updateExtraDataInAMessageRequest = default(UpdateExtraDataInAMessageRequest));

        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-update-metadata#1-update-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInAMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of UpdateExtraDataInAMessageResponse</returns>
        ApiResponse<UpdateExtraDataInAMessageResponse> UpdateExtraDataInAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateExtraDataInAMessageRequest updateExtraDataInAMessageRequest = default(UpdateExtraDataInAMessageRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-add-metadata#1-add-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddExtraDataToAMessageResponse</returns>
        System.Threading.Tasks.Task<AddExtraDataToAMessageResponse> AddExtraDataToAMessageAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), AddExtraDataToAMessageRequest addExtraDataToAMessageRequest = default(AddExtraDataToAMessageRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-add-metadata#1-add-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddExtraDataToAMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddExtraDataToAMessageResponse>> AddExtraDataToAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), AddExtraDataToAMessageRequest addExtraDataToAMessageRequest = default(AddExtraDataToAMessageRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/delete-a-message#1-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteAMessageAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/delete-a-message#1-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a message
        /// </summary>
        /// <remarks>
        /// ## Get a message  Retrieves information on a specific message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-a-message#1-get-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendbirdMessageResponse> GetAMessageAsync (string channelType, string channelUrl, long messageId, bool? includeReactions = default(bool?), bool? includeThreadInfo = default(bool?), bool? includeParentMessageInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a message
        /// </summary>
        /// <remarks>
        /// ## Get a message  Retrieves information on a specific message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-a-message#1-get-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendbirdMessageResponse>> GetAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, bool? includeReactions = default(bool?), bool? includeThreadInfo = default(bool?), bool? includeParentMessageInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## Get total number of messages in a channel  Retrieves the total number of messages in a specific channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-total-number-of-messages-in-a-channel#1-get-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTotalNumberOfMessagesInAChannelResponse</returns>
        System.Threading.Tasks.Task<GetTotalNumberOfMessagesInAChannelResponse> GetTotalNumberOfMessagesInAChannelAsync (string channelType, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## Get total number of messages in a channel  Retrieves the total number of messages in a specific channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-total-number-of-messages-in-a-channel#1-get-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTotalNumberOfMessagesInAChannelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTotalNumberOfMessagesInAChannelResponse>> GetTotalNumberOfMessagesInAChannelWithHttpInfoAsync (string channelType, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  You can retrieve a list of past messages of a specific channel with this API.  By default, this action returns a list of messages in the order they were created. Replies in threaded messages are also listed in the chronological order of their creation like other messages, not grouped with their parent messages.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/list-messages#1-list-messages  `channel_type`   Type: string   Description: Specifies the type of the channel. Either open_channels or group_channels.   `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageTs">Specifies the timestamp to be the reference point of the query in Unix milliseconds. Either this or the message_id parameter below should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_ts and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="messageId">Specifies the unique ID of the message to be the reference point of the query. Either this or the message_ts parameter above should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_id and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="prevLimit">Specifies the number of previously sent messages to retrieve before message_ts. For example, if message_ts&#x3D;1484202848298, then prev_limit&#x3D;50 returns 50 messages sent by 1484202848297 (message_ts - 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="nextLimit">Specifies the number of sent messages to retrieve after message_ts. For example, if message_ts&#x3D;1484202848298, then next_limit&#x3D;50 returns 50 messages sent from 1484202848299 (message_ts + 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="include">Determines whether to include messages sent exactly on the specified message_ts in the results. (Default: true) (optional)</param>
        /// <param name="reverse">Determines whether to sort the results in reverse chronological order. If set to true, messages appear in reverse chronological order where the newest comes first and the oldest last. (Default: false) (optional)</param>
        /// <param name="senderId">Restricts the search scope to only retrieve messages sent by the user with the specified ID. (optional)</param>
        /// <param name="senderIds">Restricts the search scope to only retrieve messages sent by one or more users with the specified IDs listed in a comma-separated string. (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom message types to retrieve. The value set to this parameter can serve as a filter as follows: - A string of specific custom types: Messages with the corresponding custom types are returned. - Empty like &amp;custom_types&#x3D;&amp;...: Messages whose custom_type property is empty or has a value of null are returned. - An asterisk (\\*) (default): All messages are returned regardless of their custom_type. (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeReplyType">One of following values: NONE, ALL, ONLY_REPLY_TO_CHANNEL (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray">Determines whether to include the sorted_metaarray property in the response. (Default: false) (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMessagesResponse</returns>
        System.Threading.Tasks.Task<ListMessagesResponse> ListMessagesAsync (string channelType, string channelUrl, long messageTs, long messageId, int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), string includeReplyType = default(string), bool? includeParentMessageInfo = default(bool?), bool? includeThreadInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  You can retrieve a list of past messages of a specific channel with this API.  By default, this action returns a list of messages in the order they were created. Replies in threaded messages are also listed in the chronological order of their creation like other messages, not grouped with their parent messages.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/list-messages#1-list-messages  `channel_type`   Type: string   Description: Specifies the type of the channel. Either open_channels or group_channels.   `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageTs">Specifies the timestamp to be the reference point of the query in Unix milliseconds. Either this or the message_id parameter below should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_ts and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="messageId">Specifies the unique ID of the message to be the reference point of the query. Either this or the message_ts parameter above should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_id and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="prevLimit">Specifies the number of previously sent messages to retrieve before message_ts. For example, if message_ts&#x3D;1484202848298, then prev_limit&#x3D;50 returns 50 messages sent by 1484202848297 (message_ts - 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="nextLimit">Specifies the number of sent messages to retrieve after message_ts. For example, if message_ts&#x3D;1484202848298, then next_limit&#x3D;50 returns 50 messages sent from 1484202848299 (message_ts + 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="include">Determines whether to include messages sent exactly on the specified message_ts in the results. (Default: true) (optional)</param>
        /// <param name="reverse">Determines whether to sort the results in reverse chronological order. If set to true, messages appear in reverse chronological order where the newest comes first and the oldest last. (Default: false) (optional)</param>
        /// <param name="senderId">Restricts the search scope to only retrieve messages sent by the user with the specified ID. (optional)</param>
        /// <param name="senderIds">Restricts the search scope to only retrieve messages sent by one or more users with the specified IDs listed in a comma-separated string. (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom message types to retrieve. The value set to this parameter can serve as a filter as follows: - A string of specific custom types: Messages with the corresponding custom types are returned. - Empty like &amp;custom_types&#x3D;&amp;...: Messages whose custom_type property is empty or has a value of null are returned. - An asterisk (\\*) (default): All messages are returned regardless of their custom_type. (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeReplyType">One of following values: NONE, ALL, ONLY_REPLY_TO_CHANNEL (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray">Determines whether to include the sorted_metaarray property in the response. (Default: false) (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMessagesResponse>> ListMessagesWithHttpInfoAsync (string channelType, string channelUrl, long messageTs, long messageId, int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), string includeReplyType = default(string), bool? includeParentMessageInfo = default(bool?), bool? includeThreadInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a specific user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/message/read-receipts/mark-all-messages-as-read-message#1-mark-all-messages-as-read
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markChannelMessagesAsReadRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MarkChannelMessagesAsReadAsync (string channelUrl, string apiToken = default(string), MarkChannelMessagesAsReadRequest markChannelMessagesAsReadRequest = default(MarkChannelMessagesAsReadRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a specific user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/message/read-receipts/mark-all-messages-as-read-message#1-mark-all-messages-as-read
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markChannelMessagesAsReadRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkChannelMessagesAsReadWithHttpInfoAsync (string channelUrl, string apiToken = default(string), MarkChannelMessagesAsReadRequest markChannelMessagesAsReadRequest = default(MarkChannelMessagesAsReadRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Migrate messages
        /// </summary>
        /// <remarks>
        /// ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).      There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user).      2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically.      3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.       https://sendbird.com/docs/chat/platform-api/v3/message/migration/migrate-messages#1-migrate-messages
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetChannelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="migrateMessagesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MigrateMessagesAsync (string targetChannelUrl, string apiToken = default(string), MigrateMessagesRequest migrateMessagesRequest = default(MigrateMessagesRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Migrate messages
        /// </summary>
        /// <remarks>
        /// ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).      There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user).      2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically.      3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.       https://sendbird.com/docs/chat/platform-api/v3/message/migration/migrate-messages#1-migrate-messages
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetChannelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="migrateMessagesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MigrateMessagesWithHttpInfoAsync (string targetChannelUrl, string apiToken = default(string), MigrateMessagesRequest migrateMessagesRequest = default(MigrateMessagesRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-remove-metadata#1-remove-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="keys"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveExtraDataFromAMessageAsync (string channelType, string channelUrl, long messageId, string keys = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-remove-metadata#1-remove-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="keys"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveExtraDataFromAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, string keys = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  You can use this action to send a text message, a file message, or an admin message to a specific channel. Sendbird Chat SDKs and the platform API allows you to upload any type of files in messages to the Sendbird server. See [Message Overview](https://sendbird.com/docs/chat/platform-api/v3/message/message-overview) for more information on each message type. Messages are sent between client devices running the Sendbird Chat SDK or UIKit as well as programmatically from businesses to their customers. For instance, a delivery app can automatically send a message like \"Arriving in one minute!\" on behalf of a delivery driver.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/send-a-message#1-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendbirdMessageResponse> SendAMessageAsync (string channelType, string channelUrl, string apiToken = default(string), SendAMessageRequest sendAMessageRequest = default(SendAMessageRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  You can use this action to send a text message, a file message, or an admin message to a specific channel. Sendbird Chat SDKs and the platform API allows you to upload any type of files in messages to the Sendbird server. See [Message Overview](https://sendbird.com/docs/chat/platform-api/v3/message/message-overview) for more information on each message type. Messages are sent between client devices running the Sendbird Chat SDK or UIKit as well as programmatically from businesses to their customers. For instance, a delivery app can automatically send a message like \"Arriving in one minute!\" on behalf of a delivery driver.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/send-a-message#1-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendbirdMessageResponse>> SendAMessageWithHttpInfoAsync (string channelType, string channelUrl, string apiToken = default(string), SendAMessageRequest sendAMessageRequest = default(SendAMessageRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates specific information on a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/update-a-message#1-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendbirdMessageResponse> UpdateAMessageAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateAMessageRequest updateAMessageRequest = default(UpdateAMessageRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates specific information on a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/update-a-message#1-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendbirdMessageResponse>> UpdateAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateAMessageRequest updateAMessageRequest = default(UpdateAMessageRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-update-metadata#1-update-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateExtraDataInAMessageResponse</returns>
        System.Threading.Tasks.Task<UpdateExtraDataInAMessageResponse> UpdateExtraDataInAMessageAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateExtraDataInAMessageRequest updateExtraDataInAMessageRequest = default(UpdateExtraDataInAMessageRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-update-metadata#1-update-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateExtraDataInAMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateExtraDataInAMessageResponse>> UpdateExtraDataInAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateExtraDataInAMessageRequest updateExtraDataInAMessageRequest = default(UpdateExtraDataInAMessageRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessageApi : IMessageApi
    {
        private sendbird_platform_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessageApi(String basePath)
        {
            this.Configuration = new sendbird_platform_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class
        /// </summary>
        /// <returns></returns>
        public MessageApi()
        {
            this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessageApi(sendbird_platform_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird_platform_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird_platform_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-add-metadata#1-add-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToAMessageRequest"> (optional)</param>
        /// <returns>AddExtraDataToAMessageResponse</returns>
        public AddExtraDataToAMessageResponse AddExtraDataToAMessage (string channelType, string channelUrl, long messageId, string apiToken = default(string), AddExtraDataToAMessageRequest addExtraDataToAMessageRequest = default(AddExtraDataToAMessageRequest))
        {
             ApiResponse<AddExtraDataToAMessageResponse> localVarResponse = AddExtraDataToAMessageWithHttpInfo(channelType, channelUrl, messageId, apiToken, addExtraDataToAMessageRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-add-metadata#1-add-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToAMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of AddExtraDataToAMessageResponse</returns>
        public ApiResponse<AddExtraDataToAMessageResponse> AddExtraDataToAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, string apiToken = default(string), AddExtraDataToAMessageRequest addExtraDataToAMessageRequest = default(AddExtraDataToAMessageRequest))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->AddExtraDataToAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->AddExtraDataToAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->AddExtraDataToAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addExtraDataToAMessageRequest != null && addExtraDataToAMessageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addExtraDataToAMessageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addExtraDataToAMessageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExtraDataToAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddExtraDataToAMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddExtraDataToAMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddExtraDataToAMessageResponse)));
        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-add-metadata#1-add-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddExtraDataToAMessageResponse</returns>
        public async System.Threading.Tasks.Task<AddExtraDataToAMessageResponse> AddExtraDataToAMessageAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), AddExtraDataToAMessageRequest addExtraDataToAMessageRequest = default(AddExtraDataToAMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AddExtraDataToAMessageResponse> localVarResponse = await AddExtraDataToAMessageWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, addExtraDataToAMessageRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-add-metadata#1-add-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="addExtraDataToAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddExtraDataToAMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddExtraDataToAMessageResponse>> AddExtraDataToAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), AddExtraDataToAMessageRequest addExtraDataToAMessageRequest = default(AddExtraDataToAMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->AddExtraDataToAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->AddExtraDataToAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->AddExtraDataToAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addExtraDataToAMessageRequest != null && addExtraDataToAMessageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addExtraDataToAMessageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addExtraDataToAMessageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExtraDataToAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddExtraDataToAMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddExtraDataToAMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddExtraDataToAMessageResponse)));
        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/delete-a-message#1-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteAMessage (string channelType, string channelUrl, long messageId, string apiToken = default(string))
        {
             ApiResponse<Object> localVarResponse = DeleteAMessageWithHttpInfo(channelType, channelUrl, messageId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/delete-a-message#1-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, string apiToken = default(string))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->DeleteAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->DeleteAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->DeleteAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/delete-a-message#1-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteAMessageAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await DeleteAMessageWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/delete-a-message#1-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->DeleteAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->DeleteAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->DeleteAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get a message ## Get a message  Retrieves information on a specific message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-a-message#1-get-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>SendbirdMessageResponse</returns>
        public SendbirdMessageResponse GetAMessage (string channelType, string channelUrl, long messageId, bool? includeReactions = default(bool?), bool? includeThreadInfo = default(bool?), bool? includeParentMessageInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), string apiToken = default(string))
        {
             ApiResponse<SendbirdMessageResponse> localVarResponse = GetAMessageWithHttpInfo(channelType, channelUrl, messageId, includeReactions, includeThreadInfo, includeParentMessageInfo, includePollDetails, withSortedMetaArray, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a message ## Get a message  Retrieves information on a specific message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-a-message#1-get-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of SendbirdMessageResponse</returns>
        public ApiResponse<SendbirdMessageResponse> GetAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, bool? includeReactions = default(bool?), bool? includeThreadInfo = default(bool?), bool? includeParentMessageInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), string apiToken = default(string))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->GetAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->GetAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->GetAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (includeReactions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_reactions", includeReactions)); // query parameter
            if (includeThreadInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_thread_info", includeThreadInfo)); // query parameter
            if (includeParentMessageInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_parent_message_info", includeParentMessageInfo)); // query parameter
            if (includePollDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_poll_details", includePollDetails)); // query parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdMessageResponse)));
        }

        /// <summary>
        /// Get a message ## Get a message  Retrieves information on a specific message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-a-message#1-get-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendbirdMessageResponse> GetAMessageAsync (string channelType, string channelUrl, long messageId, bool? includeReactions = default(bool?), bool? includeThreadInfo = default(bool?), bool? includeParentMessageInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendbirdMessageResponse> localVarResponse = await GetAMessageWithHttpInfoAsync(channelType, channelUrl, messageId, includeReactions, includeThreadInfo, includeParentMessageInfo, includePollDetails, withSortedMetaArray, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a message ## Get a message  Retrieves information on a specific message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-a-message#1-get-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendbirdMessageResponse>> GetAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, bool? includeReactions = default(bool?), bool? includeThreadInfo = default(bool?), bool? includeParentMessageInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->GetAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->GetAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->GetAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (includeReactions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_reactions", includeReactions)); // query parameter
            if (includeThreadInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_thread_info", includeThreadInfo)); // query parameter
            if (includeParentMessageInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_parent_message_info", includeParentMessageInfo)); // query parameter
            if (includePollDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_poll_details", includePollDetails)); // query parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdMessageResponse)));
        }

        /// <summary>
        /// Get total number of messages in a channel ## Get total number of messages in a channel  Retrieves the total number of messages in a specific channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-total-number-of-messages-in-a-channel#1-get-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>GetTotalNumberOfMessagesInAChannelResponse</returns>
        public GetTotalNumberOfMessagesInAChannelResponse GetTotalNumberOfMessagesInAChannel (string channelType, string channelUrl, string apiToken = default(string))
        {
             ApiResponse<GetTotalNumberOfMessagesInAChannelResponse> localVarResponse = GetTotalNumberOfMessagesInAChannelWithHttpInfo(channelType, channelUrl, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get total number of messages in a channel ## Get total number of messages in a channel  Retrieves the total number of messages in a specific channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-total-number-of-messages-in-a-channel#1-get-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of GetTotalNumberOfMessagesInAChannelResponse</returns>
        public ApiResponse<GetTotalNumberOfMessagesInAChannelResponse> GetTotalNumberOfMessagesInAChannelWithHttpInfo (string channelType, string channelUrl, string apiToken = default(string))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->GetTotalNumberOfMessagesInAChannel");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->GetTotalNumberOfMessagesInAChannel");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/total_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTotalNumberOfMessagesInAChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTotalNumberOfMessagesInAChannelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTotalNumberOfMessagesInAChannelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTotalNumberOfMessagesInAChannelResponse)));
        }

        /// <summary>
        /// Get total number of messages in a channel ## Get total number of messages in a channel  Retrieves the total number of messages in a specific channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-total-number-of-messages-in-a-channel#1-get-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GetTotalNumberOfMessagesInAChannelResponse</returns>
        public async System.Threading.Tasks.Task<GetTotalNumberOfMessagesInAChannelResponse> GetTotalNumberOfMessagesInAChannelAsync (string channelType, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<GetTotalNumberOfMessagesInAChannelResponse> localVarResponse = await GetTotalNumberOfMessagesInAChannelWithHttpInfoAsync(channelType, channelUrl, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get total number of messages in a channel ## Get total number of messages in a channel  Retrieves the total number of messages in a specific channel.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/get-total-number-of-messages-in-a-channel#1-get-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GetTotalNumberOfMessagesInAChannelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTotalNumberOfMessagesInAChannelResponse>> GetTotalNumberOfMessagesInAChannelWithHttpInfoAsync (string channelType, string channelUrl, string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->GetTotalNumberOfMessagesInAChannel");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->GetTotalNumberOfMessagesInAChannel");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/total_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTotalNumberOfMessagesInAChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTotalNumberOfMessagesInAChannelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTotalNumberOfMessagesInAChannelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTotalNumberOfMessagesInAChannelResponse)));
        }

        /// <summary>
        /// List messages ## List messages  You can retrieve a list of past messages of a specific channel with this API.  By default, this action returns a list of messages in the order they were created. Replies in threaded messages are also listed in the chronological order of their creation like other messages, not grouped with their parent messages.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/list-messages#1-list-messages  `channel_type`   Type: string   Description: Specifies the type of the channel. Either open_channels or group_channels.   `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageTs">Specifies the timestamp to be the reference point of the query in Unix milliseconds. Either this or the message_id parameter below should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_ts and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="messageId">Specifies the unique ID of the message to be the reference point of the query. Either this or the message_ts parameter above should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_id and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="prevLimit">Specifies the number of previously sent messages to retrieve before message_ts. For example, if message_ts&#x3D;1484202848298, then prev_limit&#x3D;50 returns 50 messages sent by 1484202848297 (message_ts - 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="nextLimit">Specifies the number of sent messages to retrieve after message_ts. For example, if message_ts&#x3D;1484202848298, then next_limit&#x3D;50 returns 50 messages sent from 1484202848299 (message_ts + 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="include">Determines whether to include messages sent exactly on the specified message_ts in the results. (Default: true) (optional)</param>
        /// <param name="reverse">Determines whether to sort the results in reverse chronological order. If set to true, messages appear in reverse chronological order where the newest comes first and the oldest last. (Default: false) (optional)</param>
        /// <param name="senderId">Restricts the search scope to only retrieve messages sent by the user with the specified ID. (optional)</param>
        /// <param name="senderIds">Restricts the search scope to only retrieve messages sent by one or more users with the specified IDs listed in a comma-separated string. (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom message types to retrieve. The value set to this parameter can serve as a filter as follows: - A string of specific custom types: Messages with the corresponding custom types are returned. - Empty like &amp;custom_types&#x3D;&amp;...: Messages whose custom_type property is empty or has a value of null are returned. - An asterisk (\\*) (default): All messages are returned regardless of their custom_type. (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeReplyType">One of following values: NONE, ALL, ONLY_REPLY_TO_CHANNEL (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray">Determines whether to include the sorted_metaarray property in the response. (Default: false) (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ListMessagesResponse</returns>
        public ListMessagesResponse ListMessages (string channelType, string channelUrl, long messageTs, long messageId, int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), string includeReplyType = default(string), bool? includeParentMessageInfo = default(bool?), bool? includeThreadInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string apiToken = default(string))
        {
             ApiResponse<ListMessagesResponse> localVarResponse = ListMessagesWithHttpInfo(channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, includeReplyType, includeParentMessageInfo, includeThreadInfo, includePollDetails, withSortedMetaArray, showSubchannelMessagesOnly, userId, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List messages ## List messages  You can retrieve a list of past messages of a specific channel with this API.  By default, this action returns a list of messages in the order they were created. Replies in threaded messages are also listed in the chronological order of their creation like other messages, not grouped with their parent messages.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/list-messages#1-list-messages  `channel_type`   Type: string   Description: Specifies the type of the channel. Either open_channels or group_channels.   `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageTs">Specifies the timestamp to be the reference point of the query in Unix milliseconds. Either this or the message_id parameter below should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_ts and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="messageId">Specifies the unique ID of the message to be the reference point of the query. Either this or the message_ts parameter above should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_id and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="prevLimit">Specifies the number of previously sent messages to retrieve before message_ts. For example, if message_ts&#x3D;1484202848298, then prev_limit&#x3D;50 returns 50 messages sent by 1484202848297 (message_ts - 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="nextLimit">Specifies the number of sent messages to retrieve after message_ts. For example, if message_ts&#x3D;1484202848298, then next_limit&#x3D;50 returns 50 messages sent from 1484202848299 (message_ts + 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="include">Determines whether to include messages sent exactly on the specified message_ts in the results. (Default: true) (optional)</param>
        /// <param name="reverse">Determines whether to sort the results in reverse chronological order. If set to true, messages appear in reverse chronological order where the newest comes first and the oldest last. (Default: false) (optional)</param>
        /// <param name="senderId">Restricts the search scope to only retrieve messages sent by the user with the specified ID. (optional)</param>
        /// <param name="senderIds">Restricts the search scope to only retrieve messages sent by one or more users with the specified IDs listed in a comma-separated string. (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom message types to retrieve. The value set to this parameter can serve as a filter as follows: - A string of specific custom types: Messages with the corresponding custom types are returned. - Empty like &amp;custom_types&#x3D;&amp;...: Messages whose custom_type property is empty or has a value of null are returned. - An asterisk (\\*) (default): All messages are returned regardless of their custom_type. (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeReplyType">One of following values: NONE, ALL, ONLY_REPLY_TO_CHANNEL (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray">Determines whether to include the sorted_metaarray property in the response. (Default: false) (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of ListMessagesResponse</returns>
        public ApiResponse<ListMessagesResponse> ListMessagesWithHttpInfo (string channelType, string channelUrl, long messageTs, long messageId, int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), string includeReplyType = default(string), bool? includeParentMessageInfo = default(bool?), bool? includeThreadInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string apiToken = default(string))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->ListMessages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->ListMessages");
            // verify the required parameter 'messageTs' is set
            if (messageTs == null)
                throw new ApiException(400, "Missing required parameter 'messageTs' when calling MessageApi->ListMessages");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->ListMessages");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_ts", messageTs)); // query parameter
            if (messageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_id", messageId)); // query parameter
            if (prevLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prev_limit", prevLimit)); // query parameter
            if (nextLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next_limit", nextLimit)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (reverse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse", reverse)); // query parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter
            if (senderIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_ids", senderIds)); // query parameter
            if (operatorFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_filter", operatorFilter)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_type", messageType)); // query parameter
            if (includingRemoved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "including_removed", includingRemoved)); // query parameter
            if (includeReactions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_reactions", includeReactions)); // query parameter
            if (includeReplyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_reply_type", includeReplyType)); // query parameter
            if (includeParentMessageInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_parent_message_info", includeParentMessageInfo)); // query parameter
            if (includeThreadInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_thread_info", includeThreadInfo)); // query parameter
            if (includePollDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_poll_details", includePollDetails)); // query parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (showSubchannelMessagesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_subchannel_messages_only", showSubchannelMessagesOnly)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMessagesResponse)));
        }

        /// <summary>
        /// List messages ## List messages  You can retrieve a list of past messages of a specific channel with this API.  By default, this action returns a list of messages in the order they were created. Replies in threaded messages are also listed in the chronological order of their creation like other messages, not grouped with their parent messages.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/list-messages#1-list-messages  `channel_type`   Type: string   Description: Specifies the type of the channel. Either open_channels or group_channels.   `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageTs">Specifies the timestamp to be the reference point of the query in Unix milliseconds. Either this or the message_id parameter below should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_ts and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="messageId">Specifies the unique ID of the message to be the reference point of the query. Either this or the message_ts parameter above should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_id and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="prevLimit">Specifies the number of previously sent messages to retrieve before message_ts. For example, if message_ts&#x3D;1484202848298, then prev_limit&#x3D;50 returns 50 messages sent by 1484202848297 (message_ts - 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="nextLimit">Specifies the number of sent messages to retrieve after message_ts. For example, if message_ts&#x3D;1484202848298, then next_limit&#x3D;50 returns 50 messages sent from 1484202848299 (message_ts + 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="include">Determines whether to include messages sent exactly on the specified message_ts in the results. (Default: true) (optional)</param>
        /// <param name="reverse">Determines whether to sort the results in reverse chronological order. If set to true, messages appear in reverse chronological order where the newest comes first and the oldest last. (Default: false) (optional)</param>
        /// <param name="senderId">Restricts the search scope to only retrieve messages sent by the user with the specified ID. (optional)</param>
        /// <param name="senderIds">Restricts the search scope to only retrieve messages sent by one or more users with the specified IDs listed in a comma-separated string. (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom message types to retrieve. The value set to this parameter can serve as a filter as follows: - A string of specific custom types: Messages with the corresponding custom types are returned. - Empty like &amp;custom_types&#x3D;&amp;...: Messages whose custom_type property is empty or has a value of null are returned. - An asterisk (\\*) (default): All messages are returned regardless of their custom_type. (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeReplyType">One of following values: NONE, ALL, ONLY_REPLY_TO_CHANNEL (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray">Determines whether to include the sorted_metaarray property in the response. (Default: false) (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMessagesResponse</returns>
        public async System.Threading.Tasks.Task<ListMessagesResponse> ListMessagesAsync (string channelType, string channelUrl, long messageTs, long messageId, int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), string includeReplyType = default(string), bool? includeParentMessageInfo = default(bool?), bool? includeThreadInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListMessagesResponse> localVarResponse = await ListMessagesWithHttpInfoAsync(channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, includeReplyType, includeParentMessageInfo, includeThreadInfo, includePollDetails, withSortedMetaArray, showSubchannelMessagesOnly, userId, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List messages ## List messages  You can retrieve a list of past messages of a specific channel with this API.  By default, this action returns a list of messages in the order they were created. Replies in threaded messages are also listed in the chronological order of their creation like other messages, not grouped with their parent messages.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/list-messages#1-list-messages  `channel_type`   Type: string   Description: Specifies the type of the channel. Either open_channels or group_channels.   `channel_url`   Type: string   Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageTs">Specifies the timestamp to be the reference point of the query in Unix milliseconds. Either this or the message_id parameter below should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_ts and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="messageId">Specifies the unique ID of the message to be the reference point of the query. Either this or the message_ts parameter above should be specified in your query URL to retrieve a list. It fetches messages that were sent prior to and after the specified message_id and the default value for both prev_limit and next_limit is 15.</param>
        /// <param name="prevLimit">Specifies the number of previously sent messages to retrieve before message_ts. For example, if message_ts&#x3D;1484202848298, then prev_limit&#x3D;50 returns 50 messages sent by 1484202848297 (message_ts - 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="nextLimit">Specifies the number of sent messages to retrieve after message_ts. For example, if message_ts&#x3D;1484202848298, then next_limit&#x3D;50 returns 50 messages sent from 1484202848299 (message_ts + 1). Acceptable values range from 0 to 200. (Default: 15) (optional)</param>
        /// <param name="include">Determines whether to include messages sent exactly on the specified message_ts in the results. (Default: true) (optional)</param>
        /// <param name="reverse">Determines whether to sort the results in reverse chronological order. If set to true, messages appear in reverse chronological order where the newest comes first and the oldest last. (Default: false) (optional)</param>
        /// <param name="senderId">Restricts the search scope to only retrieve messages sent by the user with the specified ID. (optional)</param>
        /// <param name="senderIds">Restricts the search scope to only retrieve messages sent by one or more users with the specified IDs listed in a comma-separated string. (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes">Specifies a comma-separated string of one or more custom message types to retrieve. The value set to this parameter can serve as a filter as follows: - A string of specific custom types: Messages with the corresponding custom types are returned. - Empty like &amp;custom_types&#x3D;&amp;...: Messages whose custom_type property is empty or has a value of null are returned. - An asterisk (\\*) (default): All messages are returned regardless of their custom_type. (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="includeReplyType">One of following values: NONE, ALL, ONLY_REPLY_TO_CHANNEL (optional)</param>
        /// <param name="includeParentMessageInfo"> (optional)</param>
        /// <param name="includeThreadInfo"> (optional)</param>
        /// <param name="includePollDetails">Determines whether to include all properties of a poll resource with a full list of options in the results. If set to false, a selection of poll resource properties consisting of id, title, close_at, created_at, updated_at, status, and message_id are returned. (Default: false) * To use this property, the polls feature should be turned on in Settings &gt; Chat &gt; Features on Sendbird Dashboard. (optional)</param>
        /// <param name="withSortedMetaArray">Determines whether to include the sorted_metaarray property in the response. (Default: false) (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListMessagesResponse>> ListMessagesWithHttpInfoAsync (string channelType, string channelUrl, long messageTs, long messageId, int? prevLimit = default(int?), int? nextLimit = default(int?), bool? include = default(bool?), bool? reverse = default(bool?), string senderId = default(string), string senderIds = default(string), string operatorFilter = default(string), string customTypes = default(string), string messageType = default(string), bool? includingRemoved = default(bool?), bool? includeReactions = default(bool?), string includeReplyType = default(string), bool? includeParentMessageInfo = default(bool?), bool? includeThreadInfo = default(bool?), bool? includePollDetails = default(bool?), bool? withSortedMetaArray = default(bool?), bool? showSubchannelMessagesOnly = default(bool?), string userId = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->ListMessages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->ListMessages");
            // verify the required parameter 'messageTs' is set
            if (messageTs == null)
                throw new ApiException(400, "Missing required parameter 'messageTs' when calling MessageApi->ListMessages");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->ListMessages");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_ts", messageTs)); // query parameter
            if (messageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_id", messageId)); // query parameter
            if (prevLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prev_limit", prevLimit)); // query parameter
            if (nextLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next_limit", nextLimit)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (reverse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse", reverse)); // query parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter
            if (senderIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_ids", senderIds)); // query parameter
            if (operatorFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_filter", operatorFilter)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_type", messageType)); // query parameter
            if (includingRemoved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "including_removed", includingRemoved)); // query parameter
            if (includeReactions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_reactions", includeReactions)); // query parameter
            if (includeReplyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_reply_type", includeReplyType)); // query parameter
            if (includeParentMessageInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_parent_message_info", includeParentMessageInfo)); // query parameter
            if (includeThreadInfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_thread_info", includeThreadInfo)); // query parameter
            if (includePollDetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_poll_details", includePollDetails)); // query parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (showSubchannelMessagesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_subchannel_messages_only", showSubchannelMessagesOnly)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMessagesResponse)));
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a specific user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/message/read-receipts/mark-all-messages-as-read-message#1-mark-all-messages-as-read
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markChannelMessagesAsReadRequest"> (optional)</param>
        /// <returns>Object</returns>
        public Object MarkChannelMessagesAsRead (string channelUrl, string apiToken = default(string), MarkChannelMessagesAsReadRequest markChannelMessagesAsReadRequest = default(MarkChannelMessagesAsReadRequest))
        {
             ApiResponse<Object> localVarResponse = MarkChannelMessagesAsReadWithHttpInfo(channelUrl, apiToken, markChannelMessagesAsReadRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a specific user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/message/read-receipts/mark-all-messages-as-read-message#1-mark-all-messages-as-read
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markChannelMessagesAsReadRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> MarkChannelMessagesAsReadWithHttpInfo (string channelUrl, string apiToken = default(string), MarkChannelMessagesAsReadRequest markChannelMessagesAsReadRequest = default(MarkChannelMessagesAsReadRequest))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->MarkChannelMessagesAsRead");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (markChannelMessagesAsReadRequest != null && markChannelMessagesAsReadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChannelMessagesAsReadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChannelMessagesAsReadRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChannelMessagesAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a specific user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/message/read-receipts/mark-all-messages-as-read-message#1-mark-all-messages-as-read
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markChannelMessagesAsReadRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MarkChannelMessagesAsReadAsync (string channelUrl, string apiToken = default(string), MarkChannelMessagesAsReadRequest markChannelMessagesAsReadRequest = default(MarkChannelMessagesAsReadRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await MarkChannelMessagesAsReadWithHttpInfoAsync(channelUrl, apiToken, markChannelMessagesAsReadRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a specific user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/platform-api/v3/message/read-receipts/mark-all-messages-as-read-message#1-mark-all-messages-as-read
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="markChannelMessagesAsReadRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MarkChannelMessagesAsReadWithHttpInfoAsync (string channelUrl, string apiToken = default(string), MarkChannelMessagesAsReadRequest markChannelMessagesAsReadRequest = default(MarkChannelMessagesAsReadRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->MarkChannelMessagesAsRead");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (markChannelMessagesAsReadRequest != null && markChannelMessagesAsReadRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChannelMessagesAsReadRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChannelMessagesAsReadRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChannelMessagesAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Migrate messages ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).      There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user).      2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically.      3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.       https://sendbird.com/docs/chat/platform-api/v3/message/migration/migrate-messages#1-migrate-messages
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetChannelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="migrateMessagesRequest"> (optional)</param>
        /// <returns>Object</returns>
        public Object MigrateMessages (string targetChannelUrl, string apiToken = default(string), MigrateMessagesRequest migrateMessagesRequest = default(MigrateMessagesRequest))
        {
             ApiResponse<Object> localVarResponse = MigrateMessagesWithHttpInfo(targetChannelUrl, apiToken, migrateMessagesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Migrate messages ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).      There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user).      2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically.      3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.       https://sendbird.com/docs/chat/platform-api/v3/message/migration/migrate-messages#1-migrate-messages
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetChannelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="migrateMessagesRequest"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> MigrateMessagesWithHttpInfo (string targetChannelUrl, string apiToken = default(string), MigrateMessagesRequest migrateMessagesRequest = default(MigrateMessagesRequest))
        {
            // verify the required parameter 'targetChannelUrl' is set
            if (targetChannelUrl == null)
                throw new ApiException(400, "Missing required parameter 'targetChannelUrl' when calling MessageApi->MigrateMessages");

            var localVarPath = "/v3/migration/{target_channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (targetChannelUrl != null) localVarPathParams.Add("target_channel_url", this.Configuration.ApiClient.ParameterToString(targetChannelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (migrateMessagesRequest != null && migrateMessagesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(migrateMessagesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = migrateMessagesRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MigrateMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Migrate messages ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).      There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user).      2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically.      3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.       https://sendbird.com/docs/chat/platform-api/v3/message/migration/migrate-messages#1-migrate-messages
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetChannelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="migrateMessagesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MigrateMessagesAsync (string targetChannelUrl, string apiToken = default(string), MigrateMessagesRequest migrateMessagesRequest = default(MigrateMessagesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await MigrateMessagesWithHttpInfoAsync(targetChannelUrl, apiToken, migrateMessagesRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Migrate messages ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).      There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user).      2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically.      3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.       https://sendbird.com/docs/chat/platform-api/v3/message/migration/migrate-messages#1-migrate-messages
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="targetChannelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="migrateMessagesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MigrateMessagesWithHttpInfoAsync (string targetChannelUrl, string apiToken = default(string), MigrateMessagesRequest migrateMessagesRequest = default(MigrateMessagesRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'targetChannelUrl' is set
            if (targetChannelUrl == null)
                throw new ApiException(400, "Missing required parameter 'targetChannelUrl' when calling MessageApi->MigrateMessages");

            var localVarPath = "/v3/migration/{target_channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (targetChannelUrl != null) localVarPathParams.Add("target_channel_url", this.Configuration.ApiClient.ParameterToString(targetChannelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (migrateMessagesRequest != null && migrateMessagesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(migrateMessagesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = migrateMessagesRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MigrateMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-remove-metadata#1-remove-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="keys"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>Object</returns>
        public Object RemoveExtraDataFromAMessage (string channelType, string channelUrl, long messageId, string keys = default(string), string apiToken = default(string))
        {
             ApiResponse<Object> localVarResponse = RemoveExtraDataFromAMessageWithHttpInfo(channelType, channelUrl, messageId, keys, apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-remove-metadata#1-remove-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="keys"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> RemoveExtraDataFromAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, string keys = default(string), string apiToken = default(string))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->RemoveExtraDataFromAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->RemoveExtraDataFromAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->RemoveExtraDataFromAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keys", keys)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveExtraDataFromAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-remove-metadata#1-remove-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="keys"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveExtraDataFromAMessageAsync (string channelType, string channelUrl, long messageId, string keys = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await RemoveExtraDataFromAMessageWithHttpInfoAsync(channelType, channelUrl, messageId, keys, apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-remove-metadata#1-remove-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="keys"> (optional)</param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveExtraDataFromAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, string keys = default(string), string apiToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->RemoveExtraDataFromAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->RemoveExtraDataFromAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->RemoveExtraDataFromAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "keys", keys)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveExtraDataFromAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Send a message ## Send a message  You can use this action to send a text message, a file message, or an admin message to a specific channel. Sendbird Chat SDKs and the platform API allows you to upload any type of files in messages to the Sendbird server. See [Message Overview](https://sendbird.com/docs/chat/platform-api/v3/message/message-overview) for more information on each message type. Messages are sent between client devices running the Sendbird Chat SDK or UIKit as well as programmatically from businesses to their customers. For instance, a delivery app can automatically send a message like \"Arriving in one minute!\" on behalf of a delivery driver.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/send-a-message#1-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendAMessageRequest"> (optional)</param>
        /// <returns>SendbirdMessageResponse</returns>
        public SendbirdMessageResponse SendAMessage (string channelType, string channelUrl, string apiToken = default(string), SendAMessageRequest sendAMessageRequest = default(SendAMessageRequest))
        {
             ApiResponse<SendbirdMessageResponse> localVarResponse = SendAMessageWithHttpInfo(channelType, channelUrl, apiToken, sendAMessageRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a message ## Send a message  You can use this action to send a text message, a file message, or an admin message to a specific channel. Sendbird Chat SDKs and the platform API allows you to upload any type of files in messages to the Sendbird server. See [Message Overview](https://sendbird.com/docs/chat/platform-api/v3/message/message-overview) for more information on each message type. Messages are sent between client devices running the Sendbird Chat SDK or UIKit as well as programmatically from businesses to their customers. For instance, a delivery app can automatically send a message like \"Arriving in one minute!\" on behalf of a delivery driver.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/send-a-message#1-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendAMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdMessageResponse</returns>
        public ApiResponse<SendbirdMessageResponse> SendAMessageWithHttpInfo (string channelType, string channelUrl, string apiToken = default(string), SendAMessageRequest sendAMessageRequest = default(SendAMessageRequest))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->SendAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->SendAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (sendAMessageRequest != null && sendAMessageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendAMessageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendAMessageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdMessageResponse)));
        }

        /// <summary>
        /// Send a message ## Send a message  You can use this action to send a text message, a file message, or an admin message to a specific channel. Sendbird Chat SDKs and the platform API allows you to upload any type of files in messages to the Sendbird server. See [Message Overview](https://sendbird.com/docs/chat/platform-api/v3/message/message-overview) for more information on each message type. Messages are sent between client devices running the Sendbird Chat SDK or UIKit as well as programmatically from businesses to their customers. For instance, a delivery app can automatically send a message like \"Arriving in one minute!\" on behalf of a delivery driver.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/send-a-message#1-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendbirdMessageResponse> SendAMessageAsync (string channelType, string channelUrl, string apiToken = default(string), SendAMessageRequest sendAMessageRequest = default(SendAMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendbirdMessageResponse> localVarResponse = await SendAMessageWithHttpInfoAsync(channelType, channelUrl, apiToken, sendAMessageRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a message ## Send a message  You can use this action to send a text message, a file message, or an admin message to a specific channel. Sendbird Chat SDKs and the platform API allows you to upload any type of files in messages to the Sendbird server. See [Message Overview](https://sendbird.com/docs/chat/platform-api/v3/message/message-overview) for more information on each message type. Messages are sent between client devices running the Sendbird Chat SDK or UIKit as well as programmatically from businesses to their customers. For instance, a delivery app can automatically send a message like \"Arriving in one minute!\" on behalf of a delivery driver.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/send-a-message#1-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="sendAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendbirdMessageResponse>> SendAMessageWithHttpInfoAsync (string channelType, string channelUrl, string apiToken = default(string), SendAMessageRequest sendAMessageRequest = default(SendAMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->SendAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->SendAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (sendAMessageRequest != null && sendAMessageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendAMessageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendAMessageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdMessageResponse)));
        }

        /// <summary>
        /// Update a message ## Update a message  Updates specific information on a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/update-a-message#1-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAMessageRequest"> (optional)</param>
        /// <returns>SendbirdMessageResponse</returns>
        public SendbirdMessageResponse UpdateAMessage (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateAMessageRequest updateAMessageRequest = default(UpdateAMessageRequest))
        {
             ApiResponse<SendbirdMessageResponse> localVarResponse = UpdateAMessageWithHttpInfo(channelType, channelUrl, messageId, apiToken, updateAMessageRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a message ## Update a message  Updates specific information on a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/update-a-message#1-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of SendbirdMessageResponse</returns>
        public ApiResponse<SendbirdMessageResponse> UpdateAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateAMessageRequest updateAMessageRequest = default(UpdateAMessageRequest))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->UpdateAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->UpdateAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->UpdateAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateAMessageRequest != null && updateAMessageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateAMessageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateAMessageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdMessageResponse)));
        }

        /// <summary>
        /// Update a message ## Update a message  Updates specific information on a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/update-a-message#1-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendbirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendbirdMessageResponse> UpdateAMessageAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateAMessageRequest updateAMessageRequest = default(UpdateAMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SendbirdMessageResponse> localVarResponse = await UpdateAMessageWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, updateAMessageRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a message ## Update a message  Updates specific information on a message.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/update-a-message#1-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendbirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendbirdMessageResponse>> UpdateAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateAMessageRequest updateAMessageRequest = default(UpdateAMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->UpdateAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->UpdateAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->UpdateAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateAMessageRequest != null && updateAMessageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateAMessageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateAMessageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendbirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendbirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendbirdMessageResponse)));
        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-update-metadata#1-update-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInAMessageRequest"> (optional)</param>
        /// <returns>UpdateExtraDataInAMessageResponse</returns>
        public UpdateExtraDataInAMessageResponse UpdateExtraDataInAMessage (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateExtraDataInAMessageRequest updateExtraDataInAMessageRequest = default(UpdateExtraDataInAMessageRequest))
        {
             ApiResponse<UpdateExtraDataInAMessageResponse> localVarResponse = UpdateExtraDataInAMessageWithHttpInfo(channelType, channelUrl, messageId, apiToken, updateExtraDataInAMessageRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-update-metadata#1-update-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInAMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of UpdateExtraDataInAMessageResponse</returns>
        public ApiResponse<UpdateExtraDataInAMessageResponse> UpdateExtraDataInAMessageWithHttpInfo (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateExtraDataInAMessageRequest updateExtraDataInAMessageRequest = default(UpdateExtraDataInAMessageRequest))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->UpdateExtraDataInAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->UpdateExtraDataInAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->UpdateExtraDataInAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateExtraDataInAMessageRequest != null && updateExtraDataInAMessageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateExtraDataInAMessageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateExtraDataInAMessageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtraDataInAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateExtraDataInAMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateExtraDataInAMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateExtraDataInAMessageResponse)));
        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-update-metadata#1-update-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateExtraDataInAMessageResponse</returns>
        public async System.Threading.Tasks.Task<UpdateExtraDataInAMessageResponse> UpdateExtraDataInAMessageAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateExtraDataInAMessageRequest updateExtraDataInAMessageRequest = default(UpdateExtraDataInAMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateExtraDataInAMessageResponse> localVarResponse = await UpdateExtraDataInAMessageWithHttpInfoAsync(channelType, channelUrl, messageId, apiToken, updateExtraDataInAMessageRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/message-update-metadata#1-update-metadata - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelType">(Required) </param>
        /// <param name="channelUrl">(Required) </param>
        /// <param name="messageId">(Required) </param>
        /// <param name="apiToken"> (optional)</param>
        /// <param name="updateExtraDataInAMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateExtraDataInAMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateExtraDataInAMessageResponse>> UpdateExtraDataInAMessageWithHttpInfoAsync (string channelType, string channelUrl, long messageId, string apiToken = default(string), UpdateExtraDataInAMessageRequest updateExtraDataInAMessageRequest = default(UpdateExtraDataInAMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->UpdateExtraDataInAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->UpdateExtraDataInAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->UpdateExtraDataInAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("api-token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateExtraDataInAMessageRequest != null && updateExtraDataInAMessageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateExtraDataInAMessageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateExtraDataInAMessageRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtraDataInAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateExtraDataInAMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateExtraDataInAMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateExtraDataInAMessageResponse)));
        }

    }
}
