/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add emoji categories
        /// </summary>
        /// <remarks>
        /// ## Add emoji categories  Adds a list of one or more new emoji categories to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emoji-categories
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddEmojiCategoriesResponse</returns>
        AddEmojiCategoriesResponse AddEmojiCategories (string apiToken, Object body = default);

        /// <summary>
        /// Add emoji categories
        /// </summary>
        /// <remarks>
        /// ## Add emoji categories  Adds a list of one or more new emoji categories to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emoji-categories
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddEmojiCategoriesResponse</returns>
        ApiResponse<AddEmojiCategoriesResponse> AddEmojiCategoriesWithHttpInfo (string apiToken, Object body = default);
        /// <summary>
        /// Add emojis
        /// </summary>
        /// <remarks>
        /// ## Add emojis  Adds a list of one or more new emojis to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addEmojisData"> (optional)</param>
        /// <returns>AddEmojisResponse</returns>
        AddEmojisResponse AddEmojis (string apiToken, AddEmojisData addEmojisData = default(AddEmojisData));

        /// <summary>
        /// Add emojis
        /// </summary>
        /// <remarks>
        /// ## Add emojis  Adds a list of one or more new emojis to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addEmojisData"> (optional)</param>
        /// <returns>ApiResponse of AddEmojisResponse</returns>
        ApiResponse<AddEmojisResponse> AddEmojisWithHttpInfo (string apiToken, AddEmojisData addEmojisData = default(AddEmojisData));
        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <returns>AddExtraDataToMessageResponse</returns>
        AddExtraDataToMessageResponse AddExtraDataToMessage (string apiToken, string channelType, string channelUrl, string messageId, AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData));

        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <returns>ApiResponse of AddExtraDataToMessageResponse</returns>
        ApiResponse<AddExtraDataToMessageResponse> AddExtraDataToMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData));
        /// <summary>
        /// Add a reaction to a message
        /// </summary>
        /// <remarks>
        /// ## Add a reaction to a message  Adds a specific reaction to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <returns>AddReactionToAMessageResponse</returns>
        AddReactionToAMessageResponse AddReactionToAMessage (string apiToken, string channelType, string channelUrl, string messageId, AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData));

        /// <summary>
        /// Add a reaction to a message
        /// </summary>
        /// <remarks>
        /// ## Add a reaction to a message  Adds a specific reaction to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <returns>ApiResponse of AddReactionToAMessageResponse</returns>
        ApiResponse<AddReactionToAMessageResponse> AddReactionToAMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData));
        /// <summary>
        /// Delete an emoji
        /// </summary>
        /// <remarks>
        /// ## Delete an emoji  Deletes an emoji from the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <returns></returns>
        void DeleteEmojiByKey (string apiToken, string emojiKey);

        /// <summary>
        /// Delete an emoji
        /// </summary>
        /// <remarks>
        /// ## Delete an emoji  Deletes an emoji from the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmojiByKeyWithHttpInfo (string apiToken, string emojiKey);
        /// <summary>
        /// Delete an emoji category
        /// </summary>
        /// <remarks>
        /// ## Delete an emoji category  Deletes an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <returns>Object</returns>
        Object DeleteEmojiCategoryById (string apiToken, string emojiCategoryId);

        /// <summary>
        /// Delete an emoji category
        /// </summary>
        /// <remarks>
        /// ## Delete an emoji category  Deletes an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteEmojiCategoryByIdWithHttpInfo (string apiToken, string emojiCategoryId);
        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <returns>Object</returns>
        Object DeleteMessageById (string apiToken, string channelType, string channelUrl, string messageId);

        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId);
        /// <summary>
        /// Enable reactions
        /// </summary>
        /// <remarks>
        /// ## Enable reactions  Turn on or off reactions in a Sendbird application.  > __Note__: This action also allows reactions in UIKit.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-enable-reactions
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="enableReactionsData"> (optional)</param>
        /// <returns>EnableReactionsResponse</returns>
        EnableReactionsResponse EnableReactions (string apiToken, EnableReactionsData enableReactionsData = default(EnableReactionsData));

        /// <summary>
        /// Enable reactions
        /// </summary>
        /// <remarks>
        /// ## Enable reactions  Turn on or off reactions in a Sendbird application.  > __Note__: This action also allows reactions in UIKit.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-enable-reactions
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="enableReactionsData"> (optional)</param>
        /// <returns>ApiResponse of EnableReactionsResponse</returns>
        ApiResponse<EnableReactionsResponse> EnableReactionsWithHttpInfo (string apiToken, EnableReactionsData enableReactionsData = default(EnableReactionsData));
        /// <summary>
        /// Mark all messages as delivered
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <returns>GcMarkAllMessagesAsDeliveredResponse</returns>
        GcMarkAllMessagesAsDeliveredResponse GcMarkAllMessagesAsDelivered (string apiToken, string channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData));

        /// <summary>
        /// Mark all messages as delivered
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <returns>ApiResponse of GcMarkAllMessagesAsDeliveredResponse</returns>
        ApiResponse<GcMarkAllMessagesAsDeliveredResponse> GcMarkAllMessagesAsDeliveredWithHttpInfo (string apiToken, string channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData));
        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <returns>Object</returns>
        Object GcMarkAllMessagesAsRead (string apiToken, string channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData));

        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GcMarkAllMessagesAsReadWithHttpInfo (string apiToken, string channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData));
        /// <summary>
        /// View number of each member's unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of each member's unread messages  Retrieves the total number of each member's unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="userIds"> (optional)</param>
        /// <returns>GcViewNumberOfEachMembersUnreadMessagesResponse</returns>
        GcViewNumberOfEachMembersUnreadMessagesResponse GcViewNumberOfEachMembersUnreadMessages (string apiToken, string channelUrl, string userIds = default);

        /// <summary>
        /// View number of each member's unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of each member's unread messages  Retrieves the total number of each member's unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="userIds"> (optional)</param>
        /// <returns>ApiResponse of GcViewNumberOfEachMembersUnreadMessagesResponse</returns>
        ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse> GcViewNumberOfEachMembersUnreadMessagesWithHttpInfo (string apiToken, string channelUrl, string userIds = default);
        /// <summary>
        /// Get an emoji
        /// </summary>
        /// <remarks>
        /// ## Get an emoji  Retrieves an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <returns>SendBirdEmoji</returns>
        SendBirdEmoji GetEmojiByKey (string apiToken, string emojiKey);

        /// <summary>
        /// Get an emoji
        /// </summary>
        /// <remarks>
        /// ## Get an emoji  Retrieves an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <returns>ApiResponse of SendBirdEmoji</returns>
        ApiResponse<SendBirdEmoji> GetEmojiByKeyWithHttpInfo (string apiToken, string emojiKey);
        /// <summary>
        /// Get an emoji category
        /// </summary>
        /// <remarks>
        /// ## Get an emoji category  Retrieves an emoji category with the specified ID, including its emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `emoji_category_id`      Type: int      Description: Specifies the unique ID of the emoji category to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <returns>SendBirdEmojiCategory</returns>
        SendBirdEmojiCategory GetEmojiCategoryById (string apiToken, string emojiCategoryId);

        /// <summary>
        /// Get an emoji category
        /// </summary>
        /// <remarks>
        /// ## Get an emoji category  Retrieves an emoji category with the specified ID, including its emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `emoji_category_id`      Type: int      Description: Specifies the unique ID of the emoji category to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <returns>ApiResponse of SendBirdEmojiCategory</returns>
        ApiResponse<SendBirdEmojiCategory> GetEmojiCategoryByIdWithHttpInfo (string apiToken, string emojiCategoryId);
        /// <summary>
        /// List all emojis and emoji categories
        /// </summary>
        /// <remarks>
        /// ## List all emojis and emoji categories  Retrieves a list of all emoji categories registered to the application, including their emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-all-emojis-and-emoji-categories
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ListAllEmojisAndEmojiCategoriesResponse</returns>
        ListAllEmojisAndEmojiCategoriesResponse ListAllEmojisAndEmojiCategories (string apiToken);

        /// <summary>
        /// List all emojis and emoji categories
        /// </summary>
        /// <remarks>
        /// ## List all emojis and emoji categories  Retrieves a list of all emoji categories registered to the application, including their emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-all-emojis-and-emoji-categories
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ListAllEmojisAndEmojiCategoriesResponse</returns>
        ApiResponse<ListAllEmojisAndEmojiCategoriesResponse> ListAllEmojisAndEmojiCategoriesWithHttpInfo (string apiToken);
        /// <summary>
        /// List announcements
        /// </summary>
        /// <remarks>
        /// ## List announcements  Retrieves a list of announcements.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcements - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="announcementGroup"> (optional)</param>
        /// <returns>ListAnnouncementsResponse</returns>
        ListAnnouncementsResponse ListAnnouncements (string apiToken, string token = default, int? limit = default, string order = default, string status = default, string announcementGroup = default);

        /// <summary>
        /// List announcements
        /// </summary>
        /// <remarks>
        /// ## List announcements  Retrieves a list of announcements.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcements - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="announcementGroup"> (optional)</param>
        /// <returns>ApiResponse of ListAnnouncementsResponse</returns>
        ApiResponse<ListAnnouncementsResponse> ListAnnouncementsWithHttpInfo (string apiToken, string token = default, int? limit = default, string order = default, string status = default, string announcementGroup = default);
        /// <summary>
        /// List emojis
        /// </summary>
        /// <remarks>
        /// ## List emojis  Retrieves a list of all emojis registered to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ListEmojisResponse</returns>
        ListEmojisResponse ListEmojis (string apiToken);

        /// <summary>
        /// List emojis
        /// </summary>
        /// <remarks>
        /// ## List emojis  Retrieves a list of all emojis registered to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ListEmojisResponse</returns>
        ApiResponse<ListEmojisResponse> ListEmojisWithHttpInfo (string apiToken);
        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  Retrieves a list of past messages of a channel.  > This message retrieval is one of Sendbird's [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"> (optional)</param>
        /// <param name="messageId"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>ListMessagesResponse</returns>
        ListMessagesResponse ListMessages (string apiToken, string channelType, string channelUrl, string messageTs = default, int? messageId = default, int? prevLimit = default, int? nextLimit = default, bool? include = default, bool? reverse = default, string senderId = default, string senderIds = default, string operatorFilter = default, string customTypes = default, string messageType = default, bool? includingRemoved = default, bool? includeReactions = default, bool? withSortedMetaArray = default, bool? showSubchannelMessagesOnly = default, string userId = default, string customType = default, bool? withMetaArray = default);

        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  Retrieves a list of past messages of a channel.  > This message retrieval is one of Sendbird's [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"> (optional)</param>
        /// <param name="messageId"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>ApiResponse of ListMessagesResponse</returns>
        ApiResponse<ListMessagesResponse> ListMessagesWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageTs = default, int? messageId = default, int? prevLimit = default, int? nextLimit = default, bool? include = default, bool? reverse = default, string senderId = default, string senderIds = default, string operatorFilter = default, string customTypes = default, string messageType = default, bool? includingRemoved = default, bool? includeReactions = default, bool? withSortedMetaArray = default, bool? showSubchannelMessagesOnly = default, string userId = default, string customType = default, bool? withMetaArray = default);
        /// <summary>
        /// List reactions of a message
        /// </summary>
        /// <remarks>
        /// ## List reactions of a message  Retrieves a list of reactions made to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="listUsers"> (optional)</param>
        /// <returns>ListReactionsOfMessageResponse</returns>
        ListReactionsOfMessageResponse ListReactionsOfMessage (string apiToken, string channelType, string channelUrl, string messageId, bool? listUsers = default);

        /// <summary>
        /// List reactions of a message
        /// </summary>
        /// <remarks>
        /// ## List reactions of a message  Retrieves a list of reactions made to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="listUsers"> (optional)</param>
        /// <returns>ApiResponse of ListReactionsOfMessageResponse</returns>
        ApiResponse<ListReactionsOfMessageResponse> ListReactionsOfMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, bool? listUsers = default);
        /// <summary>
        /// Migrate messages
        /// </summary>
        /// <remarks>
        /// ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).  There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user). 2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically. 3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.  https://sendbird.com/docs/chat/v3/platform-api/guides/migration#2-migrate-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="targetChannelUrl"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void MigrateMessagesByUrl (string apiToken, string targetChannelUrl, Object body = default);

        /// <summary>
        /// Migrate messages
        /// </summary>
        /// <remarks>
        /// ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).  There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user). 2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically. 3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.  https://sendbird.com/docs/chat/v3/platform-api/guides/migration#2-migrate-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="targetChannelUrl"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MigrateMessagesByUrlWithHttpInfo (string apiToken, string targetChannelUrl, Object body = default);
        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="keys"> (optional)</param>
        /// <returns>Object</returns>
        Object RemoveExtraDataFromMessage (string apiToken, string channelType, string channelUrl, string messageId, List<string> keys = default);

        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="keys"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveExtraDataFromMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, List<string> keys = default);
        /// <summary>
        /// Remove a reaction from a message
        /// </summary>
        /// <remarks>
        /// ## Remove a reaction from a message  Removes a specific reaction from a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <returns>RemoveReactionFromAMessageResponse</returns>
        RemoveReactionFromAMessageResponse RemoveReactionFromAMessage (string apiToken, string channelType, string channelUrl, string messageId, string userId = default, string reaction = default);

        /// <summary>
        /// Remove a reaction from a message
        /// </summary>
        /// <remarks>
        /// ## Remove a reaction from a message  Removes a specific reaction from a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <returns>ApiResponse of RemoveReactionFromAMessageResponse</returns>
        ApiResponse<RemoveReactionFromAMessageResponse> RemoveReactionFromAMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, string userId = default, string reaction = default);
        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  >__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        SendBirdMessageResponse SendMessage (string apiToken, string channelType, string channelUrl, SendMessageData sendMessageData = default(SendMessageData));

        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  >__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        ApiResponse<SendBirdMessageResponse> SendMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, SendMessageData sendMessageData = default(SendMessageData));
        /// <summary>
        /// Translate a message into other languages
        /// </summary>
        /// <remarks>
        /// ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  > __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="translateMessageIntoOtherLanguagesData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        SendBirdMessageResponse TranslateMessageIntoOtherLanguages (string apiToken, string channelType, string channelUrl, string messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData = default(TranslateMessageIntoOtherLanguagesData));

        /// <summary>
        /// Translate a message into other languages
        /// </summary>
        /// <remarks>
        /// ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  > __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="translateMessageIntoOtherLanguagesData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        ApiResponse<SendBirdMessageResponse> TranslateMessageIntoOtherLanguagesWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData = default(TranslateMessageIntoOtherLanguagesData));
        /// <summary>
        /// Update an emoji category URL
        /// </summary>
        /// <remarks>
        /// ## Update an emoji category URL  Updates the URL of an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-category-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="updateEmojiCategoryUrlByIdData"> (optional)</param>
        /// <returns>SendBirdEmojiCategory</returns>
        SendBirdEmojiCategory UpdateEmojiCategoryUrlById (string apiToken, string emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData = default(UpdateEmojiCategoryUrlByIdData));

        /// <summary>
        /// Update an emoji category URL
        /// </summary>
        /// <remarks>
        /// ## Update an emoji category URL  Updates the URL of an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-category-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="updateEmojiCategoryUrlByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdEmojiCategory</returns>
        ApiResponse<SendBirdEmojiCategory> UpdateEmojiCategoryUrlByIdWithHttpInfo (string apiToken, string emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData = default(UpdateEmojiCategoryUrlByIdData));
        /// <summary>
        /// Update an emoji URL
        /// </summary>
        /// <remarks>
        /// ## Update an emoji URL  Updates the image URL of an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="updateEmojiUrlByKeyData"> (optional)</param>
        /// <returns>SendBirdEmoji</returns>
        SendBirdEmoji UpdateEmojiUrlByKey (string apiToken, string emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData = default(UpdateEmojiUrlByKeyData));

        /// <summary>
        /// Update an emoji URL
        /// </summary>
        /// <remarks>
        /// ## Update an emoji URL  Updates the image URL of an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="updateEmojiUrlByKeyData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdEmoji</returns>
        ApiResponse<SendBirdEmoji> UpdateEmojiUrlByKeyWithHttpInfo (string apiToken, string emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData = default(UpdateEmojiUrlByKeyData));
        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <returns>UpdateExtraDataInMessageResponse</returns>
        UpdateExtraDataInMessageResponse UpdateExtraDataInMessage (string apiToken, string channelType, string channelUrl, string messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData));

        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <returns>ApiResponse of UpdateExtraDataInMessageResponse</returns>
        ApiResponse<UpdateExtraDataInMessageResponse> UpdateExtraDataInMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData));
        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        SendBirdMessageResponse UpdateMessageById (string apiToken, string channelType, string channelUrl, string messageId, UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData));

        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        ApiResponse<SendBirdMessageResponse> UpdateMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData));
        /// <summary>
        /// Use default emojis
        /// </summary>
        /// <remarks>
        /// ## Use default emojis  Determines whether to use the 7 default emojis initially provided.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-use-default-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="useDefaultEmojisData"> (optional)</param>
        /// <returns>UseDefaultEmojisResponse</returns>
        UseDefaultEmojisResponse UseDefaultEmojis (string apiToken, UseDefaultEmojisData useDefaultEmojisData = default(UseDefaultEmojisData));

        /// <summary>
        /// Use default emojis
        /// </summary>
        /// <remarks>
        /// ## Use default emojis  Determines whether to use the 7 default emojis initially provided.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-use-default-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="useDefaultEmojisData"> (optional)</param>
        /// <returns>ApiResponse of UseDefaultEmojisResponse</returns>
        ApiResponse<UseDefaultEmojisResponse> UseDefaultEmojisWithHttpInfo (string apiToken, UseDefaultEmojisData useDefaultEmojisData = default(UseDefaultEmojisData));
        /// <summary>
        /// View a message
        /// </summary>
        /// <remarks>
        /// ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        SendBirdMessageResponse ViewMessageById (string apiToken, string channelType, string channelUrl, string messageId, bool? withSortedMetaArray = default, bool? withMetaArray = default);

        /// <summary>
        /// View a message
        /// </summary>
        /// <remarks>
        /// ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        ApiResponse<SendBirdMessageResponse> ViewMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, bool? withSortedMetaArray = default, bool? withMetaArray = default);
        /// <summary>
        /// View total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ViewTotalNumberOfMessagesInChannelResponse</returns>
        ViewTotalNumberOfMessagesInChannelResponse ViewTotalNumberOfMessagesInChannel (string apiToken, string channelType, string channelUrl);

        /// <summary>
        /// View total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ApiResponse of ViewTotalNumberOfMessagesInChannelResponse</returns>
        ApiResponse<ViewTotalNumberOfMessagesInChannelResponse> ViewTotalNumberOfMessagesInChannelWithHttpInfo (string apiToken, string channelType, string channelUrl);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add emoji categories
        /// </summary>
        /// <remarks>
        /// ## Add emoji categories  Adds a list of one or more new emoji categories to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emoji-categories
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddEmojiCategoriesResponse</returns>
        System.Threading.Tasks.Task<AddEmojiCategoriesResponse> AddEmojiCategoriesAsync (string apiToken, Object body = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Add emoji categories
        /// </summary>
        /// <remarks>
        /// ## Add emoji categories  Adds a list of one or more new emoji categories to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emoji-categories
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddEmojiCategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddEmojiCategoriesResponse>> AddEmojiCategoriesWithHttpInfoAsync (string apiToken, Object body = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Add emojis
        /// </summary>
        /// <remarks>
        /// ## Add emojis  Adds a list of one or more new emojis to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addEmojisData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddEmojisResponse</returns>
        System.Threading.Tasks.Task<AddEmojisResponse> AddEmojisAsync (string apiToken, AddEmojisData addEmojisData = default(AddEmojisData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Add emojis
        /// </summary>
        /// <remarks>
        /// ## Add emojis  Adds a list of one or more new emojis to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addEmojisData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddEmojisResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddEmojisResponse>> AddEmojisWithHttpInfoAsync (string apiToken, AddEmojisData addEmojisData = default(AddEmojisData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddExtraDataToMessageResponse</returns>
        System.Threading.Tasks.Task<AddExtraDataToMessageResponse> AddExtraDataToMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Add extra data to a message
        /// </summary>
        /// <remarks>
        /// ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddExtraDataToMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddExtraDataToMessageResponse>> AddExtraDataToMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Add a reaction to a message
        /// </summary>
        /// <remarks>
        /// ## Add a reaction to a message  Adds a specific reaction to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddReactionToAMessageResponse</returns>
        System.Threading.Tasks.Task<AddReactionToAMessageResponse> AddReactionToAMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a reaction to a message
        /// </summary>
        /// <remarks>
        /// ## Add a reaction to a message  Adds a specific reaction to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddReactionToAMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddReactionToAMessageResponse>> AddReactionToAMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete an emoji
        /// </summary>
        /// <remarks>
        /// ## Delete an emoji  Deletes an emoji from the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmojiByKeyAsync (string apiToken, string emojiKey, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an emoji
        /// </summary>
        /// <remarks>
        /// ## Delete an emoji  Deletes an emoji from the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmojiByKeyWithHttpInfoAsync (string apiToken, string emojiKey, CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete an emoji category
        /// </summary>
        /// <remarks>
        /// ## Delete an emoji category  Deletes an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteEmojiCategoryByIdAsync (string apiToken, string emojiCategoryId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete an emoji category
        /// </summary>
        /// <remarks>
        /// ## Delete an emoji category  Deletes an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmojiCategoryByIdWithHttpInfoAsync (string apiToken, string emojiCategoryId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a message
        /// </summary>
        /// <remarks>
        /// ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Enable reactions
        /// </summary>
        /// <remarks>
        /// ## Enable reactions  Turn on or off reactions in a Sendbird application.  > __Note__: This action also allows reactions in UIKit.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-enable-reactions
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="enableReactionsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EnableReactionsResponse</returns>
        System.Threading.Tasks.Task<EnableReactionsResponse> EnableReactionsAsync (string apiToken, EnableReactionsData enableReactionsData = default(EnableReactionsData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Enable reactions
        /// </summary>
        /// <remarks>
        /// ## Enable reactions  Turn on or off reactions in a Sendbird application.  > __Note__: This action also allows reactions in UIKit.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-enable-reactions
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="enableReactionsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EnableReactionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnableReactionsResponse>> EnableReactionsWithHttpInfoAsync (string apiToken, EnableReactionsData enableReactionsData = default(EnableReactionsData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Mark all messages as delivered
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GcMarkAllMessagesAsDeliveredResponse</returns>
        System.Threading.Tasks.Task<GcMarkAllMessagesAsDeliveredResponse> GcMarkAllMessagesAsDeliveredAsync (string apiToken, string channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Mark all messages as delivered
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GcMarkAllMessagesAsDeliveredResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GcMarkAllMessagesAsDeliveredResponse>> GcMarkAllMessagesAsDeliveredWithHttpInfoAsync (string apiToken, string channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GcMarkAllMessagesAsReadAsync (string apiToken, string channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GcMarkAllMessagesAsReadWithHttpInfoAsync (string apiToken, string channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData), CancellationToken cancellationToken = default);
        /// <summary>
        /// View number of each member's unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of each member's unread messages  Retrieves the total number of each member's unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GcViewNumberOfEachMembersUnreadMessagesResponse</returns>
        System.Threading.Tasks.Task<GcViewNumberOfEachMembersUnreadMessagesResponse> GcViewNumberOfEachMembersUnreadMessagesAsync (string apiToken, string channelUrl, string userIds = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// View number of each member&#39;s unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of each member's unread messages  Retrieves the total number of each member's unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GcViewNumberOfEachMembersUnreadMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse>> GcViewNumberOfEachMembersUnreadMessagesWithHttpInfoAsync (string apiToken, string channelUrl, string userIds = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get an emoji
        /// </summary>
        /// <remarks>
        /// ## Get an emoji  Retrieves an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdEmoji</returns>
        System.Threading.Tasks.Task<SendBirdEmoji> GetEmojiByKeyAsync (string apiToken, string emojiKey, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an emoji
        /// </summary>
        /// <remarks>
        /// ## Get an emoji  Retrieves an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdEmoji)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdEmoji>> GetEmojiByKeyWithHttpInfoAsync (string apiToken, string emojiKey, CancellationToken cancellationToken = default);
        /// <summary>
        /// Get an emoji category
        /// </summary>
        /// <remarks>
        /// ## Get an emoji category  Retrieves an emoji category with the specified ID, including its emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `emoji_category_id`      Type: int      Description: Specifies the unique ID of the emoji category to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdEmojiCategory</returns>
        System.Threading.Tasks.Task<SendBirdEmojiCategory> GetEmojiCategoryByIdAsync (string apiToken, string emojiCategoryId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an emoji category
        /// </summary>
        /// <remarks>
        /// ## Get an emoji category  Retrieves an emoji category with the specified ID, including its emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `emoji_category_id`      Type: int      Description: Specifies the unique ID of the emoji category to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdEmojiCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdEmojiCategory>> GetEmojiCategoryByIdWithHttpInfoAsync (string apiToken, string emojiCategoryId, CancellationToken cancellationToken = default);
        /// <summary>
        /// List all emojis and emoji categories
        /// </summary>
        /// <remarks>
        /// ## List all emojis and emoji categories  Retrieves a list of all emoji categories registered to the application, including their emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-all-emojis-and-emoji-categories
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListAllEmojisAndEmojiCategoriesResponse</returns>
        System.Threading.Tasks.Task<ListAllEmojisAndEmojiCategoriesResponse> ListAllEmojisAndEmojiCategoriesAsync (string apiToken, CancellationToken cancellationToken = default);

        /// <summary>
        /// List all emojis and emoji categories
        /// </summary>
        /// <remarks>
        /// ## List all emojis and emoji categories  Retrieves a list of all emoji categories registered to the application, including their emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-all-emojis-and-emoji-categories
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListAllEmojisAndEmojiCategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAllEmojisAndEmojiCategoriesResponse>> ListAllEmojisAndEmojiCategoriesWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default);
        /// <summary>
        /// List announcements
        /// </summary>
        /// <remarks>
        /// ## List announcements  Retrieves a list of announcements.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcements - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="announcementGroup"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListAnnouncementsResponse</returns>
        System.Threading.Tasks.Task<ListAnnouncementsResponse> ListAnnouncementsAsync (string apiToken, string token = default, int? limit = default, string order = default, string status = default, string announcementGroup = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List announcements
        /// </summary>
        /// <remarks>
        /// ## List announcements  Retrieves a list of announcements.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcements - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="announcementGroup"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListAnnouncementsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAnnouncementsResponse>> ListAnnouncementsWithHttpInfoAsync (string apiToken, string token = default, int? limit = default, string order = default, string status = default, string announcementGroup = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// List emojis
        /// </summary>
        /// <remarks>
        /// ## List emojis  Retrieves a list of all emojis registered to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListEmojisResponse</returns>
        System.Threading.Tasks.Task<ListEmojisResponse> ListEmojisAsync (string apiToken, CancellationToken cancellationToken = default);

        /// <summary>
        /// List emojis
        /// </summary>
        /// <remarks>
        /// ## List emojis  Retrieves a list of all emojis registered to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListEmojisResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListEmojisResponse>> ListEmojisWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default);
        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  Retrieves a list of past messages of a channel.  > This message retrieval is one of Sendbird's [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"> (optional)</param>
        /// <param name="messageId"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMessagesResponse</returns>
        System.Threading.Tasks.Task<ListMessagesResponse> ListMessagesAsync (string apiToken, string channelType, string channelUrl, string messageTs = default, int? messageId = default, int? prevLimit = default, int? nextLimit = default, bool? include = default, bool? reverse = default, string senderId = default, string senderIds = default, string operatorFilter = default, string customTypes = default, string messageType = default, bool? includingRemoved = default, bool? includeReactions = default, bool? withSortedMetaArray = default, bool? showSubchannelMessagesOnly = default, string userId = default, string customType = default, bool? withMetaArray = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// ## List messages  Retrieves a list of past messages of a channel.  > This message retrieval is one of Sendbird's [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"> (optional)</param>
        /// <param name="messageId"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMessagesResponse>> ListMessagesWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageTs = default, int? messageId = default, int? prevLimit = default, int? nextLimit = default, bool? include = default, bool? reverse = default, string senderId = default, string senderIds = default, string operatorFilter = default, string customTypes = default, string messageType = default, bool? includingRemoved = default, bool? includeReactions = default, bool? withSortedMetaArray = default, bool? showSubchannelMessagesOnly = default, string userId = default, string customType = default, bool? withMetaArray = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// List reactions of a message
        /// </summary>
        /// <remarks>
        /// ## List reactions of a message  Retrieves a list of reactions made to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="listUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListReactionsOfMessageResponse</returns>
        System.Threading.Tasks.Task<ListReactionsOfMessageResponse> ListReactionsOfMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, bool? listUsers = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List reactions of a message
        /// </summary>
        /// <remarks>
        /// ## List reactions of a message  Retrieves a list of reactions made to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="listUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListReactionsOfMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListReactionsOfMessageResponse>> ListReactionsOfMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, bool? listUsers = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Migrate messages
        /// </summary>
        /// <remarks>
        /// ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).  There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user). 2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically. 3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.  https://sendbird.com/docs/chat/v3/platform-api/guides/migration#2-migrate-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="targetChannelUrl"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MigrateMessagesByUrlAsync (string apiToken, string targetChannelUrl, Object body = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Migrate messages
        /// </summary>
        /// <remarks>
        /// ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).  There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user). 2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically. 3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.  https://sendbird.com/docs/chat/v3/platform-api/guides/migration#2-migrate-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="targetChannelUrl"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MigrateMessagesByUrlWithHttpInfoAsync (string apiToken, string targetChannelUrl, Object body = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveExtraDataFromMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, List<string> keys = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove extra data from a message
        /// </summary>
        /// <remarks>
        /// ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveExtraDataFromMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, List<string> keys = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Remove a reaction from a message
        /// </summary>
        /// <remarks>
        /// ## Remove a reaction from a message  Removes a specific reaction from a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemoveReactionFromAMessageResponse</returns>
        System.Threading.Tasks.Task<RemoveReactionFromAMessageResponse> RemoveReactionFromAMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, string userId = default, string reaction = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a reaction from a message
        /// </summary>
        /// <remarks>
        /// ## Remove a reaction from a message  Removes a specific reaction from a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemoveReactionFromAMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveReactionFromAMessageResponse>> RemoveReactionFromAMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, string userId = default, string reaction = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  >__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendBirdMessageResponse> SendMessageAsync (string apiToken, string channelType, string channelUrl, SendMessageData sendMessageData = default(SendMessageData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  >__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> SendMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, SendMessageData sendMessageData = default(SendMessageData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Translate a message into other languages
        /// </summary>
        /// <remarks>
        /// ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  > __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="translateMessageIntoOtherLanguagesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendBirdMessageResponse> TranslateMessageIntoOtherLanguagesAsync (string apiToken, string channelType, string channelUrl, string messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData = default(TranslateMessageIntoOtherLanguagesData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Translate a message into other languages
        /// </summary>
        /// <remarks>
        /// ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  > __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="translateMessageIntoOtherLanguagesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> TranslateMessageIntoOtherLanguagesWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData = default(TranslateMessageIntoOtherLanguagesData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Update an emoji category URL
        /// </summary>
        /// <remarks>
        /// ## Update an emoji category URL  Updates the URL of an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-category-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="updateEmojiCategoryUrlByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdEmojiCategory</returns>
        System.Threading.Tasks.Task<SendBirdEmojiCategory> UpdateEmojiCategoryUrlByIdAsync (string apiToken, string emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData = default(UpdateEmojiCategoryUrlByIdData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an emoji category URL
        /// </summary>
        /// <remarks>
        /// ## Update an emoji category URL  Updates the URL of an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-category-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="updateEmojiCategoryUrlByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdEmojiCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdEmojiCategory>> UpdateEmojiCategoryUrlByIdWithHttpInfoAsync (string apiToken, string emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData = default(UpdateEmojiCategoryUrlByIdData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Update an emoji URL
        /// </summary>
        /// <remarks>
        /// ## Update an emoji URL  Updates the image URL of an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="updateEmojiUrlByKeyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdEmoji</returns>
        System.Threading.Tasks.Task<SendBirdEmoji> UpdateEmojiUrlByKeyAsync (string apiToken, string emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData = default(UpdateEmojiUrlByKeyData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Update an emoji URL
        /// </summary>
        /// <remarks>
        /// ## Update an emoji URL  Updates the image URL of an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="updateEmojiUrlByKeyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdEmoji)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdEmoji>> UpdateEmojiUrlByKeyWithHttpInfoAsync (string apiToken, string emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData = default(UpdateEmojiUrlByKeyData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateExtraDataInMessageResponse</returns>
        System.Threading.Tasks.Task<UpdateExtraDataInMessageResponse> UpdateExtraDataInMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Update extra data in a message
        /// </summary>
        /// <remarks>
        /// ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateExtraDataInMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateExtraDataInMessageResponse>> UpdateExtraDataInMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendBirdMessageResponse> UpdateMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a message
        /// </summary>
        /// <remarks>
        /// ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> UpdateMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData), CancellationToken cancellationToken = default);
        /// <summary>
        /// Use default emojis
        /// </summary>
        /// <remarks>
        /// ## Use default emojis  Determines whether to use the 7 default emojis initially provided.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-use-default-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="useDefaultEmojisData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UseDefaultEmojisResponse</returns>
        System.Threading.Tasks.Task<UseDefaultEmojisResponse> UseDefaultEmojisAsync (string apiToken, UseDefaultEmojisData useDefaultEmojisData = default(UseDefaultEmojisData), CancellationToken cancellationToken = default);

        /// <summary>
        /// Use default emojis
        /// </summary>
        /// <remarks>
        /// ## Use default emojis  Determines whether to use the 7 default emojis initially provided.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-use-default-emojis
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="useDefaultEmojisData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UseDefaultEmojisResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UseDefaultEmojisResponse>> UseDefaultEmojisWithHttpInfoAsync (string apiToken, UseDefaultEmojisData useDefaultEmojisData = default(UseDefaultEmojisData), CancellationToken cancellationToken = default);
        /// <summary>
        /// View a message
        /// </summary>
        /// <remarks>
        /// ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        System.Threading.Tasks.Task<SendBirdMessageResponse> ViewMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, bool? withSortedMetaArray = default, bool? withMetaArray = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// View a message
        /// </summary>
        /// <remarks>
        /// ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> ViewMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, bool? withSortedMetaArray = default, bool? withMetaArray = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// View total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewTotalNumberOfMessagesInChannelResponse</returns>
        System.Threading.Tasks.Task<ViewTotalNumberOfMessagesInChannelResponse> ViewTotalNumberOfMessagesInChannelAsync (string apiToken, string channelType, string channelUrl, CancellationToken cancellationToken = default);

        /// <summary>
        /// View total number of messages in a channel
        /// </summary>
        /// <remarks>
        /// ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewTotalNumberOfMessagesInChannelResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewTotalNumberOfMessagesInChannelResponse>> ViewTotalNumberOfMessagesInChannelWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessageApi : IMessageApi
    {
        private sendbird_platform_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessageApi(String basePath)
        {
            this.Configuration = new sendbird_platform_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class
        /// </summary>
        /// <returns></returns>
        public MessageApi()
        {
            this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessageApi(sendbird_platform_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird_platform_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird_platform_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add emoji categories ## Add emoji categories  Adds a list of one or more new emoji categories to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emoji-categories
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>AddEmojiCategoriesResponse</returns>
        public AddEmojiCategoriesResponse AddEmojiCategories (string apiToken, Object body = default)
        {
             ApiResponse<AddEmojiCategoriesResponse> localVarResponse = AddEmojiCategoriesWithHttpInfo(apiToken, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add emoji categories ## Add emoji categories  Adds a list of one or more new emoji categories to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emoji-categories
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AddEmojiCategoriesResponse</returns>
        public ApiResponse<AddEmojiCategoriesResponse> AddEmojiCategoriesWithHttpInfo (string apiToken, Object body = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->AddEmojiCategories");

            var localVarPath = "/v3/emoji_categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEmojiCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddEmojiCategoriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddEmojiCategoriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddEmojiCategoriesResponse)));
        }

        /// <summary>
        /// Add emoji categories ## Add emoji categories  Adds a list of one or more new emoji categories to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emoji-categories
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddEmojiCategoriesResponse</returns>
        public async System.Threading.Tasks.Task<AddEmojiCategoriesResponse> AddEmojiCategoriesAsync (string apiToken, Object body = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<AddEmojiCategoriesResponse> localVarResponse = await AddEmojiCategoriesWithHttpInfoAsync(apiToken, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add emoji categories ## Add emoji categories  Adds a list of one or more new emoji categories to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emoji-categories
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddEmojiCategoriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddEmojiCategoriesResponse>> AddEmojiCategoriesWithHttpInfoAsync (string apiToken, Object body = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->AddEmojiCategories");

            var localVarPath = "/v3/emoji_categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEmojiCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddEmojiCategoriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddEmojiCategoriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddEmojiCategoriesResponse)));
        }

        /// <summary>
        /// Add emojis ## Add emojis  Adds a list of one or more new emojis to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addEmojisData"> (optional)</param>
        /// <returns>AddEmojisResponse</returns>
        public AddEmojisResponse AddEmojis (string apiToken, AddEmojisData addEmojisData = default(AddEmojisData))
        {
             ApiResponse<AddEmojisResponse> localVarResponse = AddEmojisWithHttpInfo(apiToken, addEmojisData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add emojis ## Add emojis  Adds a list of one or more new emojis to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addEmojisData"> (optional)</param>
        /// <returns>ApiResponse of AddEmojisResponse</returns>
        public ApiResponse<AddEmojisResponse> AddEmojisWithHttpInfo (string apiToken, AddEmojisData addEmojisData = default(AddEmojisData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->AddEmojis");

            var localVarPath = "/v3/emojis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addEmojisData != null && addEmojisData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addEmojisData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addEmojisData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEmojis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddEmojisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddEmojisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddEmojisResponse)));
        }

        /// <summary>
        /// Add emojis ## Add emojis  Adds a list of one or more new emojis to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addEmojisData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddEmojisResponse</returns>
        public async System.Threading.Tasks.Task<AddEmojisResponse> AddEmojisAsync (string apiToken, AddEmojisData addEmojisData = default(AddEmojisData), CancellationToken cancellationToken = default)
        {
             ApiResponse<AddEmojisResponse> localVarResponse = await AddEmojisWithHttpInfoAsync(apiToken, addEmojisData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add emojis ## Add emojis  Adds a list of one or more new emojis to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-add-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="addEmojisData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddEmojisResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddEmojisResponse>> AddEmojisWithHttpInfoAsync (string apiToken, AddEmojisData addEmojisData = default(AddEmojisData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->AddEmojis");

            var localVarPath = "/v3/emojis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addEmojisData != null && addEmojisData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addEmojisData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addEmojisData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEmojis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddEmojisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddEmojisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddEmojisResponse)));
        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <returns>AddExtraDataToMessageResponse</returns>
        public AddExtraDataToMessageResponse AddExtraDataToMessage (string apiToken, string channelType, string channelUrl, string messageId, AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData))
        {
             ApiResponse<AddExtraDataToMessageResponse> localVarResponse = AddExtraDataToMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, addExtraDataToMessageData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <returns>ApiResponse of AddExtraDataToMessageResponse</returns>
        public ApiResponse<AddExtraDataToMessageResponse> AddExtraDataToMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->AddExtraDataToMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->AddExtraDataToMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->AddExtraDataToMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->AddExtraDataToMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addExtraDataToMessageData != null && addExtraDataToMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addExtraDataToMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addExtraDataToMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExtraDataToMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddExtraDataToMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddExtraDataToMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddExtraDataToMessageResponse)));
        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddExtraDataToMessageResponse</returns>
        public async System.Threading.Tasks.Task<AddExtraDataToMessageResponse> AddExtraDataToMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData), CancellationToken cancellationToken = default)
        {
             ApiResponse<AddExtraDataToMessageResponse> localVarResponse = await AddExtraDataToMessageWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, addExtraDataToMessageData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add extra data to a message ## Add extra data to a message  Adds one or more key-values items which store additional information for a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-extra-data-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addExtraDataToMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddExtraDataToMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddExtraDataToMessageResponse>> AddExtraDataToMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, AddExtraDataToMessageData addExtraDataToMessageData = default(AddExtraDataToMessageData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->AddExtraDataToMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->AddExtraDataToMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->AddExtraDataToMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->AddExtraDataToMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addExtraDataToMessageData != null && addExtraDataToMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addExtraDataToMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addExtraDataToMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddExtraDataToMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddExtraDataToMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddExtraDataToMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddExtraDataToMessageResponse)));
        }

        /// <summary>
        /// Add a reaction to a message ## Add a reaction to a message  Adds a specific reaction to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <returns>AddReactionToAMessageResponse</returns>
        public AddReactionToAMessageResponse AddReactionToAMessage (string apiToken, string channelType, string channelUrl, string messageId, AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData))
        {
             ApiResponse<AddReactionToAMessageResponse> localVarResponse = AddReactionToAMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, addReactionToAMessageData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a reaction to a message ## Add a reaction to a message  Adds a specific reaction to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <returns>ApiResponse of AddReactionToAMessageResponse</returns>
        public ApiResponse<AddReactionToAMessageResponse> AddReactionToAMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->AddReactionToAMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->AddReactionToAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->AddReactionToAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->AddReactionToAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addReactionToAMessageData != null && addReactionToAMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addReactionToAMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addReactionToAMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReactionToAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddReactionToAMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddReactionToAMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddReactionToAMessageResponse)));
        }

        /// <summary>
        /// Add a reaction to a message ## Add a reaction to a message  Adds a specific reaction to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddReactionToAMessageResponse</returns>
        public async System.Threading.Tasks.Task<AddReactionToAMessageResponse> AddReactionToAMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData), CancellationToken cancellationToken = default)
        {
             ApiResponse<AddReactionToAMessageResponse> localVarResponse = await AddReactionToAMessageWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, addReactionToAMessageData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a reaction to a message ## Add a reaction to a message  Adds a specific reaction to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-add-a-reaction-to-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="addReactionToAMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddReactionToAMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddReactionToAMessageResponse>> AddReactionToAMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, AddReactionToAMessageData addReactionToAMessageData = default(AddReactionToAMessageData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->AddReactionToAMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->AddReactionToAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->AddReactionToAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->AddReactionToAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addReactionToAMessageData != null && addReactionToAMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addReactionToAMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addReactionToAMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReactionToAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddReactionToAMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddReactionToAMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddReactionToAMessageResponse)));
        }

        /// <summary>
        /// Delete an emoji ## Delete an emoji  Deletes an emoji from the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <returns></returns>
        public void DeleteEmojiByKey (string apiToken, string emojiKey)
        {
             DeleteEmojiByKeyWithHttpInfo(apiToken, emojiKey);
        }

        /// <summary>
        /// Delete an emoji ## Delete an emoji  Deletes an emoji from the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEmojiByKeyWithHttpInfo (string apiToken, string emojiKey)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->DeleteEmojiByKey");
            // verify the required parameter 'emojiKey' is set
            if (emojiKey == null)
                throw new ApiException(400, "Missing required parameter 'emojiKey' when calling MessageApi->DeleteEmojiByKey");

            var localVarPath = "/v3/emojis/{emoji_key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiKey != null) localVarPathParams.Add("emoji_key", this.Configuration.ApiClient.ParameterToString(emojiKey)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmojiByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an emoji ## Delete an emoji  Deletes an emoji from the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmojiByKeyAsync (string apiToken, string emojiKey, CancellationToken cancellationToken = default)
        {
             await DeleteEmojiByKeyWithHttpInfoAsync(apiToken, emojiKey, cancellationToken);

        }

        /// <summary>
        /// Delete an emoji ## Delete an emoji  Deletes an emoji from the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmojiByKeyWithHttpInfoAsync (string apiToken, string emojiKey, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->DeleteEmojiByKey");
            // verify the required parameter 'emojiKey' is set
            if (emojiKey == null)
                throw new ApiException(400, "Missing required parameter 'emojiKey' when calling MessageApi->DeleteEmojiByKey");

            var localVarPath = "/v3/emojis/{emoji_key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiKey != null) localVarPathParams.Add("emoji_key", this.Configuration.ApiClient.ParameterToString(emojiKey)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmojiByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an emoji category ## Delete an emoji category  Deletes an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <returns>Object</returns>
        public Object DeleteEmojiCategoryById (string apiToken, string emojiCategoryId)
        {
             ApiResponse<Object> localVarResponse = DeleteEmojiCategoryByIdWithHttpInfo(apiToken, emojiCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an emoji category ## Delete an emoji category  Deletes an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteEmojiCategoryByIdWithHttpInfo (string apiToken, string emojiCategoryId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->DeleteEmojiCategoryById");
            // verify the required parameter 'emojiCategoryId' is set
            if (emojiCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'emojiCategoryId' when calling MessageApi->DeleteEmojiCategoryById");

            var localVarPath = "/v3/emoji_categories/{emoji_category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiCategoryId != null) localVarPathParams.Add("emoji_category_id", this.Configuration.ApiClient.ParameterToString(emojiCategoryId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmojiCategoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete an emoji category ## Delete an emoji category  Deletes an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteEmojiCategoryByIdAsync (string apiToken, string emojiCategoryId, CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await DeleteEmojiCategoryByIdWithHttpInfoAsync(apiToken, emojiCategoryId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an emoji category ## Delete an emoji category  Deletes an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-delete-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmojiCategoryByIdWithHttpInfoAsync (string apiToken, string emojiCategoryId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->DeleteEmojiCategoryById");
            // verify the required parameter 'emojiCategoryId' is set
            if (emojiCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'emojiCategoryId' when calling MessageApi->DeleteEmojiCategoryById");

            var localVarPath = "/v3/emoji_categories/{emoji_category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiCategoryId != null) localVarPathParams.Add("emoji_category_id", this.Configuration.ApiClient.ParameterToString(emojiCategoryId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmojiCategoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <returns>Object</returns>
        public Object DeleteMessageById (string apiToken, string channelType, string channelUrl, string messageId)
        {
             ApiResponse<Object> localVarResponse = DeleteMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->DeleteMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->DeleteMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->DeleteMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->DeleteMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await DeleteMessageByIdWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a message ## Delete a message  Deletes a message from a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-delete-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->DeleteMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->DeleteMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->DeleteMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->DeleteMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Enable reactions ## Enable reactions  Turn on or off reactions in a Sendbird application.  > __Note__: This action also allows reactions in UIKit.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-enable-reactions
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="enableReactionsData"> (optional)</param>
        /// <returns>EnableReactionsResponse</returns>
        public EnableReactionsResponse EnableReactions (string apiToken, EnableReactionsData enableReactionsData = default(EnableReactionsData))
        {
             ApiResponse<EnableReactionsResponse> localVarResponse = EnableReactionsWithHttpInfo(apiToken, enableReactionsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable reactions ## Enable reactions  Turn on or off reactions in a Sendbird application.  > __Note__: This action also allows reactions in UIKit.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-enable-reactions
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="enableReactionsData"> (optional)</param>
        /// <returns>ApiResponse of EnableReactionsResponse</returns>
        public ApiResponse<EnableReactionsResponse> EnableReactionsWithHttpInfo (string apiToken, EnableReactionsData enableReactionsData = default(EnableReactionsData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->EnableReactions");

            var localVarPath = "/v3/applications/settings/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (enableReactionsData != null && enableReactionsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enableReactionsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enableReactionsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableReactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnableReactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EnableReactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnableReactionsResponse)));
        }

        /// <summary>
        /// Enable reactions ## Enable reactions  Turn on or off reactions in a Sendbird application.  > __Note__: This action also allows reactions in UIKit.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-enable-reactions
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="enableReactionsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of EnableReactionsResponse</returns>
        public async System.Threading.Tasks.Task<EnableReactionsResponse> EnableReactionsAsync (string apiToken, EnableReactionsData enableReactionsData = default(EnableReactionsData), CancellationToken cancellationToken = default)
        {
             ApiResponse<EnableReactionsResponse> localVarResponse = await EnableReactionsWithHttpInfoAsync(apiToken, enableReactionsData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable reactions ## Enable reactions  Turn on or off reactions in a Sendbird application.  > __Note__: This action also allows reactions in UIKit.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-enable-reactions
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="enableReactionsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (EnableReactionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnableReactionsResponse>> EnableReactionsWithHttpInfoAsync (string apiToken, EnableReactionsData enableReactionsData = default(EnableReactionsData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->EnableReactions");

            var localVarPath = "/v3/applications/settings/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (enableReactionsData != null && enableReactionsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(enableReactionsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enableReactionsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableReactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnableReactionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (EnableReactionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnableReactionsResponse)));
        }

        /// <summary>
        /// Mark all messages as delivered ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <returns>GcMarkAllMessagesAsDeliveredResponse</returns>
        public GcMarkAllMessagesAsDeliveredResponse GcMarkAllMessagesAsDelivered (string apiToken, string channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData))
        {
             ApiResponse<GcMarkAllMessagesAsDeliveredResponse> localVarResponse = GcMarkAllMessagesAsDeliveredWithHttpInfo(apiToken, channelUrl, gcMarkAllMessagesAsDeliveredData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark all messages as delivered ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <returns>ApiResponse of GcMarkAllMessagesAsDeliveredResponse</returns>
        public ApiResponse<GcMarkAllMessagesAsDeliveredResponse> GcMarkAllMessagesAsDeliveredWithHttpInfo (string apiToken, string channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->GcMarkAllMessagesAsDelivered");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->GcMarkAllMessagesAsDelivered");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_delivered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcMarkAllMessagesAsDeliveredData != null && gcMarkAllMessagesAsDeliveredData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcMarkAllMessagesAsDeliveredData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcMarkAllMessagesAsDeliveredData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcMarkAllMessagesAsDelivered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GcMarkAllMessagesAsDeliveredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GcMarkAllMessagesAsDeliveredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GcMarkAllMessagesAsDeliveredResponse)));
        }

        /// <summary>
        /// Mark all messages as delivered ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GcMarkAllMessagesAsDeliveredResponse</returns>
        public async System.Threading.Tasks.Task<GcMarkAllMessagesAsDeliveredResponse> GcMarkAllMessagesAsDeliveredAsync (string apiToken, string channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData), CancellationToken cancellationToken = default)
        {
             ApiResponse<GcMarkAllMessagesAsDeliveredResponse> localVarResponse = await GcMarkAllMessagesAsDeliveredWithHttpInfoAsync(apiToken, channelUrl, gcMarkAllMessagesAsDeliveredData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark all messages as delivered ## Mark all messages as delivered  Marks all messages in a group channel as delivered for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-delivered - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsDeliveredData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GcMarkAllMessagesAsDeliveredResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GcMarkAllMessagesAsDeliveredResponse>> GcMarkAllMessagesAsDeliveredWithHttpInfoAsync (string apiToken, string channelUrl, GcMarkAllMessagesAsDeliveredData gcMarkAllMessagesAsDeliveredData = default(GcMarkAllMessagesAsDeliveredData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->GcMarkAllMessagesAsDelivered");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->GcMarkAllMessagesAsDelivered");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_delivered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcMarkAllMessagesAsDeliveredData != null && gcMarkAllMessagesAsDeliveredData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcMarkAllMessagesAsDeliveredData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcMarkAllMessagesAsDeliveredData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcMarkAllMessagesAsDelivered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GcMarkAllMessagesAsDeliveredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GcMarkAllMessagesAsDeliveredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GcMarkAllMessagesAsDeliveredResponse)));
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <returns>Object</returns>
        public Object GcMarkAllMessagesAsRead (string apiToken, string channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData))
        {
             ApiResponse<Object> localVarResponse = GcMarkAllMessagesAsReadWithHttpInfo(apiToken, channelUrl, gcMarkAllMessagesAsReadData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> GcMarkAllMessagesAsReadWithHttpInfo (string apiToken, string channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->GcMarkAllMessagesAsRead");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->GcMarkAllMessagesAsRead");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcMarkAllMessagesAsReadData != null && gcMarkAllMessagesAsReadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcMarkAllMessagesAsReadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcMarkAllMessagesAsReadData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcMarkAllMessagesAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GcMarkAllMessagesAsReadAsync (string apiToken, string channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData), CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await GcMarkAllMessagesAsReadWithHttpInfoAsync(apiToken, channelUrl, gcMarkAllMessagesAsReadData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all messages in a group channel as read for a given user. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="gcMarkAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GcMarkAllMessagesAsReadWithHttpInfoAsync (string apiToken, string channelUrl, GcMarkAllMessagesAsReadData gcMarkAllMessagesAsReadData = default(GcMarkAllMessagesAsReadData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->GcMarkAllMessagesAsRead");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->GcMarkAllMessagesAsRead");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/mark_as_read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (gcMarkAllMessagesAsReadData != null && gcMarkAllMessagesAsReadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gcMarkAllMessagesAsReadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gcMarkAllMessagesAsReadData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcMarkAllMessagesAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// View number of each member's unread messages ## View number of each member's unread messages  Retrieves the total number of each member's unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="userIds"> (optional)</param>
        /// <returns>GcViewNumberOfEachMembersUnreadMessagesResponse</returns>
        public GcViewNumberOfEachMembersUnreadMessagesResponse GcViewNumberOfEachMembersUnreadMessages (string apiToken, string channelUrl, string userIds = default)
        {
             ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse> localVarResponse = GcViewNumberOfEachMembersUnreadMessagesWithHttpInfo(apiToken, channelUrl, userIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of each member's unread messages ## View number of each member's unread messages  Retrieves the total number of each member's unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="userIds"> (optional)</param>
        /// <returns>ApiResponse of GcViewNumberOfEachMembersUnreadMessagesResponse</returns>
        public ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse> GcViewNumberOfEachMembersUnreadMessagesWithHttpInfo (string apiToken, string channelUrl, string userIds = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->GcViewNumberOfEachMembersUnreadMessages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->GcViewNumberOfEachMembersUnreadMessages");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/unread_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_ids", userIds)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcViewNumberOfEachMembersUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GcViewNumberOfEachMembersUnreadMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GcViewNumberOfEachMembersUnreadMessagesResponse)));
        }

        /// <summary>
        /// View number of each member's unread messages ## View number of each member's unread messages  Retrieves the total number of each member's unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of GcViewNumberOfEachMembersUnreadMessagesResponse</returns>
        public async System.Threading.Tasks.Task<GcViewNumberOfEachMembersUnreadMessagesResponse> GcViewNumberOfEachMembersUnreadMessagesAsync (string apiToken, string channelUrl, string userIds = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse> localVarResponse = await GcViewNumberOfEachMembersUnreadMessagesWithHttpInfoAsync(apiToken, channelUrl, userIds, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of each member's unread messages ## View number of each member's unread messages  Retrieves the total number of each member's unread messages in a group channel. This action is only applicable for users in a group channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-number-of-each-member-s-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelUrl"></param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (GcViewNumberOfEachMembersUnreadMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse>> GcViewNumberOfEachMembersUnreadMessagesWithHttpInfoAsync (string apiToken, string channelUrl, string userIds = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->GcViewNumberOfEachMembersUnreadMessages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->GcViewNumberOfEachMembersUnreadMessages");

            var localVarPath = "/v3/group_channels/{channel_url}/messages/unread_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_ids", userIds)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GcViewNumberOfEachMembersUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GcViewNumberOfEachMembersUnreadMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GcViewNumberOfEachMembersUnreadMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GcViewNumberOfEachMembersUnreadMessagesResponse)));
        }

        /// <summary>
        /// Get an emoji ## Get an emoji  Retrieves an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <returns>SendBirdEmoji</returns>
        public SendBirdEmoji GetEmojiByKey (string apiToken, string emojiKey)
        {
             ApiResponse<SendBirdEmoji> localVarResponse = GetEmojiByKeyWithHttpInfo(apiToken, emojiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an emoji ## Get an emoji  Retrieves an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <returns>ApiResponse of SendBirdEmoji</returns>
        public ApiResponse<SendBirdEmoji> GetEmojiByKeyWithHttpInfo (string apiToken, string emojiKey)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->GetEmojiByKey");
            // verify the required parameter 'emojiKey' is set
            if (emojiKey == null)
                throw new ApiException(400, "Missing required parameter 'emojiKey' when calling MessageApi->GetEmojiByKey");

            var localVarPath = "/v3/emojis/{emoji_key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiKey != null) localVarPathParams.Add("emoji_key", this.Configuration.ApiClient.ParameterToString(emojiKey)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmojiByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdEmoji>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdEmoji) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdEmoji)));
        }

        /// <summary>
        /// Get an emoji ## Get an emoji  Retrieves an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdEmoji</returns>
        public async System.Threading.Tasks.Task<SendBirdEmoji> GetEmojiByKeyAsync (string apiToken, string emojiKey, CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdEmoji> localVarResponse = await GetEmojiByKeyWithHttpInfoAsync(apiToken, emojiKey, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an emoji ## Get an emoji  Retrieves an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdEmoji)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdEmoji>> GetEmojiByKeyWithHttpInfoAsync (string apiToken, string emojiKey, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->GetEmojiByKey");
            // verify the required parameter 'emojiKey' is set
            if (emojiKey == null)
                throw new ApiException(400, "Missing required parameter 'emojiKey' when calling MessageApi->GetEmojiByKey");

            var localVarPath = "/v3/emojis/{emoji_key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiKey != null) localVarPathParams.Add("emoji_key", this.Configuration.ApiClient.ParameterToString(emojiKey)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmojiByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdEmoji>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdEmoji) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdEmoji)));
        }

        /// <summary>
        /// Get an emoji category ## Get an emoji category  Retrieves an emoji category with the specified ID, including its emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `emoji_category_id`      Type: int      Description: Specifies the unique ID of the emoji category to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <returns>SendBirdEmojiCategory</returns>
        public SendBirdEmojiCategory GetEmojiCategoryById (string apiToken, string emojiCategoryId)
        {
             ApiResponse<SendBirdEmojiCategory> localVarResponse = GetEmojiCategoryByIdWithHttpInfo(apiToken, emojiCategoryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an emoji category ## Get an emoji category  Retrieves an emoji category with the specified ID, including its emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `emoji_category_id`      Type: int      Description: Specifies the unique ID of the emoji category to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <returns>ApiResponse of SendBirdEmojiCategory</returns>
        public ApiResponse<SendBirdEmojiCategory> GetEmojiCategoryByIdWithHttpInfo (string apiToken, string emojiCategoryId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->GetEmojiCategoryById");
            // verify the required parameter 'emojiCategoryId' is set
            if (emojiCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'emojiCategoryId' when calling MessageApi->GetEmojiCategoryById");

            var localVarPath = "/v3/emoji_categories/{emoji_category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiCategoryId != null) localVarPathParams.Add("emoji_category_id", this.Configuration.ApiClient.ParameterToString(emojiCategoryId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmojiCategoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdEmojiCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdEmojiCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdEmojiCategory)));
        }

        /// <summary>
        /// Get an emoji category ## Get an emoji category  Retrieves an emoji category with the specified ID, including its emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `emoji_category_id`      Type: int      Description: Specifies the unique ID of the emoji category to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdEmojiCategory</returns>
        public async System.Threading.Tasks.Task<SendBirdEmojiCategory> GetEmojiCategoryByIdAsync (string apiToken, string emojiCategoryId, CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdEmojiCategory> localVarResponse = await GetEmojiCategoryByIdWithHttpInfoAsync(apiToken, emojiCategoryId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an emoji category ## Get an emoji category  Retrieves an emoji category with the specified ID, including its emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-get-an-emoji-category - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `emoji_category_id`      Type: int      Description: Specifies the unique ID of the emoji category to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdEmojiCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdEmojiCategory>> GetEmojiCategoryByIdWithHttpInfoAsync (string apiToken, string emojiCategoryId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->GetEmojiCategoryById");
            // verify the required parameter 'emojiCategoryId' is set
            if (emojiCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'emojiCategoryId' when calling MessageApi->GetEmojiCategoryById");

            var localVarPath = "/v3/emoji_categories/{emoji_category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiCategoryId != null) localVarPathParams.Add("emoji_category_id", this.Configuration.ApiClient.ParameterToString(emojiCategoryId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmojiCategoryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdEmojiCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdEmojiCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdEmojiCategory)));
        }

        /// <summary>
        /// List all emojis and emoji categories ## List all emojis and emoji categories  Retrieves a list of all emoji categories registered to the application, including their emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-all-emojis-and-emoji-categories
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ListAllEmojisAndEmojiCategoriesResponse</returns>
        public ListAllEmojisAndEmojiCategoriesResponse ListAllEmojisAndEmojiCategories (string apiToken)
        {
             ApiResponse<ListAllEmojisAndEmojiCategoriesResponse> localVarResponse = ListAllEmojisAndEmojiCategoriesWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all emojis and emoji categories ## List all emojis and emoji categories  Retrieves a list of all emoji categories registered to the application, including their emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-all-emojis-and-emoji-categories
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ListAllEmojisAndEmojiCategoriesResponse</returns>
        public ApiResponse<ListAllEmojisAndEmojiCategoriesResponse> ListAllEmojisAndEmojiCategoriesWithHttpInfo (string apiToken)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ListAllEmojisAndEmojiCategories");

            var localVarPath = "/v3/emoji_categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllEmojisAndEmojiCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAllEmojisAndEmojiCategoriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListAllEmojisAndEmojiCategoriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAllEmojisAndEmojiCategoriesResponse)));
        }

        /// <summary>
        /// List all emojis and emoji categories ## List all emojis and emoji categories  Retrieves a list of all emoji categories registered to the application, including their emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-all-emojis-and-emoji-categories
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListAllEmojisAndEmojiCategoriesResponse</returns>
        public async System.Threading.Tasks.Task<ListAllEmojisAndEmojiCategoriesResponse> ListAllEmojisAndEmojiCategoriesAsync (string apiToken, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListAllEmojisAndEmojiCategoriesResponse> localVarResponse = await ListAllEmojisAndEmojiCategoriesWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all emojis and emoji categories ## List all emojis and emoji categories  Retrieves a list of all emoji categories registered to the application, including their emojis.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-all-emojis-and-emoji-categories
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListAllEmojisAndEmojiCategoriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListAllEmojisAndEmojiCategoriesResponse>> ListAllEmojisAndEmojiCategoriesWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ListAllEmojisAndEmojiCategories");

            var localVarPath = "/v3/emoji_categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAllEmojisAndEmojiCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAllEmojisAndEmojiCategoriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListAllEmojisAndEmojiCategoriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAllEmojisAndEmojiCategoriesResponse)));
        }

        /// <summary>
        /// List announcements ## List announcements  Retrieves a list of announcements.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcements - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="announcementGroup"> (optional)</param>
        /// <returns>ListAnnouncementsResponse</returns>
        public ListAnnouncementsResponse ListAnnouncements (string apiToken, string token = default, int? limit = default, string order = default, string status = default, string announcementGroup = default)
        {
             ApiResponse<ListAnnouncementsResponse> localVarResponse = ListAnnouncementsWithHttpInfo(apiToken, token, limit, order, status, announcementGroup);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List announcements ## List announcements  Retrieves a list of announcements.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcements - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="announcementGroup"> (optional)</param>
        /// <returns>ApiResponse of ListAnnouncementsResponse</returns>
        public ApiResponse<ListAnnouncementsResponse> ListAnnouncementsWithHttpInfo (string apiToken, string token = default, int? limit = default, string order = default, string status = default, string announcementGroup = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ListAnnouncements");

            var localVarPath = "/v3/announcements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (announcementGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "announcement_group", announcementGroup)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAnnouncements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAnnouncementsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListAnnouncementsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAnnouncementsResponse)));
        }

        /// <summary>
        /// List announcements ## List announcements  Retrieves a list of announcements.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcements - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="announcementGroup"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListAnnouncementsResponse</returns>
        public async System.Threading.Tasks.Task<ListAnnouncementsResponse> ListAnnouncementsAsync (string apiToken, string token = default, int? limit = default, string order = default, string status = default, string announcementGroup = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListAnnouncementsResponse> localVarResponse = await ListAnnouncementsWithHttpInfoAsync(apiToken, token, limit, order, status, announcementGroup, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List announcements ## List announcements  Retrieves a list of announcements.  https://sendbird.com/docs/chat/v3/platform-api/guides/announcements#2-list-announcements - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="announcementGroup"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListAnnouncementsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListAnnouncementsResponse>> ListAnnouncementsWithHttpInfoAsync (string apiToken, string token = default, int? limit = default, string order = default, string status = default, string announcementGroup = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ListAnnouncements");

            var localVarPath = "/v3/announcements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (announcementGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "announcement_group", announcementGroup)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAnnouncements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAnnouncementsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListAnnouncementsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAnnouncementsResponse)));
        }

        /// <summary>
        /// List emojis ## List emojis  Retrieves a list of all emojis registered to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ListEmojisResponse</returns>
        public ListEmojisResponse ListEmojis (string apiToken)
        {
             ApiResponse<ListEmojisResponse> localVarResponse = ListEmojisWithHttpInfo(apiToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List emojis ## List emojis  Retrieves a list of all emojis registered to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <returns>ApiResponse of ListEmojisResponse</returns>
        public ApiResponse<ListEmojisResponse> ListEmojisWithHttpInfo (string apiToken)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ListEmojis");

            var localVarPath = "/v3/emojis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmojis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListEmojisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListEmojisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListEmojisResponse)));
        }

        /// <summary>
        /// List emojis ## List emojis  Retrieves a list of all emojis registered to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListEmojisResponse</returns>
        public async System.Threading.Tasks.Task<ListEmojisResponse> ListEmojisAsync (string apiToken, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListEmojisResponse> localVarResponse = await ListEmojisWithHttpInfoAsync(apiToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List emojis ## List emojis  Retrieves a list of all emojis registered to the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-list-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListEmojisResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListEmojisResponse>> ListEmojisWithHttpInfoAsync (string apiToken, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ListEmojis");

            var localVarPath = "/v3/emojis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListEmojis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListEmojisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListEmojisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListEmojisResponse)));
        }

        /// <summary>
        /// List messages ## List messages  Retrieves a list of past messages of a channel.  > This message retrieval is one of Sendbird's [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"> (optional)</param>
        /// <param name="messageId"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>ListMessagesResponse</returns>
        public ListMessagesResponse ListMessages (string apiToken, string channelType, string channelUrl, string messageTs = default, int? messageId = default, int? prevLimit = default, int? nextLimit = default, bool? include = default, bool? reverse = default, string senderId = default, string senderIds = default, string operatorFilter = default, string customTypes = default, string messageType = default, bool? includingRemoved = default, bool? includeReactions = default, bool? withSortedMetaArray = default, bool? showSubchannelMessagesOnly = default, string userId = default, string customType = default, bool? withMetaArray = default)
        {
             ApiResponse<ListMessagesResponse> localVarResponse = ListMessagesWithHttpInfo(apiToken, channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List messages ## List messages  Retrieves a list of past messages of a channel.  > This message retrieval is one of Sendbird's [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"> (optional)</param>
        /// <param name="messageId"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>ApiResponse of ListMessagesResponse</returns>
        public ApiResponse<ListMessagesResponse> ListMessagesWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageTs = default, int? messageId = default, int? prevLimit = default, int? nextLimit = default, bool? include = default, bool? reverse = default, string senderId = default, string senderIds = default, string operatorFilter = default, string customTypes = default, string messageType = default, bool? includingRemoved = default, bool? includeReactions = default, bool? withSortedMetaArray = default, bool? showSubchannelMessagesOnly = default, string userId = default, string customType = default, bool? withMetaArray = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ListMessages");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->ListMessages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->ListMessages");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_ts", messageTs)); // query parameter
            if (messageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_id", messageId)); // query parameter
            if (prevLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prev_limit", prevLimit)); // query parameter
            if (nextLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next_limit", nextLimit)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (reverse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse", reverse)); // query parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter
            if (senderIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_ids", senderIds)); // query parameter
            if (operatorFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_filter", operatorFilter)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_type", messageType)); // query parameter
            if (includingRemoved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "including_removed", includingRemoved)); // query parameter
            if (includeReactions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_reactions", includeReactions)); // query parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (showSubchannelMessagesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_subchannel_messages_only", showSubchannelMessagesOnly)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (withMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_meta_array", withMetaArray)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMessagesResponse)));
        }

        /// <summary>
        /// List messages ## List messages  Retrieves a list of past messages of a channel.  > This message retrieval is one of Sendbird's [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"> (optional)</param>
        /// <param name="messageId"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMessagesResponse</returns>
        public async System.Threading.Tasks.Task<ListMessagesResponse> ListMessagesAsync (string apiToken, string channelType, string channelUrl, string messageTs = default, int? messageId = default, int? prevLimit = default, int? nextLimit = default, bool? include = default, bool? reverse = default, string senderId = default, string senderIds = default, string operatorFilter = default, string customTypes = default, string messageType = default, bool? includingRemoved = default, bool? includeReactions = default, bool? withSortedMetaArray = default, bool? showSubchannelMessagesOnly = default, string userId = default, string customType = default, bool? withMetaArray = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListMessagesResponse> localVarResponse = await ListMessagesWithHttpInfoAsync(apiToken, channelType, channelUrl, messageTs, messageId, prevLimit, nextLimit, include, reverse, senderId, senderIds, operatorFilter, customTypes, messageType, includingRemoved, includeReactions, withSortedMetaArray, showSubchannelMessagesOnly, userId, customType, withMetaArray, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List messages ## List messages  Retrieves a list of past messages of a channel.  > This message retrieval is one of Sendbird's [premium features](https://sendbird.com/docs/chat/v3/platform-api/guides/application#-3-sendbird-s-premium-features). Contact our [sales team](https://get.sendbird.com/talk-to-sales.html) for further assistance.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the channel to retrieve a list of past messages.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageTs"> (optional)</param>
        /// <param name="messageId"> (optional)</param>
        /// <param name="prevLimit"> (optional)</param>
        /// <param name="nextLimit"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="reverse"> (optional)</param>
        /// <param name="senderId"> (optional)</param>
        /// <param name="senderIds"> (optional)</param>
        /// <param name="operatorFilter"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="messageType"> (optional)</param>
        /// <param name="includingRemoved"> (optional)</param>
        /// <param name="includeReactions"> (optional)</param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="showSubchannelMessagesOnly"> (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListMessagesResponse>> ListMessagesWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageTs = default, int? messageId = default, int? prevLimit = default, int? nextLimit = default, bool? include = default, bool? reverse = default, string senderId = default, string senderIds = default, string operatorFilter = default, string customTypes = default, string messageType = default, bool? includingRemoved = default, bool? includeReactions = default, bool? withSortedMetaArray = default, bool? showSubchannelMessagesOnly = default, string userId = default, string customType = default, bool? withMetaArray = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ListMessages");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->ListMessages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->ListMessages");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageTs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_ts", messageTs)); // query parameter
            if (messageId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_id", messageId)); // query parameter
            if (prevLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prev_limit", prevLimit)); // query parameter
            if (nextLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "next_limit", nextLimit)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include", include)); // query parameter
            if (reverse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reverse", reverse)); // query parameter
            if (senderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_id", senderId)); // query parameter
            if (senderIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sender_ids", senderIds)); // query parameter
            if (operatorFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operator_filter", operatorFilter)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message_type", messageType)); // query parameter
            if (includingRemoved != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "including_removed", includingRemoved)); // query parameter
            if (includeReactions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_reactions", includeReactions)); // query parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (showSubchannelMessagesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_subchannel_messages_only", showSubchannelMessagesOnly)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (withMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_meta_array", withMetaArray)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMessagesResponse)));
        }

        /// <summary>
        /// List reactions of a message ## List reactions of a message  Retrieves a list of reactions made to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="listUsers"> (optional)</param>
        /// <returns>ListReactionsOfMessageResponse</returns>
        public ListReactionsOfMessageResponse ListReactionsOfMessage (string apiToken, string channelType, string channelUrl, string messageId, bool? listUsers = default)
        {
             ApiResponse<ListReactionsOfMessageResponse> localVarResponse = ListReactionsOfMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, listUsers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List reactions of a message ## List reactions of a message  Retrieves a list of reactions made to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="listUsers"> (optional)</param>
        /// <returns>ApiResponse of ListReactionsOfMessageResponse</returns>
        public ApiResponse<ListReactionsOfMessageResponse> ListReactionsOfMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, bool? listUsers = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ListReactionsOfMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->ListReactionsOfMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->ListReactionsOfMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->ListReactionsOfMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (listUsers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "list_users", listUsers)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReactionsOfMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReactionsOfMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListReactionsOfMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReactionsOfMessageResponse)));
        }

        /// <summary>
        /// List reactions of a message ## List reactions of a message  Retrieves a list of reactions made to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="listUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListReactionsOfMessageResponse</returns>
        public async System.Threading.Tasks.Task<ListReactionsOfMessageResponse> ListReactionsOfMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, bool? listUsers = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListReactionsOfMessageResponse> localVarResponse = await ListReactionsOfMessageWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, listUsers, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List reactions of a message ## List reactions of a message  Retrieves a list of reactions made to a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-list-reactions-of-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to add a reaction to.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="listUsers"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListReactionsOfMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListReactionsOfMessageResponse>> ListReactionsOfMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, bool? listUsers = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ListReactionsOfMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->ListReactionsOfMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->ListReactionsOfMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->ListReactionsOfMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (listUsers != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "list_users", listUsers)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReactionsOfMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListReactionsOfMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListReactionsOfMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListReactionsOfMessageResponse)));
        }

        /// <summary>
        /// Migrate messages ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).  There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user). 2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically. 3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.  https://sendbird.com/docs/chat/v3/platform-api/guides/migration#2-migrate-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="targetChannelUrl"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void MigrateMessagesByUrl (string apiToken, string targetChannelUrl, Object body = default)
        {
             MigrateMessagesByUrlWithHttpInfo(apiToken, targetChannelUrl, body);
        }

        /// <summary>
        /// Migrate messages ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).  There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user). 2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically. 3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.  https://sendbird.com/docs/chat/v3/platform-api/guides/migration#2-migrate-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="targetChannelUrl"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MigrateMessagesByUrlWithHttpInfo (string apiToken, string targetChannelUrl, Object body = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->MigrateMessagesByUrl");
            // verify the required parameter 'targetChannelUrl' is set
            if (targetChannelUrl == null)
                throw new ApiException(400, "Missing required parameter 'targetChannelUrl' when calling MessageApi->MigrateMessagesByUrl");

            var localVarPath = "/v3/migration/{target_channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (targetChannelUrl != null) localVarPathParams.Add("target_channel_url", this.Configuration.ApiClient.ParameterToString(targetChannelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MigrateMessagesByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Migrate messages ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).  There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user). 2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically. 3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.  https://sendbird.com/docs/chat/v3/platform-api/guides/migration#2-migrate-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="targetChannelUrl"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MigrateMessagesByUrlAsync (string apiToken, string targetChannelUrl, Object body = default, CancellationToken cancellationToken = default)
        {
             await MigrateMessagesByUrlWithHttpInfoAsync(apiToken, targetChannelUrl, body, cancellationToken);

        }

        /// <summary>
        /// Migrate messages ## Migrate messages  Using our migration API, you can migrate the messages from another system into a Sendbird system's [channel](https://sendbird.com/docs/chat/v3/platform-api/guides/channel-types) which consists of users, messages, and other chat-related data.  > To turn on this feature, [contact our support team](https://dashboard.sendbird.com/settings/contact_us).  There are three things to do in advance before the migration. Follow the instructions below:  1. Register the users of your current chat solution to your Sendbird application. You can migrate the users into the Sendbird system using the [user creation API](https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user). 2. Create either an [open](https://sendbird.com/docs/chat/v3/platform-api/guides/open-channel#2-create-a-channel) or a [group](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#2-create-a-channel) channel to migrate the messages of your chat solution. The Sendbird system doesn't create a channel for your migration automatically. 3. The maximum number of migrated messages per call is 100. To avoid the failure during your migration, you must adjust the number of messages to process at once via the API.  https://sendbird.com/docs/chat/v3/platform-api/guides/migration#2-migrate-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="targetChannelUrl"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MigrateMessagesByUrlWithHttpInfoAsync (string apiToken, string targetChannelUrl, Object body = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->MigrateMessagesByUrl");
            // verify the required parameter 'targetChannelUrl' is set
            if (targetChannelUrl == null)
                throw new ApiException(400, "Missing required parameter 'targetChannelUrl' when calling MessageApi->MigrateMessagesByUrl");

            var localVarPath = "/v3/migration/{target_channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (targetChannelUrl != null) localVarPathParams.Add("target_channel_url", this.Configuration.ApiClient.ParameterToString(targetChannelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MigrateMessagesByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="keys"> (optional)</param>
        /// <returns>Object</returns>
        public Object RemoveExtraDataFromMessage (string apiToken, string channelType, string channelUrl, string messageId, List<string> keys = default)
        {
             ApiResponse<Object> localVarResponse = RemoveExtraDataFromMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, keys);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="keys"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> RemoveExtraDataFromMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, List<string> keys = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->RemoveExtraDataFromMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->RemoveExtraDataFromMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->RemoveExtraDataFromMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->RemoveExtraDataFromMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "keys", keys)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveExtraDataFromMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveExtraDataFromMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, List<string> keys = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await RemoveExtraDataFromMessageWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, keys, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove extra data from a message ## Remove extra data from a message  Removes specific items from a message by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-extra-data-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="keys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveExtraDataFromMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, List<string> keys = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->RemoveExtraDataFromMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->RemoveExtraDataFromMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->RemoveExtraDataFromMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->RemoveExtraDataFromMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (keys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "keys", keys)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveExtraDataFromMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove a reaction from a message ## Remove a reaction from a message  Removes a specific reaction from a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <returns>RemoveReactionFromAMessageResponse</returns>
        public RemoveReactionFromAMessageResponse RemoveReactionFromAMessage (string apiToken, string channelType, string channelUrl, string messageId, string userId = default, string reaction = default)
        {
             ApiResponse<RemoveReactionFromAMessageResponse> localVarResponse = RemoveReactionFromAMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, userId, reaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a reaction from a message ## Remove a reaction from a message  Removes a specific reaction from a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <returns>ApiResponse of RemoveReactionFromAMessageResponse</returns>
        public ApiResponse<RemoveReactionFromAMessageResponse> RemoveReactionFromAMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, string userId = default, string reaction = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->RemoveReactionFromAMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->RemoveReactionFromAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->RemoveReactionFromAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->RemoveReactionFromAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (reaction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reaction", reaction)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveReactionFromAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveReactionFromAMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveReactionFromAMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveReactionFromAMessageResponse)));
        }

        /// <summary>
        /// Remove a reaction from a message ## Remove a reaction from a message  Removes a specific reaction from a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemoveReactionFromAMessageResponse</returns>
        public async System.Threading.Tasks.Task<RemoveReactionFromAMessageResponse> RemoveReactionFromAMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, string userId = default, string reaction = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<RemoveReactionFromAMessageResponse> localVarResponse = await RemoveReactionFromAMessageWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, userId, reaction, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a reaction from a message ## Remove a reaction from a message  Removes a specific reaction from a message.  > __Note__: Currently, this action is only available in group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-remove-a-reaction-from-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="userId"> (optional)</param>
        /// <param name="reaction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemoveReactionFromAMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveReactionFromAMessageResponse>> RemoveReactionFromAMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, string userId = default, string reaction = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->RemoveReactionFromAMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->RemoveReactionFromAMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->RemoveReactionFromAMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->RemoveReactionFromAMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/reactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_id", userId)); // query parameter
            if (reaction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reaction", reaction)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveReactionFromAMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveReactionFromAMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveReactionFromAMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveReactionFromAMessageResponse)));
        }

        /// <summary>
        /// Send a message ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  >__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        public SendBirdMessageResponse SendMessage (string apiToken, string channelType, string channelUrl, SendMessageData sendMessageData = default(SendMessageData))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = SendMessageWithHttpInfo(apiToken, channelType, channelUrl, sendMessageData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a message ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  >__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        public ApiResponse<SendBirdMessageResponse> SendMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, SendMessageData sendMessageData = default(SendMessageData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->SendMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->SendMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->SendMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (sendMessageData != null && sendMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Send a message ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  >__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendBirdMessageResponse> SendMessageAsync (string apiToken, string channelType, string channelUrl, SendMessageData sendMessageData = default(SendMessageData), CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = await SendMessageWithHttpInfoAsync(apiToken, channelType, channelUrl, sendMessageData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a message ## Send a message  Sends a message to a channel. You can send a text message, a file message, and an admin message.  >__Note__: With Sendbird Chat SDKs and the platform API, any type of files in messages can be uploaded to Sendbird server.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-send-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="sendMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> SendMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, SendMessageData sendMessageData = default(SendMessageData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->SendMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->SendMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->SendMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (sendMessageData != null && sendMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Translate a message into other languages ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  > __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="translateMessageIntoOtherLanguagesData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        public SendBirdMessageResponse TranslateMessageIntoOtherLanguages (string apiToken, string channelType, string channelUrl, string messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData = default(TranslateMessageIntoOtherLanguagesData))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = TranslateMessageIntoOtherLanguagesWithHttpInfo(apiToken, channelType, channelUrl, messageId, translateMessageIntoOtherLanguagesData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Translate a message into other languages ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  > __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="translateMessageIntoOtherLanguagesData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        public ApiResponse<SendBirdMessageResponse> TranslateMessageIntoOtherLanguagesWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData = default(TranslateMessageIntoOtherLanguagesData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->TranslateMessageIntoOtherLanguages");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->TranslateMessageIntoOtherLanguages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->TranslateMessageIntoOtherLanguages");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->TranslateMessageIntoOtherLanguages");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/translation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (translateMessageIntoOtherLanguagesData != null && translateMessageIntoOtherLanguagesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(translateMessageIntoOtherLanguagesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = translateMessageIntoOtherLanguagesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranslateMessageIntoOtherLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Translate a message into other languages ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  > __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="translateMessageIntoOtherLanguagesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendBirdMessageResponse> TranslateMessageIntoOtherLanguagesAsync (string apiToken, string channelType, string channelUrl, string messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData = default(TranslateMessageIntoOtherLanguagesData), CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = await TranslateMessageIntoOtherLanguagesWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, translateMessageIntoOtherLanguagesData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Translate a message into other languages ## Translate a message into other languages  Translates a message into specific languages. Only text messages of which type is MESG can be translated into other languages.  > __Note__: Message translation is powered by [Google Cloud Translation API recognition engine](https://cloud.google.com/translate/). Find language codes supported by the engine in the [Miscellaneous](https://sendbird.com/docs/chat/v3/platform-api/guides/Miscellaneous) page or visit the [Language Support](https://cloud.google.com/translate/docs/languages) for Google Cloud Translation.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-translate-a-message-into-other-languages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="translateMessageIntoOtherLanguagesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> TranslateMessageIntoOtherLanguagesWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, TranslateMessageIntoOtherLanguagesData translateMessageIntoOtherLanguagesData = default(TranslateMessageIntoOtherLanguagesData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->TranslateMessageIntoOtherLanguages");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->TranslateMessageIntoOtherLanguages");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->TranslateMessageIntoOtherLanguages");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->TranslateMessageIntoOtherLanguages");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/translation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (translateMessageIntoOtherLanguagesData != null && translateMessageIntoOtherLanguagesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(translateMessageIntoOtherLanguagesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = translateMessageIntoOtherLanguagesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TranslateMessageIntoOtherLanguages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Update an emoji category URL ## Update an emoji category URL  Updates the URL of an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-category-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="updateEmojiCategoryUrlByIdData"> (optional)</param>
        /// <returns>SendBirdEmojiCategory</returns>
        public SendBirdEmojiCategory UpdateEmojiCategoryUrlById (string apiToken, string emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData = default(UpdateEmojiCategoryUrlByIdData))
        {
             ApiResponse<SendBirdEmojiCategory> localVarResponse = UpdateEmojiCategoryUrlByIdWithHttpInfo(apiToken, emojiCategoryId, updateEmojiCategoryUrlByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an emoji category URL ## Update an emoji category URL  Updates the URL of an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-category-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="updateEmojiCategoryUrlByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdEmojiCategory</returns>
        public ApiResponse<SendBirdEmojiCategory> UpdateEmojiCategoryUrlByIdWithHttpInfo (string apiToken, string emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData = default(UpdateEmojiCategoryUrlByIdData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->UpdateEmojiCategoryUrlById");
            // verify the required parameter 'emojiCategoryId' is set
            if (emojiCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'emojiCategoryId' when calling MessageApi->UpdateEmojiCategoryUrlById");

            var localVarPath = "/v3/emoji_categories/{emoji_category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiCategoryId != null) localVarPathParams.Add("emoji_category_id", this.Configuration.ApiClient.ParameterToString(emojiCategoryId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateEmojiCategoryUrlByIdData != null && updateEmojiCategoryUrlByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateEmojiCategoryUrlByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateEmojiCategoryUrlByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmojiCategoryUrlById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdEmojiCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdEmojiCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdEmojiCategory)));
        }

        /// <summary>
        /// Update an emoji category URL ## Update an emoji category URL  Updates the URL of an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-category-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="updateEmojiCategoryUrlByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdEmojiCategory</returns>
        public async System.Threading.Tasks.Task<SendBirdEmojiCategory> UpdateEmojiCategoryUrlByIdAsync (string apiToken, string emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData = default(UpdateEmojiCategoryUrlByIdData), CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdEmojiCategory> localVarResponse = await UpdateEmojiCategoryUrlByIdWithHttpInfoAsync(apiToken, emojiCategoryId, updateEmojiCategoryUrlByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an emoji category URL ## Update an emoji category URL  Updates the URL of an emoji category with the specified ID.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-category-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiCategoryId"></param>
        /// <param name="updateEmojiCategoryUrlByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdEmojiCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdEmojiCategory>> UpdateEmojiCategoryUrlByIdWithHttpInfoAsync (string apiToken, string emojiCategoryId, UpdateEmojiCategoryUrlByIdData updateEmojiCategoryUrlByIdData = default(UpdateEmojiCategoryUrlByIdData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->UpdateEmojiCategoryUrlById");
            // verify the required parameter 'emojiCategoryId' is set
            if (emojiCategoryId == null)
                throw new ApiException(400, "Missing required parameter 'emojiCategoryId' when calling MessageApi->UpdateEmojiCategoryUrlById");

            var localVarPath = "/v3/emoji_categories/{emoji_category_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiCategoryId != null) localVarPathParams.Add("emoji_category_id", this.Configuration.ApiClient.ParameterToString(emojiCategoryId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateEmojiCategoryUrlByIdData != null && updateEmojiCategoryUrlByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateEmojiCategoryUrlByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateEmojiCategoryUrlByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmojiCategoryUrlById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdEmojiCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdEmojiCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdEmojiCategory)));
        }

        /// <summary>
        /// Update an emoji URL ## Update an emoji URL  Updates the image URL of an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="updateEmojiUrlByKeyData"> (optional)</param>
        /// <returns>SendBirdEmoji</returns>
        public SendBirdEmoji UpdateEmojiUrlByKey (string apiToken, string emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData = default(UpdateEmojiUrlByKeyData))
        {
             ApiResponse<SendBirdEmoji> localVarResponse = UpdateEmojiUrlByKeyWithHttpInfo(apiToken, emojiKey, updateEmojiUrlByKeyData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an emoji URL ## Update an emoji URL  Updates the image URL of an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="updateEmojiUrlByKeyData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdEmoji</returns>
        public ApiResponse<SendBirdEmoji> UpdateEmojiUrlByKeyWithHttpInfo (string apiToken, string emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData = default(UpdateEmojiUrlByKeyData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->UpdateEmojiUrlByKey");
            // verify the required parameter 'emojiKey' is set
            if (emojiKey == null)
                throw new ApiException(400, "Missing required parameter 'emojiKey' when calling MessageApi->UpdateEmojiUrlByKey");

            var localVarPath = "/v3/emojis/{emoji_key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiKey != null) localVarPathParams.Add("emoji_key", this.Configuration.ApiClient.ParameterToString(emojiKey)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateEmojiUrlByKeyData != null && updateEmojiUrlByKeyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateEmojiUrlByKeyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateEmojiUrlByKeyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmojiUrlByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdEmoji>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdEmoji) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdEmoji)));
        }

        /// <summary>
        /// Update an emoji URL ## Update an emoji URL  Updates the image URL of an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="updateEmojiUrlByKeyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdEmoji</returns>
        public async System.Threading.Tasks.Task<SendBirdEmoji> UpdateEmojiUrlByKeyAsync (string apiToken, string emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData = default(UpdateEmojiUrlByKeyData), CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdEmoji> localVarResponse = await UpdateEmojiUrlByKeyWithHttpInfoAsync(apiToken, emojiKey, updateEmojiUrlByKeyData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an emoji URL ## Update an emoji URL  Updates the image URL of an emoji with the specified key.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-update-an-emoji-url - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="emojiKey"></param>
        /// <param name="updateEmojiUrlByKeyData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdEmoji)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdEmoji>> UpdateEmojiUrlByKeyWithHttpInfoAsync (string apiToken, string emojiKey, UpdateEmojiUrlByKeyData updateEmojiUrlByKeyData = default(UpdateEmojiUrlByKeyData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->UpdateEmojiUrlByKey");
            // verify the required parameter 'emojiKey' is set
            if (emojiKey == null)
                throw new ApiException(400, "Missing required parameter 'emojiKey' when calling MessageApi->UpdateEmojiUrlByKey");

            var localVarPath = "/v3/emojis/{emoji_key}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (emojiKey != null) localVarPathParams.Add("emoji_key", this.Configuration.ApiClient.ParameterToString(emojiKey)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateEmojiUrlByKeyData != null && updateEmojiUrlByKeyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateEmojiUrlByKeyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateEmojiUrlByKeyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateEmojiUrlByKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdEmoji>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdEmoji) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdEmoji)));
        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <returns>UpdateExtraDataInMessageResponse</returns>
        public UpdateExtraDataInMessageResponse UpdateExtraDataInMessage (string apiToken, string channelType, string channelUrl, string messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData))
        {
             ApiResponse<UpdateExtraDataInMessageResponse> localVarResponse = UpdateExtraDataInMessageWithHttpInfo(apiToken, channelType, channelUrl, messageId, updateExtraDataInMessageData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <returns>ApiResponse of UpdateExtraDataInMessageResponse</returns>
        public ApiResponse<UpdateExtraDataInMessageResponse> UpdateExtraDataInMessageWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->UpdateExtraDataInMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->UpdateExtraDataInMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->UpdateExtraDataInMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->UpdateExtraDataInMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateExtraDataInMessageData != null && updateExtraDataInMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateExtraDataInMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateExtraDataInMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtraDataInMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateExtraDataInMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateExtraDataInMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateExtraDataInMessageResponse)));
        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateExtraDataInMessageResponse</returns>
        public async System.Threading.Tasks.Task<UpdateExtraDataInMessageResponse> UpdateExtraDataInMessageAsync (string apiToken, string channelType, string channelUrl, string messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData), CancellationToken cancellationToken = default)
        {
             ApiResponse<UpdateExtraDataInMessageResponse> localVarResponse = await UpdateExtraDataInMessageWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, updateExtraDataInMessageData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update extra data in a message ## Update extra data in a message  Updates the values of specific items by their keys.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-extra-data-in-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateExtraDataInMessageData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateExtraDataInMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateExtraDataInMessageResponse>> UpdateExtraDataInMessageWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, UpdateExtraDataInMessageData updateExtraDataInMessageData = default(UpdateExtraDataInMessageData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->UpdateExtraDataInMessage");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->UpdateExtraDataInMessage");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->UpdateExtraDataInMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->UpdateExtraDataInMessage");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}/sorted_metaarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateExtraDataInMessageData != null && updateExtraDataInMessageData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateExtraDataInMessageData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateExtraDataInMessageData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateExtraDataInMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateExtraDataInMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateExtraDataInMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateExtraDataInMessageResponse)));
        }

        /// <summary>
        /// Update a message ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        public SendBirdMessageResponse UpdateMessageById (string apiToken, string channelType, string channelUrl, string messageId, UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData))
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = UpdateMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId, updateMessageByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a message ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        public ApiResponse<SendBirdMessageResponse> UpdateMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->UpdateMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->UpdateMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->UpdateMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->UpdateMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateMessageByIdData != null && updateMessageByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMessageByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMessageByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Update a message ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendBirdMessageResponse> UpdateMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData), CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = await UpdateMessageByIdWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, updateMessageByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a message ## Update a message  Updates information on a message in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-update-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="updateMessageByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> UpdateMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, UpdateMessageByIdData updateMessageByIdData = default(UpdateMessageByIdData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->UpdateMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->UpdateMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->UpdateMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->UpdateMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateMessageByIdData != null && updateMessageByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateMessageByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateMessageByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// Use default emojis ## Use default emojis  Determines whether to use the 7 default emojis initially provided.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-use-default-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="useDefaultEmojisData"> (optional)</param>
        /// <returns>UseDefaultEmojisResponse</returns>
        public UseDefaultEmojisResponse UseDefaultEmojis (string apiToken, UseDefaultEmojisData useDefaultEmojisData = default(UseDefaultEmojisData))
        {
             ApiResponse<UseDefaultEmojisResponse> localVarResponse = UseDefaultEmojisWithHttpInfo(apiToken, useDefaultEmojisData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use default emojis ## Use default emojis  Determines whether to use the 7 default emojis initially provided.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-use-default-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="useDefaultEmojisData"> (optional)</param>
        /// <returns>ApiResponse of UseDefaultEmojisResponse</returns>
        public ApiResponse<UseDefaultEmojisResponse> UseDefaultEmojisWithHttpInfo (string apiToken, UseDefaultEmojisData useDefaultEmojisData = default(UseDefaultEmojisData))
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->UseDefaultEmojis");

            var localVarPath = "/v3/applications/settings/use_default_emoji";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (useDefaultEmojisData != null && useDefaultEmojisData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(useDefaultEmojisData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = useDefaultEmojisData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UseDefaultEmojis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UseDefaultEmojisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UseDefaultEmojisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UseDefaultEmojisResponse)));
        }

        /// <summary>
        /// Use default emojis ## Use default emojis  Determines whether to use the 7 default emojis initially provided.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-use-default-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="useDefaultEmojisData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UseDefaultEmojisResponse</returns>
        public async System.Threading.Tasks.Task<UseDefaultEmojisResponse> UseDefaultEmojisAsync (string apiToken, UseDefaultEmojisData useDefaultEmojisData = default(UseDefaultEmojisData), CancellationToken cancellationToken = default)
        {
             ApiResponse<UseDefaultEmojisResponse> localVarResponse = await UseDefaultEmojisWithHttpInfoAsync(apiToken, useDefaultEmojisData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use default emojis ## Use default emojis  Determines whether to use the 7 default emojis initially provided.  https://sendbird.com/docs/chat/v3/platform-api/guides/emojis#2-use-default-emojis
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="useDefaultEmojisData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UseDefaultEmojisResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UseDefaultEmojisResponse>> UseDefaultEmojisWithHttpInfoAsync (string apiToken, UseDefaultEmojisData useDefaultEmojisData = default(UseDefaultEmojisData), CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->UseDefaultEmojis");

            var localVarPath = "/v3/applications/settings/use_default_emoji";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (useDefaultEmojisData != null && useDefaultEmojisData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(useDefaultEmojisData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = useDefaultEmojisData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UseDefaultEmojis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UseDefaultEmojisResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UseDefaultEmojisResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UseDefaultEmojisResponse)));
        }

        /// <summary>
        /// View a message ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>SendBirdMessageResponse</returns>
        public SendBirdMessageResponse ViewMessageById (string apiToken, string channelType, string channelUrl, string messageId, bool? withSortedMetaArray = default, bool? withMetaArray = default)
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = ViewMessageByIdWithHttpInfo(apiToken, channelType, channelUrl, messageId, withSortedMetaArray, withMetaArray);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a message ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <returns>ApiResponse of SendBirdMessageResponse</returns>
        public ApiResponse<SendBirdMessageResponse> ViewMessageByIdWithHttpInfo (string apiToken, string channelType, string channelUrl, string messageId, bool? withSortedMetaArray = default, bool? withMetaArray = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ViewMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->ViewMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->ViewMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->ViewMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (withMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_meta_array", withMetaArray)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// View a message ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendBirdMessageResponse> ViewMessageByIdAsync (string apiToken, string channelType, string channelUrl, string messageId, bool? withSortedMetaArray = default, bool? withMetaArray = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdMessageResponse> localVarResponse = await ViewMessageByIdWithHttpInfoAsync(apiToken, channelType, channelUrl, messageId, withSortedMetaArray, withMetaArray, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a message ## View a message  Retrieves information on a message.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-a-message - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `channel_type`      Type: string      Description: Specifies the type of the channel. Either open_channels or group_channels.  `channel_url`      Type: string      Description: Specifies the URL of the target channel.  `message_id`      Type: long      Description: Specifies the unique ID of the message to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="messageId"></param>
        /// <param name="withSortedMetaArray"> (optional)</param>
        /// <param name="withMetaArray"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdMessageResponse>> ViewMessageByIdWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, string messageId, bool? withSortedMetaArray = default, bool? withMetaArray = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ViewMessageById");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->ViewMessageById");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->ViewMessageById");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling MessageApi->ViewMessageById");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (withSortedMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_sorted_meta_array", withSortedMetaArray)); // query parameter
            if (withMetaArray != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with_meta_array", withMetaArray)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewMessageById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdMessageResponse)));
        }

        /// <summary>
        /// View total number of messages in a channel ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ViewTotalNumberOfMessagesInChannelResponse</returns>
        public ViewTotalNumberOfMessagesInChannelResponse ViewTotalNumberOfMessagesInChannel (string apiToken, string channelType, string channelUrl)
        {
             ApiResponse<ViewTotalNumberOfMessagesInChannelResponse> localVarResponse = ViewTotalNumberOfMessagesInChannelWithHttpInfo(apiToken, channelType, channelUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View total number of messages in a channel ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ApiResponse of ViewTotalNumberOfMessagesInChannelResponse</returns>
        public ApiResponse<ViewTotalNumberOfMessagesInChannelResponse> ViewTotalNumberOfMessagesInChannelWithHttpInfo (string apiToken, string channelType, string channelUrl)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ViewTotalNumberOfMessagesInChannel");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->ViewTotalNumberOfMessagesInChannel");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->ViewTotalNumberOfMessagesInChannel");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/total_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewTotalNumberOfMessagesInChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewTotalNumberOfMessagesInChannelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewTotalNumberOfMessagesInChannelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewTotalNumberOfMessagesInChannelResponse)));
        }

        /// <summary>
        /// View total number of messages in a channel ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewTotalNumberOfMessagesInChannelResponse</returns>
        public async System.Threading.Tasks.Task<ViewTotalNumberOfMessagesInChannelResponse> ViewTotalNumberOfMessagesInChannelAsync (string apiToken, string channelType, string channelUrl, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewTotalNumberOfMessagesInChannelResponse> localVarResponse = await ViewTotalNumberOfMessagesInChannelWithHttpInfoAsync(apiToken, channelType, channelUrl, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View total number of messages in a channel ## View total number of messages in a channel  Retrieves the total number of messages in a channel.  https://sendbird.com/docs/chat/v3/platform-api/guides/messages#2-view-total-number-of-messages-in-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="channelType"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewTotalNumberOfMessagesInChannelResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewTotalNumberOfMessagesInChannelResponse>> ViewTotalNumberOfMessagesInChannelWithHttpInfoAsync (string apiToken, string channelType, string channelUrl, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling MessageApi->ViewTotalNumberOfMessagesInChannel");
            // verify the required parameter 'channelType' is set
            if (channelType == null)
                throw new ApiException(400, "Missing required parameter 'channelType' when calling MessageApi->ViewTotalNumberOfMessagesInChannel");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling MessageApi->ViewTotalNumberOfMessagesInChannel");

            var localVarPath = "/v3/{channel_type}/{channel_url}/messages/total_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (channelType != null) localVarPathParams.Add("channel_type", this.Configuration.ApiClient.ParameterToString(channelType)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewTotalNumberOfMessagesInChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewTotalNumberOfMessagesInChannelResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewTotalNumberOfMessagesInChannelResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewTotalNumberOfMessagesInChannelResponse)));
        }

    }
}
