/*
 * Sendbird Platform SDK
 *
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using sendbird_platform_sdk.Client;
using sendbird_platform_sdk.Model;

namespace sendbird_platform_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a registration or device token
        /// </summary>
        /// <remarks>
        /// ## Add a registration or device token  > __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user's FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  > __Note__: For more information on the registration token and device token, visit the Google's [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei's [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple's [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <returns>AddRegistrationOrDeviceTokenResponse</returns>
        AddRegistrationOrDeviceTokenResponse AddRegistrationOrDeviceToken (string apiToken, string userId, string tokenType, AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default);

        /// <summary>
        /// Add a registration or device token
        /// </summary>
        /// <remarks>
        /// ## Add a registration or device token  > __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user's FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  > __Note__: For more information on the registration token and device token, visit the Google's [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei's [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple's [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <returns>ApiResponse of AddRegistrationOrDeviceTokenResponse</returns>
        ApiResponse<AddRegistrationOrDeviceTokenResponse> AddRegistrationOrDeviceTokenWithHttpInfo (string apiToken, string userId, string tokenType, AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default);
        /// <summary>
        /// Choose a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Choose a push notification content template  Chooses a push notification content template of a user's own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ChoosePushNotificationContentTemplateResponse</returns>
        ChoosePushNotificationContentTemplateResponse ChoosePushNotificationContentTemplate (string apiToken, string userId, Object body = default);

        /// <summary>
        /// Choose a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Choose a push notification content template  Chooses a push notification content template of a user's own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ChoosePushNotificationContentTemplateResponse</returns>
        ApiResponse<ChoosePushNotificationContentTemplateResponse> ChoosePushNotificationContentTemplateWithHttpInfo (string apiToken, string userId, Object body = default);
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="createUserData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        SendBirdUser CreateUser (string apiToken, CreateUserData createUserData = default);

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="createUserData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        ApiResponse<SendBirdUser> CreateUserWithHttpInfo (string apiToken, CreateUserData createUserData = default);
        /// <summary>
        /// Create user token
        /// </summary>
        /// <remarks>
        /// ## Create user token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="createUserTokenData"> (optional)</param>
        /// <returns>CreateUserTokenResponse</returns>
        CreateUserTokenResponse CreateUserToken (string apiToken, string userId, CreateUserTokenData createUserTokenData = default);

        /// <summary>
        /// Create user token
        /// </summary>
        /// <remarks>
        /// ## Create user token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="createUserTokenData"> (optional)</param>
        /// <returns>ApiResponse of CreateUserTokenResponse</returns>
        ApiResponse<CreateUserTokenResponse> CreateUserTokenWithHttpInfo (string apiToken, string userId, CreateUserTokenData createUserTokenData = default);
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>Object</returns>
        Object DeleteUserById (string apiToken, string userId);

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteUserByIdWithHttpInfo (string apiToken, string userId);
        /// <summary>
        /// Leave my group channels
        /// </summary>
        /// <remarks>
        /// ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <returns>Object</returns>
        Object LeaveMyGroupChannels (string apiToken, string userId, LeaveMyGroupChannelsData leaveMyGroupChannelsData = default);

        /// <summary>
        /// Leave my group channels
        /// </summary>
        /// <remarks>
        /// ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LeaveMyGroupChannelsWithHttpInfo (string apiToken, string userId, LeaveMyGroupChannelsData leaveMyGroupChannelsData = default);
        /// <summary>
        /// List my group channels
        /// </summary>
        /// <remarks>
        /// ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <returns>ListMyGroupChannelsResponse</returns>
        ListMyGroupChannelsResponse ListMyGroupChannels (string apiToken, string userId, string token = default, int? limit = default, string distinctMode = default, string publicMode = default, string superMode = default, string hiddenMode = default, string memberStateFilter = default, string unreadFilter = default, int? createdAfter = default, int? createdBefore = default, bool? showEmpty = default, bool? showFrozen = default, bool? showMember = default, bool? showDeliveryReceipt = default, bool? showReadReceipt = default, string order = default, string metadataOrderKey = default, string customTypes = default, string customTypeStartswith = default, string channelUrls = default, string name = default, string nameContains = default, string nameStartswith = default, string membersExactlyIn = default, string membersIncludeIn = default, string queryType = default, string membersNickname = default, string membersNicknameContains = default, string searchQuery = default, string searchFields = default, string metadataKey = default, string metadataValues = default, string metadataValueStartswith = default, string metacounterKey = default, string metacounterValues = default, string metacounterValueGt = default, string metacounterValueGte = default, string metacounterValueLt = default, string metacounterValueLte = default, string customType = default);

        /// <summary>
        /// List my group channels
        /// </summary>
        /// <remarks>
        /// ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <returns>ApiResponse of ListMyGroupChannelsResponse</returns>
        ApiResponse<ListMyGroupChannelsResponse> ListMyGroupChannelsWithHttpInfo (string apiToken, string userId, string token = default, int? limit = default, string distinctMode = default, string publicMode = default, string superMode = default, string hiddenMode = default, string memberStateFilter = default, string unreadFilter = default, int? createdAfter = default, int? createdBefore = default, bool? showEmpty = default, bool? showFrozen = default, bool? showMember = default, bool? showDeliveryReceipt = default, bool? showReadReceipt = default, string order = default, string metadataOrderKey = default, string customTypes = default, string customTypeStartswith = default, string channelUrls = default, string name = default, string nameContains = default, string nameStartswith = default, string membersExactlyIn = default, string membersIncludeIn = default, string queryType = default, string membersNickname = default, string membersNicknameContains = default, string searchQuery = default, string searchFields = default, string metadataKey = default, string metadataValues = default, string metadataValueStartswith = default, string metacounterKey = default, string metacounterValues = default, string metacounterValueGt = default, string metacounterValueGte = default, string metacounterValueLt = default, string metacounterValueLte = default, string customType = default);
        /// <summary>
        /// List registration or device tokens
        /// </summary>
        /// <remarks>
        /// ## List registration or device tokens  Retrieves a list of a specific user's FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either `gcm`, `huawei`, or `apns` in the `token_type` parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <returns>ListRegistrationOrDeviceTokensResponse</returns>
        ListRegistrationOrDeviceTokensResponse ListRegistrationOrDeviceTokens (string apiToken, string userId, string tokenType);

        /// <summary>
        /// List registration or device tokens
        /// </summary>
        /// <remarks>
        /// ## List registration or device tokens  Retrieves a list of a specific user's FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either `gcm`, `huawei`, or `apns` in the `token_type` parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <returns>ApiResponse of ListRegistrationOrDeviceTokensResponse</returns>
        ApiResponse<ListRegistrationOrDeviceTokensResponse> ListRegistrationOrDeviceTokensWithHttpInfo (string apiToken, string userId, string tokenType);
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>ListUsersResponse</returns>
        ListUsersResponse ListUsers (string apiToken, string token = default, int? limit = default, string activeMode = default, bool? showBot = default, string userIds = default, string nickname = default, string nicknameStartswith = default, string metadatakey = default, string metadatavaluesIn = default);

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>ApiResponse of ListUsersResponse</returns>
        ApiResponse<ListUsersResponse> ListUsersWithHttpInfo (string apiToken, string token = default, int? limit = default, string activeMode = default, bool? showBot = default, string userIds = default, string nickname = default, string nicknameStartswith = default, string metadatakey = default, string metadatavaluesIn = default);
        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all of a user's unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <returns>Object</returns>
        Object MarkAllMessagesAsRead (string apiToken, string userId, MarkAllMessagesAsReadData markAllMessagesAsReadData = default);

        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all of a user's unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MarkAllMessagesAsReadWithHttpInfo (string apiToken, string userId, MarkAllMessagesAsReadData markAllMessagesAsReadData = default);
        /// <summary>
        /// Register as an operator to channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns>Object</returns>
        Object RegisterAsOperatorToChannelsWithCustomChannelTypes (string apiToken, string userId, RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default);

        /// <summary>
        /// Register as an operator to channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo (string apiToken, string userId, RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default);
        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>RemoveRegistrationOrDeviceTokenResponse</returns>
        RemoveRegistrationOrDeviceTokenResponse RemoveRegistrationOrDeviceToken (string apiToken, string userId);

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of RemoveRegistrationOrDeviceTokenResponse</returns>
        ApiResponse<RemoveRegistrationOrDeviceTokenResponse> RemoveRegistrationOrDeviceTokenWithHttpInfo (string apiToken, string userId);
        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>RemoveRegistrationOrDeviceTokenByTokenResponse</returns>
        RemoveRegistrationOrDeviceTokenByTokenResponse RemoveRegistrationOrDeviceTokenByToken (string apiToken, string userId, string tokenType, string token);

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of RemoveRegistrationOrDeviceTokenByTokenResponse</returns>
        ApiResponse<RemoveRegistrationOrDeviceTokenByTokenResponse> RemoveRegistrationOrDeviceTokenByTokenWithHttpInfo (string apiToken, string userId, string tokenType, string token);
        /// <summary>
        /// Remove a registration or device token from an owner
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse</returns>
        RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse RemoveRegistrationOrDeviceTokenFromOwnerByToken (string apiToken, string tokenType, string token);

        /// <summary>
        /// Remove a registration or device token from an owner
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse</returns>
        ApiResponse<RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse> RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo (string apiToken, string tokenType, string token);
        /// <summary>
        /// Reset push preferences
        /// </summary>
        /// <remarks>
        /// ## Reset push preferences  Resets a user's push preferences. After performing this action,   `do_not_disturb` and `snooze_enabled` are set to false.  The values of the parameters associated with the time frame are all set to 0.  `timezone` is reset to `UTC`.  `push_sound` is reset to `default`.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ResetPushPreferencesResponse</returns>
        ResetPushPreferencesResponse ResetPushPreferences (string apiToken, string userId);

        /// <summary>
        /// Reset push preferences
        /// </summary>
        /// <remarks>
        /// ## Reset push preferences  Resets a user's push preferences. After performing this action,   `do_not_disturb` and `snooze_enabled` are set to false.  The values of the parameters associated with the time frame are all set to 0.  `timezone` is reset to `UTC`.  `push_sound` is reset to `default`.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of ResetPushPreferencesResponse</returns>
        ApiResponse<ResetPushPreferencesResponse> ResetPushPreferencesWithHttpInfo (string apiToken, string userId);
        /// <summary>
        /// Update channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update channel invitation preference  Updates the channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>UpdateChannelInvitationPreferenceResponse</returns>
        UpdateChannelInvitationPreferenceResponse UpdateChannelInvitationPreference (string apiToken, string userId, UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default);

        /// <summary>
        /// Update channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update channel invitation preference  Updates the channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>ApiResponse of UpdateChannelInvitationPreferenceResponse</returns>
        ApiResponse<UpdateChannelInvitationPreferenceResponse> UpdateChannelInvitationPreferenceWithHttpInfo (string apiToken, string userId, UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default);
        /// <summary>
        /// Update count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <returns>UpdateCountPreferenceOfChannelByUrlResponse</returns>
        UpdateCountPreferenceOfChannelByUrlResponse UpdateCountPreferenceOfChannelByUrl (string apiToken, string userId, string channelUrl, UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default);

        /// <summary>
        /// Update count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of UpdateCountPreferenceOfChannelByUrlResponse</returns>
        ApiResponse<UpdateCountPreferenceOfChannelByUrlResponse> UpdateCountPreferenceOfChannelByUrlWithHttpInfo (string apiToken, string userId, string channelUrl, UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default);
        /// <summary>
        /// Update push preferences
        /// </summary>
        /// <remarks>
        /// ## Update push preferences  Updates a user's push preferences. Through this action, you can set `do_not_disturb` for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <returns>UpdatePushPreferencesResponse</returns>
        UpdatePushPreferencesResponse UpdatePushPreferences (string apiToken, string userId, UpdatePushPreferencesData updatePushPreferencesData = default);

        /// <summary>
        /// Update push preferences
        /// </summary>
        /// <remarks>
        /// ## Update push preferences  Updates a user's push preferences. Through this action, you can set `do_not_disturb` for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <returns>ApiResponse of UpdatePushPreferencesResponse</returns>
        ApiResponse<UpdatePushPreferencesResponse> UpdatePushPreferencesWithHttpInfo (string apiToken, string userId, UpdatePushPreferencesData updatePushPreferencesData = default);
        /// <summary>
        /// Update push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## Update push preferences for a channel  Updates push preferences for a user's specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <returns>UpdatePushPreferencesForChannelByUrlResponse</returns>
        UpdatePushPreferencesForChannelByUrlResponse UpdatePushPreferencesForChannelByUrl (string apiToken, string userId, string channelUrl, UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default);

        /// <summary>
        /// Update push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## Update push preferences for a channel  Updates push preferences for a user's specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of UpdatePushPreferencesForChannelByUrlResponse</returns>
        ApiResponse<UpdatePushPreferencesForChannelByUrlResponse> UpdatePushPreferencesForChannelByUrlWithHttpInfo (string apiToken, string userId, string channelUrl, UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// ## Update a user  Updates information on a user. In addition to changing a user's nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the `leave_all_when_deactivated` is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        SendBirdUser UpdateUserById (string apiToken, string userId, UpdateUserByIdData updateUserByIdData = default);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// ## Update a user  Updates information on a user. In addition to changing a user's nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the `leave_all_when_deactivated` is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        ApiResponse<SendBirdUser> UpdateUserByIdWithHttpInfo (string apiToken, string userId, UpdateUserByIdData updateUserByIdData = default);
        /// <summary>
        /// View channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View channel invitation preference  Retrieves channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ViewChannelInvitationPreferenceResponse</returns>
        ViewChannelInvitationPreferenceResponse ViewChannelInvitationPreference (string apiToken, string userId);

        /// <summary>
        /// View channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View channel invitation preference  Retrieves channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of ViewChannelInvitationPreferenceResponse</returns>
        ApiResponse<ViewChannelInvitationPreferenceResponse> ViewChannelInvitationPreferenceWithHttpInfo (string apiToken, string userId);
        /// <summary>
        /// View count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ViewCountPreferenceOfChannelByUrlResponse</returns>
        ViewCountPreferenceOfChannelByUrlResponse ViewCountPreferenceOfChannelByUrl (string apiToken, string userId, string channelUrl);

        /// <summary>
        /// View count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ApiResponse of ViewCountPreferenceOfChannelByUrlResponse</returns>
        ApiResponse<ViewCountPreferenceOfChannelByUrlResponse> ViewCountPreferenceOfChannelByUrlWithHttpInfo (string apiToken, string userId, string channelUrl);
        /// <summary>
        /// View number of channels by join status
        /// </summary>
        /// <remarks>
        /// ## View number of channels by join status  Retrieves the number of a user's group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="state"> (optional)</param>
        /// <returns>ViewNumberOfChannelsByJoinStatusResponse</returns>
        ViewNumberOfChannelsByJoinStatusResponse ViewNumberOfChannelsByJoinStatus (string apiToken, string userId, string state = default);

        /// <summary>
        /// View number of channels by join status
        /// </summary>
        /// <remarks>
        /// ## View number of channels by join status  Retrieves the number of a user's group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="state"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfChannelsByJoinStatusResponse</returns>
        ApiResponse<ViewNumberOfChannelsByJoinStatusResponse> ViewNumberOfChannelsByJoinStatusWithHttpInfo (string apiToken, string userId, string state = default);
        /// <summary>
        /// View number of channels with unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of channels with unread messages  Retrieves the total number of a user's group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ViewNumberOfChannelsWithUnreadMessagesResponse</returns>
        ViewNumberOfChannelsWithUnreadMessagesResponse ViewNumberOfChannelsWithUnreadMessages (string apiToken, string userId, List<string> customTypes = default, string superMode = default);

        /// <summary>
        /// View number of channels with unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of channels with unread messages  Retrieves the total number of a user's group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfChannelsWithUnreadMessagesResponse</returns>
        ApiResponse<ViewNumberOfChannelsWithUnreadMessagesResponse> ViewNumberOfChannelsWithUnreadMessagesWithHttpInfo (string apiToken, string userId, List<string> customTypes = default, string superMode = default);
        /// <summary>
        /// View number of unread items
        /// </summary>
        /// <remarks>
        /// ## View number of unread items  Retrieves a set of total numbers of a user's unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <returns>ViewNumberOfUnreadItemsResponse</returns>
        ViewNumberOfUnreadItemsResponse ViewNumberOfUnreadItems (string apiToken, string userId, string customType = default, string itemKeys = default);

        /// <summary>
        /// View number of unread items
        /// </summary>
        /// <remarks>
        /// ## View number of unread items  Retrieves a set of total numbers of a user's unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfUnreadItemsResponse</returns>
        ApiResponse<ViewNumberOfUnreadItemsResponse> ViewNumberOfUnreadItemsWithHttpInfo (string apiToken, string userId, string customType = default, string itemKeys = default);
        /// <summary>
        /// View number of unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of unread messages  Retrieves the total number of a user's currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ViewNumberOfUnreadMessagesResponse</returns>
        ViewNumberOfUnreadMessagesResponse ViewNumberOfUnreadMessages (string apiToken, string userId, string customTypes = default, string superMode = default);

        /// <summary>
        /// View number of unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of unread messages  Retrieves the total number of a user's currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfUnreadMessagesResponse</returns>
        ApiResponse<ViewNumberOfUnreadMessagesResponse> ViewNumberOfUnreadMessagesWithHttpInfo (string apiToken, string userId, string customTypes = default, string superMode = default);
        /// <summary>
        /// View push preferences
        /// </summary>
        /// <remarks>
        /// ## View push preferences  Retrieves a user's push preferences about whether the user has set `do_not_disturb` to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ViewPushPreferencesResponse</returns>
        ViewPushPreferencesResponse ViewPushPreferences (string apiToken, string userId);

        /// <summary>
        /// View push preferences
        /// </summary>
        /// <remarks>
        /// ## View push preferences  Retrieves a user's push preferences about whether the user has set `do_not_disturb` to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of ViewPushPreferencesResponse</returns>
        ApiResponse<ViewPushPreferencesResponse> ViewPushPreferencesWithHttpInfo (string apiToken, string userId);
        /// <summary>
        /// View push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ViewPushPreferencesForChannelByUrlResponse</returns>
        ViewPushPreferencesForChannelByUrlResponse ViewPushPreferencesForChannelByUrl (string apiToken, string userId, string channelUrl);

        /// <summary>
        /// View push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ApiResponse of ViewPushPreferencesForChannelByUrlResponse</returns>
        ApiResponse<ViewPushPreferencesForChannelByUrlResponse> ViewPushPreferencesForChannelByUrlWithHttpInfo (string apiToken, string userId, string channelUrl);
        /// <summary>
        /// View a user
        /// </summary>
        /// <remarks>
        /// ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        SendBirdUser ViewUserById (string apiToken, string userId, bool? includeUnreadCount = default, string customTypes = default, string superMode = default);

        /// <summary>
        /// View a user
        /// </summary>
        /// <remarks>
        /// ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        ApiResponse<SendBirdUser> ViewUserByIdWithHttpInfo (string apiToken, string userId, bool? includeUnreadCount = default, string customTypes = default, string superMode = default);
        /// <summary>
        /// View who owns a registration or device token
        /// </summary>
        /// <remarks>
        /// ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>List of ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner</returns>
        List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner> ViewWhoOwnsRegistrationOrDeviceTokenByToken (string apiToken, string tokenType, string token);

        /// <summary>
        /// View who owns a registration or device token
        /// </summary>
        /// <remarks>
        /// ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of List of ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner</returns>
        ApiResponse<List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>> ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo (string apiToken, string tokenType, string token);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a registration or device token
        /// </summary>
        /// <remarks>
        /// ## Add a registration or device token  > __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user's FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  > __Note__: For more information on the registration token and device token, visit the Google's [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei's [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple's [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddRegistrationOrDeviceTokenResponse</returns>
        System.Threading.Tasks.Task<AddRegistrationOrDeviceTokenResponse> AddRegistrationOrDeviceTokenAsync (string apiToken, string userId, string tokenType, AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a registration or device token
        /// </summary>
        /// <remarks>
        /// ## Add a registration or device token  > __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user's FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  > __Note__: For more information on the registration token and device token, visit the Google's [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei's [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple's [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddRegistrationOrDeviceTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddRegistrationOrDeviceTokenResponse>> AddRegistrationOrDeviceTokenWithHttpInfoAsync (string apiToken, string userId, string tokenType, AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Choose a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Choose a push notification content template  Chooses a push notification content template of a user's own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ChoosePushNotificationContentTemplateResponse</returns>
        System.Threading.Tasks.Task<ChoosePushNotificationContentTemplateResponse> ChoosePushNotificationContentTemplateAsync (string apiToken, string userId, Object body = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Choose a push notification content template
        /// </summary>
        /// <remarks>
        /// ## Choose a push notification content template  Chooses a push notification content template of a user's own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ChoosePushNotificationContentTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChoosePushNotificationContentTemplateResponse>> ChoosePushNotificationContentTemplateWithHttpInfoAsync (string apiToken, string userId, Object body = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="createUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        System.Threading.Tasks.Task<SendBirdUser> CreateUserAsync (string apiToken, CreateUserData createUserData = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="createUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> CreateUserWithHttpInfoAsync (string apiToken, CreateUserData createUserData = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Create user token
        /// </summary>
        /// <remarks>
        /// ## Create user token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="createUserTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateUserTokenResponse</returns>
        System.Threading.Tasks.Task<CreateUserTokenResponse> CreateUserTokenAsync (string apiToken, string userId, CreateUserTokenData createUserTokenData = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Create user token
        /// </summary>
        /// <remarks>
        /// ## Create user token
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="createUserTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateUserTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateUserTokenResponse>> CreateUserTokenWithHttpInfoAsync (string apiToken, string userId, CreateUserTokenData createUserTokenData = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteUserByIdAsync (string apiToken, string userId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserByIdWithHttpInfoAsync (string apiToken, string userId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Leave my group channels
        /// </summary>
        /// <remarks>
        /// ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LeaveMyGroupChannelsAsync (string apiToken, string userId, LeaveMyGroupChannelsData leaveMyGroupChannelsData = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Leave my group channels
        /// </summary>
        /// <remarks>
        /// ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaveMyGroupChannelsWithHttpInfoAsync (string apiToken, string userId, LeaveMyGroupChannelsData leaveMyGroupChannelsData = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// List my group channels
        /// </summary>
        /// <remarks>
        /// ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMyGroupChannelsResponse</returns>
        System.Threading.Tasks.Task<ListMyGroupChannelsResponse> ListMyGroupChannelsAsync (string apiToken, string userId, string token = default, int? limit = default, string distinctMode = default, string publicMode = default, string superMode = default, string hiddenMode = default, string memberStateFilter = default, string unreadFilter = default, int? createdAfter = default, int? createdBefore = default, bool? showEmpty = default, bool? showFrozen = default, bool? showMember = default, bool? showDeliveryReceipt = default, bool? showReadReceipt = default, string order = default, string metadataOrderKey = default, string customTypes = default, string customTypeStartswith = default, string channelUrls = default, string name = default, string nameContains = default, string nameStartswith = default, string membersExactlyIn = default, string membersIncludeIn = default, string queryType = default, string membersNickname = default, string membersNicknameContains = default, string searchQuery = default, string searchFields = default, string metadataKey = default, string metadataValues = default, string metadataValueStartswith = default, string metacounterKey = default, string metacounterValues = default, string metacounterValueGt = default, string metacounterValueGte = default, string metacounterValueLt = default, string metacounterValueLte = default, string customType = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List my group channels
        /// </summary>
        /// <remarks>
        /// ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the target user.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMyGroupChannelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMyGroupChannelsResponse>> ListMyGroupChannelsWithHttpInfoAsync (string apiToken, string userId, string token = default, int? limit = default, string distinctMode = default, string publicMode = default, string superMode = default, string hiddenMode = default, string memberStateFilter = default, string unreadFilter = default, int? createdAfter = default, int? createdBefore = default, bool? showEmpty = default, bool? showFrozen = default, bool? showMember = default, bool? showDeliveryReceipt = default, bool? showReadReceipt = default, string order = default, string metadataOrderKey = default, string customTypes = default, string customTypeStartswith = default, string channelUrls = default, string name = default, string nameContains = default, string nameStartswith = default, string membersExactlyIn = default, string membersIncludeIn = default, string queryType = default, string membersNickname = default, string membersNicknameContains = default, string searchQuery = default, string searchFields = default, string metadataKey = default, string metadataValues = default, string metadataValueStartswith = default, string metacounterKey = default, string metacounterValues = default, string metacounterValueGt = default, string metacounterValueGte = default, string metacounterValueLt = default, string metacounterValueLte = default, string customType = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// List registration or device tokens
        /// </summary>
        /// <remarks>
        /// ## List registration or device tokens  Retrieves a list of a specific user's FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either `gcm`, `huawei`, or `apns` in the `token_type` parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListRegistrationOrDeviceTokensResponse</returns>
        System.Threading.Tasks.Task<ListRegistrationOrDeviceTokensResponse> ListRegistrationOrDeviceTokensAsync (string apiToken, string userId, string tokenType, CancellationToken cancellationToken = default);

        /// <summary>
        /// List registration or device tokens
        /// </summary>
        /// <remarks>
        /// ## List registration or device tokens  Retrieves a list of a specific user's FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either `gcm`, `huawei`, or `apns` in the `token_type` parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListRegistrationOrDeviceTokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRegistrationOrDeviceTokensResponse>> ListRegistrationOrDeviceTokensWithHttpInfoAsync (string apiToken, string userId, string tokenType, CancellationToken cancellationToken = default);
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListUsersResponse</returns>
        System.Threading.Tasks.Task<ListUsersResponse> ListUsersAsync (string apiToken, string token = default, int? limit = default, string activeMode = default, bool? showBot = default, string userIds = default, string nickname = default, string nicknameStartswith = default, string metadatakey = default, string metadatavaluesIn = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListUsersResponse>> ListUsersWithHttpInfoAsync (string apiToken, string token = default, int? limit = default, string activeMode = default, bool? showBot = default, string userIds = default, string nickname = default, string nicknameStartswith = default, string metadatakey = default, string metadatavaluesIn = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all of a user's unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MarkAllMessagesAsReadAsync (string apiToken, string userId, MarkAllMessagesAsReadData markAllMessagesAsReadData = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Mark all messages as read
        /// </summary>
        /// <remarks>
        /// ## Mark all messages as read  Marks all of a user's unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkAllMessagesAsReadWithHttpInfoAsync (string apiToken, string userId, MarkAllMessagesAsReadData markAllMessagesAsReadData = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Register as an operator to channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RegisterAsOperatorToChannelsWithCustomChannelTypesAsync (string apiToken, string userId, RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Register as an operator to channels with custom channel types
        /// </summary>
        /// <remarks>
        /// ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfoAsync (string apiToken, string userId, RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemoveRegistrationOrDeviceTokenResponse</returns>
        System.Threading.Tasks.Task<RemoveRegistrationOrDeviceTokenResponse> RemoveRegistrationOrDeviceTokenAsync (string apiToken, string userId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemoveRegistrationOrDeviceTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveRegistrationOrDeviceTokenResponse>> RemoveRegistrationOrDeviceTokenWithHttpInfoAsync (string apiToken, string userId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemoveRegistrationOrDeviceTokenByTokenResponse</returns>
        System.Threading.Tasks.Task<RemoveRegistrationOrDeviceTokenByTokenResponse> RemoveRegistrationOrDeviceTokenByTokenAsync (string apiToken, string userId, string tokenType, string token, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemoveRegistrationOrDeviceTokenByTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveRegistrationOrDeviceTokenByTokenResponse>> RemoveRegistrationOrDeviceTokenByTokenWithHttpInfoAsync (string apiToken, string userId, string tokenType, string token, CancellationToken cancellationToken = default);
        /// <summary>
        /// Remove a registration or device token from an owner
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse</returns>
        System.Threading.Tasks.Task<RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse> RemoveRegistrationOrDeviceTokenFromOwnerByTokenAsync (string apiToken, string tokenType, string token, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove a registration or device token from an owner
        /// </summary>
        /// <remarks>
        /// ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse>> RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfoAsync (string apiToken, string tokenType, string token, CancellationToken cancellationToken = default);
        /// <summary>
        /// Reset push preferences
        /// </summary>
        /// <remarks>
        /// ## Reset push preferences  Resets a user's push preferences. After performing this action,   `do_not_disturb` and `snooze_enabled` are set to false.  The values of the parameters associated with the time frame are all set to 0.  `timezone` is reset to `UTC`.  `push_sound` is reset to `default`.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResetPushPreferencesResponse</returns>
        System.Threading.Tasks.Task<ResetPushPreferencesResponse> ResetPushPreferencesAsync (string apiToken, string userId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset push preferences
        /// </summary>
        /// <remarks>
        /// ## Reset push preferences  Resets a user's push preferences. After performing this action,   `do_not_disturb` and `snooze_enabled` are set to false.  The values of the parameters associated with the time frame are all set to 0.  `timezone` is reset to `UTC`.  `push_sound` is reset to `default`.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResetPushPreferencesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResetPushPreferencesResponse>> ResetPushPreferencesWithHttpInfoAsync (string apiToken, string userId, CancellationToken cancellationToken = default);
        /// <summary>
        /// Update channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update channel invitation preference  Updates the channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateChannelInvitationPreferenceResponse</returns>
        System.Threading.Tasks.Task<UpdateChannelInvitationPreferenceResponse> UpdateChannelInvitationPreferenceAsync (string apiToken, string userId, UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## Update channel invitation preference  Updates the channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateChannelInvitationPreferenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateChannelInvitationPreferenceResponse>> UpdateChannelInvitationPreferenceWithHttpInfoAsync (string apiToken, string userId, UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Update count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateCountPreferenceOfChannelByUrlResponse</returns>
        System.Threading.Tasks.Task<UpdateCountPreferenceOfChannelByUrlResponse> UpdateCountPreferenceOfChannelByUrlAsync (string apiToken, string userId, string channelUrl, UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateCountPreferenceOfChannelByUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCountPreferenceOfChannelByUrlResponse>> UpdateCountPreferenceOfChannelByUrlWithHttpInfoAsync (string apiToken, string userId, string channelUrl, UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Update push preferences
        /// </summary>
        /// <remarks>
        /// ## Update push preferences  Updates a user's push preferences. Through this action, you can set `do_not_disturb` for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdatePushPreferencesResponse</returns>
        System.Threading.Tasks.Task<UpdatePushPreferencesResponse> UpdatePushPreferencesAsync (string apiToken, string userId, UpdatePushPreferencesData updatePushPreferencesData = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update push preferences
        /// </summary>
        /// <remarks>
        /// ## Update push preferences  Updates a user's push preferences. Through this action, you can set `do_not_disturb` for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdatePushPreferencesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePushPreferencesResponse>> UpdatePushPreferencesWithHttpInfoAsync (string apiToken, string userId, UpdatePushPreferencesData updatePushPreferencesData = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Update push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## Update push preferences for a channel  Updates push preferences for a user's specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdatePushPreferencesForChannelByUrlResponse</returns>
        System.Threading.Tasks.Task<UpdatePushPreferencesForChannelByUrlResponse> UpdatePushPreferencesForChannelByUrlAsync (string apiToken, string userId, string channelUrl, UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## Update push preferences for a channel  Updates push preferences for a user's specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdatePushPreferencesForChannelByUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePushPreferencesForChannelByUrlResponse>> UpdatePushPreferencesForChannelByUrlWithHttpInfoAsync (string apiToken, string userId, string channelUrl, UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// ## Update a user  Updates information on a user. In addition to changing a user's nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the `leave_all_when_deactivated` is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        System.Threading.Tasks.Task<SendBirdUser> UpdateUserByIdAsync (string apiToken, string userId, UpdateUserByIdData updateUserByIdData = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// ## Update a user  Updates information on a user. In addition to changing a user's nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the `leave_all_when_deactivated` is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> UpdateUserByIdWithHttpInfoAsync (string apiToken, string userId, UpdateUserByIdData updateUserByIdData = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// View channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View channel invitation preference  Retrieves channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewChannelInvitationPreferenceResponse</returns>
        System.Threading.Tasks.Task<ViewChannelInvitationPreferenceResponse> ViewChannelInvitationPreferenceAsync (string apiToken, string userId, CancellationToken cancellationToken = default);

        /// <summary>
        /// View channel invitation preference
        /// </summary>
        /// <remarks>
        /// ## View channel invitation preference  Retrieves channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewChannelInvitationPreferenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewChannelInvitationPreferenceResponse>> ViewChannelInvitationPreferenceWithHttpInfoAsync (string apiToken, string userId, CancellationToken cancellationToken = default);
        /// <summary>
        /// View count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewCountPreferenceOfChannelByUrlResponse</returns>
        System.Threading.Tasks.Task<ViewCountPreferenceOfChannelByUrlResponse> ViewCountPreferenceOfChannelByUrlAsync (string apiToken, string userId, string channelUrl, CancellationToken cancellationToken = default);

        /// <summary>
        /// View count preference of a channel
        /// </summary>
        /// <remarks>
        /// ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewCountPreferenceOfChannelByUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewCountPreferenceOfChannelByUrlResponse>> ViewCountPreferenceOfChannelByUrlWithHttpInfoAsync (string apiToken, string userId, string channelUrl, CancellationToken cancellationToken = default);
        /// <summary>
        /// View number of channels by join status
        /// </summary>
        /// <remarks>
        /// ## View number of channels by join status  Retrieves the number of a user's group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfChannelsByJoinStatusResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfChannelsByJoinStatusResponse> ViewNumberOfChannelsByJoinStatusAsync (string apiToken, string userId, string state = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// View number of channels by join status
        /// </summary>
        /// <remarks>
        /// ## View number of channels by join status  Retrieves the number of a user's group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfChannelsByJoinStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfChannelsByJoinStatusResponse>> ViewNumberOfChannelsByJoinStatusWithHttpInfoAsync (string apiToken, string userId, string state = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// View number of channels with unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of channels with unread messages  Retrieves the total number of a user's group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfChannelsWithUnreadMessagesResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfChannelsWithUnreadMessagesResponse> ViewNumberOfChannelsWithUnreadMessagesAsync (string apiToken, string userId, List<string> customTypes = default, string superMode = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// View number of channels with unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of channels with unread messages  Retrieves the total number of a user's group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfChannelsWithUnreadMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfChannelsWithUnreadMessagesResponse>> ViewNumberOfChannelsWithUnreadMessagesWithHttpInfoAsync (string apiToken, string userId, List<string> customTypes = default, string superMode = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// View number of unread items
        /// </summary>
        /// <remarks>
        /// ## View number of unread items  Retrieves a set of total numbers of a user's unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfUnreadItemsResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfUnreadItemsResponse> ViewNumberOfUnreadItemsAsync (string apiToken, string userId, string customType = default, string itemKeys = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// View number of unread items
        /// </summary>
        /// <remarks>
        /// ## View number of unread items  Retrieves a set of total numbers of a user's unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfUnreadItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfUnreadItemsResponse>> ViewNumberOfUnreadItemsWithHttpInfoAsync (string apiToken, string userId, string customType = default, string itemKeys = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// View number of unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of unread messages  Retrieves the total number of a user's currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfUnreadMessagesResponse</returns>
        System.Threading.Tasks.Task<ViewNumberOfUnreadMessagesResponse> ViewNumberOfUnreadMessagesAsync (string apiToken, string userId, string customTypes = default, string superMode = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// View number of unread messages
        /// </summary>
        /// <remarks>
        /// ## View number of unread messages  Retrieves the total number of a user's currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfUnreadMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewNumberOfUnreadMessagesResponse>> ViewNumberOfUnreadMessagesWithHttpInfoAsync (string apiToken, string userId, string customTypes = default, string superMode = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// View push preferences
        /// </summary>
        /// <remarks>
        /// ## View push preferences  Retrieves a user's push preferences about whether the user has set `do_not_disturb` to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushPreferencesResponse</returns>
        System.Threading.Tasks.Task<ViewPushPreferencesResponse> ViewPushPreferencesAsync (string apiToken, string userId, CancellationToken cancellationToken = default);

        /// <summary>
        /// View push preferences
        /// </summary>
        /// <remarks>
        /// ## View push preferences  Retrieves a user's push preferences about whether the user has set `do_not_disturb` to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushPreferencesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewPushPreferencesResponse>> ViewPushPreferencesWithHttpInfoAsync (string apiToken, string userId, CancellationToken cancellationToken = default);
        /// <summary>
        /// View push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushPreferencesForChannelByUrlResponse</returns>
        System.Threading.Tasks.Task<ViewPushPreferencesForChannelByUrlResponse> ViewPushPreferencesForChannelByUrlAsync (string apiToken, string userId, string channelUrl, CancellationToken cancellationToken = default);

        /// <summary>
        /// View push preferences for a channel
        /// </summary>
        /// <remarks>
        /// ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushPreferencesForChannelByUrlResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewPushPreferencesForChannelByUrlResponse>> ViewPushPreferencesForChannelByUrlWithHttpInfoAsync (string apiToken, string userId, string channelUrl, CancellationToken cancellationToken = default);
        /// <summary>
        /// View a user
        /// </summary>
        /// <remarks>
        /// ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        System.Threading.Tasks.Task<SendBirdUser> ViewUserByIdAsync (string apiToken, string userId, bool? includeUnreadCount = default, string customTypes = default, string superMode = default, CancellationToken cancellationToken = default);

        /// <summary>
        /// View a user
        /// </summary>
        /// <remarks>
        /// ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> ViewUserByIdWithHttpInfoAsync (string apiToken, string userId, bool? includeUnreadCount = default, string customTypes = default, string superMode = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// View who owns a registration or device token
        /// </summary>
        /// <remarks>
        /// ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List of ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner</returns>
        System.Threading.Tasks.Task<List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>> ViewWhoOwnsRegistrationOrDeviceTokenByTokenAsync (string apiToken, string tokenType, string token, CancellationToken cancellationToken = default);

        /// <summary>
        /// View who owns a registration or device token
        /// </summary>
        /// <remarks>
        /// ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </remarks>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>>> ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfoAsync (string apiToken, string tokenType, string token, CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private sendbird_platform_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = new sendbird_platform_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// </summary>
        /// <returns></returns>
        public UserApi()
        {
            this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(sendbird_platform_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sendbird_platform_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sendbird_platform_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sendbird_platform_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sendbird_platform_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a registration or device token ## Add a registration or device token  > __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user's FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  > __Note__: For more information on the registration token and device token, visit the Google's [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei's [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple's [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <returns>AddRegistrationOrDeviceTokenResponse</returns>
        public AddRegistrationOrDeviceTokenResponse AddRegistrationOrDeviceToken (string apiToken, string userId, string tokenType, AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default)
        {
             ApiResponse<AddRegistrationOrDeviceTokenResponse> localVarResponse = AddRegistrationOrDeviceTokenWithHttpInfo(apiToken, userId, tokenType, addRegistrationOrDeviceTokenData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a registration or device token ## Add a registration or device token  > __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user's FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  > __Note__: For more information on the registration token and device token, visit the Google's [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei's [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple's [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <returns>ApiResponse of AddRegistrationOrDeviceTokenResponse</returns>
        public ApiResponse<AddRegistrationOrDeviceTokenResponse> AddRegistrationOrDeviceTokenWithHttpInfo (string apiToken, string userId, string tokenType, AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->AddRegistrationOrDeviceToken");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->AddRegistrationOrDeviceToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->AddRegistrationOrDeviceToken");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addRegistrationOrDeviceTokenData != null && addRegistrationOrDeviceTokenData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addRegistrationOrDeviceTokenData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addRegistrationOrDeviceTokenData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRegistrationOrDeviceToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddRegistrationOrDeviceTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddRegistrationOrDeviceTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddRegistrationOrDeviceTokenResponse)));
        }

        /// <summary>
        /// Add a registration or device token ## Add a registration or device token  > __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user's FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  > __Note__: For more information on the registration token and device token, visit the Google's [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei's [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple's [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AddRegistrationOrDeviceTokenResponse</returns>
        public async System.Threading.Tasks.Task<AddRegistrationOrDeviceTokenResponse> AddRegistrationOrDeviceTokenAsync (string apiToken, string userId, string tokenType, AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<AddRegistrationOrDeviceTokenResponse> localVarResponse = await AddRegistrationOrDeviceTokenWithHttpInfoAsync(apiToken, userId, tokenType, addRegistrationOrDeviceTokenData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a registration or device token ## Add a registration or device token  > __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user's FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  > __Note__: For more information on the registration token and device token, visit the Google's [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei's [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple's [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="addRegistrationOrDeviceTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AddRegistrationOrDeviceTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddRegistrationOrDeviceTokenResponse>> AddRegistrationOrDeviceTokenWithHttpInfoAsync (string apiToken, string userId, string tokenType, AddRegistrationOrDeviceTokenData addRegistrationOrDeviceTokenData = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->AddRegistrationOrDeviceToken");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->AddRegistrationOrDeviceToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->AddRegistrationOrDeviceToken");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (addRegistrationOrDeviceTokenData != null && addRegistrationOrDeviceTokenData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addRegistrationOrDeviceTokenData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addRegistrationOrDeviceTokenData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRegistrationOrDeviceToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddRegistrationOrDeviceTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddRegistrationOrDeviceTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddRegistrationOrDeviceTokenResponse)));
        }

        /// <summary>
        /// Choose a push notification content template ## Choose a push notification content template  Chooses a push notification content template of a user's own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ChoosePushNotificationContentTemplateResponse</returns>
        public ChoosePushNotificationContentTemplateResponse ChoosePushNotificationContentTemplate (string apiToken, string userId, Object body = default)
        {
             ApiResponse<ChoosePushNotificationContentTemplateResponse> localVarResponse = ChoosePushNotificationContentTemplateWithHttpInfo(apiToken, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Choose a push notification content template ## Choose a push notification content template  Chooses a push notification content template of a user's own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ChoosePushNotificationContentTemplateResponse</returns>
        public ApiResponse<ChoosePushNotificationContentTemplateResponse> ChoosePushNotificationContentTemplateWithHttpInfo (string apiToken, string userId, Object body = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ChoosePushNotificationContentTemplate");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ChoosePushNotificationContentTemplate");

            var localVarPath = "/v3/users/{user_id}/push/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChoosePushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChoosePushNotificationContentTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ChoosePushNotificationContentTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChoosePushNotificationContentTemplateResponse)));
        }

        /// <summary>
        /// Choose a push notification content template ## Choose a push notification content template  Chooses a push notification content template of a user's own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ChoosePushNotificationContentTemplateResponse</returns>
        public async System.Threading.Tasks.Task<ChoosePushNotificationContentTemplateResponse> ChoosePushNotificationContentTemplateAsync (string apiToken, string userId, Object body = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ChoosePushNotificationContentTemplateResponse> localVarResponse = await ChoosePushNotificationContentTemplateWithHttpInfoAsync(apiToken, userId, body, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Choose a push notification content template ## Choose a push notification content template  Chooses a push notification content template of a user's own. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-choose-a-push-notification-content-template - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ChoosePushNotificationContentTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChoosePushNotificationContentTemplateResponse>> ChoosePushNotificationContentTemplateWithHttpInfoAsync (string apiToken, string userId, Object body = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ChoosePushNotificationContentTemplate");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ChoosePushNotificationContentTemplate");

            var localVarPath = "/v3/users/{user_id}/push/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChoosePushNotificationContentTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChoosePushNotificationContentTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ChoosePushNotificationContentTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChoosePushNotificationContentTemplateResponse)));
        }

        /// <summary>
        /// Create a user ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="createUserData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        public SendBirdUser CreateUser (string apiToken, CreateUserData createUserData = default)
        {
             ApiResponse<SendBirdUser> localVarResponse = CreateUserWithHttpInfo(apiToken, createUserData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="createUserData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        public ApiResponse<SendBirdUser> CreateUserWithHttpInfo (string apiToken, CreateUserData createUserData = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->CreateUser");

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createUserData != null && createUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// Create a user ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="createUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        public async System.Threading.Tasks.Task<SendBirdUser> CreateUserAsync (string apiToken, CreateUserData createUserData = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdUser> localVarResponse = await CreateUserWithHttpInfoAsync(apiToken, createUserData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a user ## Create a user  Creates a new user in the application. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-create-a-user
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="createUserData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> CreateUserWithHttpInfoAsync (string apiToken, CreateUserData createUserData = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->CreateUser");

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createUserData != null && createUserData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// Create user token ## Create user token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="createUserTokenData"> (optional)</param>
        /// <returns>CreateUserTokenResponse</returns>
        public CreateUserTokenResponse CreateUserToken (string apiToken, string userId, CreateUserTokenData createUserTokenData = default)
        {
             ApiResponse<CreateUserTokenResponse> localVarResponse = CreateUserTokenWithHttpInfo(apiToken, userId, createUserTokenData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create user token ## Create user token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="createUserTokenData"> (optional)</param>
        /// <returns>ApiResponse of CreateUserTokenResponse</returns>
        public ApiResponse<CreateUserTokenResponse> CreateUserTokenWithHttpInfo (string apiToken, string userId, CreateUserTokenData createUserTokenData = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->CreateUserToken");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->CreateUserToken");

            var localVarPath = "/v3/users/{user_id}/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createUserTokenData != null && createUserTokenData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserTokenData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserTokenData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateUserTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateUserTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateUserTokenResponse)));
        }

        /// <summary>
        /// Create user token ## Create user token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="createUserTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreateUserTokenResponse</returns>
        public async System.Threading.Tasks.Task<CreateUserTokenResponse> CreateUserTokenAsync (string apiToken, string userId, CreateUserTokenData createUserTokenData = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<CreateUserTokenResponse> localVarResponse = await CreateUserTokenWithHttpInfoAsync(apiToken, userId, createUserTokenData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create user token ## Create user token
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="createUserTokenData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreateUserTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateUserTokenResponse>> CreateUserTokenWithHttpInfoAsync (string apiToken, string userId, CreateUserTokenData createUserTokenData = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->CreateUserToken");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->CreateUserToken");

            var localVarPath = "/v3/users/{user_id}/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (createUserTokenData != null && createUserTokenData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createUserTokenData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createUserTokenData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateUserTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateUserTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateUserTokenResponse)));
        }

        /// <summary>
        /// Delete a user ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>Object</returns>
        public Object DeleteUserById (string apiToken, string userId)
        {
             ApiResponse<Object> localVarResponse = DeleteUserByIdWithHttpInfo(apiToken, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a user ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DeleteUserByIdWithHttpInfo (string apiToken, string userId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->DeleteUserById");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->DeleteUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete a user ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteUserByIdAsync (string apiToken, string userId, CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await DeleteUserByIdWithHttpInfoAsync(apiToken, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a user ## Delete a user  Deletes a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-delete-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserByIdWithHttpInfoAsync (string apiToken, string userId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->DeleteUserById");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->DeleteUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Leave my group channels ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <returns>Object</returns>
        public Object LeaveMyGroupChannels (string apiToken, string userId, LeaveMyGroupChannelsData leaveMyGroupChannelsData = default)
        {
             ApiResponse<Object> localVarResponse = LeaveMyGroupChannelsWithHttpInfo(apiToken, userId, leaveMyGroupChannelsData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leave my group channels ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> LeaveMyGroupChannelsWithHttpInfo (string apiToken, string userId, LeaveMyGroupChannelsData leaveMyGroupChannelsData = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->LeaveMyGroupChannels");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->LeaveMyGroupChannels");

            var localVarPath = "/v3/users/{user_id}/my_group_channels/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (leaveMyGroupChannelsData != null && leaveMyGroupChannelsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(leaveMyGroupChannelsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = leaveMyGroupChannelsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveMyGroupChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Leave my group channels ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LeaveMyGroupChannelsAsync (string apiToken, string userId, LeaveMyGroupChannelsData leaveMyGroupChannelsData = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await LeaveMyGroupChannelsWithHttpInfoAsync(apiToken, userId, leaveMyGroupChannelsData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leave my group channels ## Leave my group channels  Makes a user leave all joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-leave-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to leave all joined group channels.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="leaveMyGroupChannelsData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LeaveMyGroupChannelsWithHttpInfoAsync (string apiToken, string userId, LeaveMyGroupChannelsData leaveMyGroupChannelsData = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->LeaveMyGroupChannels");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->LeaveMyGroupChannels");

            var localVarPath = "/v3/users/{user_id}/my_group_channels/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (leaveMyGroupChannelsData != null && leaveMyGroupChannelsData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(leaveMyGroupChannelsData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = leaveMyGroupChannelsData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveMyGroupChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List my group channels ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <returns>ListMyGroupChannelsResponse</returns>
        public ListMyGroupChannelsResponse ListMyGroupChannels (string apiToken, string userId, string token = default, int? limit = default, string distinctMode = default, string publicMode = default, string superMode = default, string hiddenMode = default, string memberStateFilter = default, string unreadFilter = default, int? createdAfter = default, int? createdBefore = default, bool? showEmpty = default, bool? showFrozen = default, bool? showMember = default, bool? showDeliveryReceipt = default, bool? showReadReceipt = default, string order = default, string metadataOrderKey = default, string customTypes = default, string customTypeStartswith = default, string channelUrls = default, string name = default, string nameContains = default, string nameStartswith = default, string membersExactlyIn = default, string membersIncludeIn = default, string queryType = default, string membersNickname = default, string membersNicknameContains = default, string searchQuery = default, string searchFields = default, string metadataKey = default, string metadataValues = default, string metadataValueStartswith = default, string metacounterKey = default, string metacounterValues = default, string metacounterValueGt = default, string metacounterValueGte = default, string metacounterValueLt = default, string metacounterValueLte = default, string customType = default)
        {
             ApiResponse<ListMyGroupChannelsResponse> localVarResponse = ListMyGroupChannelsWithHttpInfo(apiToken, userId, token, limit, distinctMode, publicMode, superMode, hiddenMode, memberStateFilter, unreadFilter, createdAfter, createdBefore, showEmpty, showFrozen, showMember, showDeliveryReceipt, showReadReceipt, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, searchQuery, searchFields, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, customType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List my group channels ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <returns>ApiResponse of ListMyGroupChannelsResponse</returns>
        public ApiResponse<ListMyGroupChannelsResponse> ListMyGroupChannelsWithHttpInfo (string apiToken, string userId, string token = default, int? limit = default, string distinctMode = default, string publicMode = default, string superMode = default, string hiddenMode = default, string memberStateFilter = default, string unreadFilter = default, int? createdAfter = default, int? createdBefore = default, bool? showEmpty = default, bool? showFrozen = default, bool? showMember = default, bool? showDeliveryReceipt = default, bool? showReadReceipt = default, string order = default, string metadataOrderKey = default, string customTypes = default, string customTypeStartswith = default, string channelUrls = default, string name = default, string nameContains = default, string nameStartswith = default, string membersExactlyIn = default, string membersIncludeIn = default, string queryType = default, string membersNickname = default, string membersNicknameContains = default, string searchQuery = default, string searchFields = default, string metadataKey = default, string metadataValues = default, string metadataValueStartswith = default, string metacounterKey = default, string metacounterValues = default, string metacounterValueGt = default, string metacounterValueGte = default, string metacounterValueLt = default, string metacounterValueLte = default, string customType = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ListMyGroupChannels");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListMyGroupChannels");

            var localVarPath = "/v3/users/{user_id}/my_group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (distinctMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinct_mode", distinctMode)); // query parameter
            if (publicMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public_mode", publicMode)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (hiddenMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidden_mode", hiddenMode)); // query parameter
            if (memberStateFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_state_filter", memberStateFilter)); // query parameter
            if (unreadFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unread_filter", unreadFilter)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (showEmpty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_empty", showEmpty)); // query parameter
            if (showFrozen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_frozen", showFrozen)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (metadataOrderKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_order_key", metadataOrderKey)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (customTypeStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type_startswith", customTypeStartswith)); // query parameter
            if (channelUrls != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_urls", channelUrls)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_contains", nameContains)); // query parameter
            if (nameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_startswith", nameStartswith)); // query parameter
            if (membersExactlyIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_exactly_in", membersExactlyIn)); // query parameter
            if (membersIncludeIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_include_in", membersIncludeIn)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query_type", queryType)); // query parameter
            if (membersNickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname", membersNickname)); // query parameter
            if (membersNicknameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname_contains", membersNicknameContains)); // query parameter
            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_query", searchQuery)); // query parameter
            if (searchFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_fields", searchFields)); // query parameter
            if (metadataKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_key", metadataKey)); // query parameter
            if (metadataValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_values", metadataValues)); // query parameter
            if (metadataValueStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_value_startswith", metadataValueStartswith)); // query parameter
            if (metacounterKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_key", metacounterKey)); // query parameter
            if (metacounterValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_values", metacounterValues)); // query parameter
            if (metacounterValueGt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gt", metacounterValueGt)); // query parameter
            if (metacounterValueGte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gte", metacounterValueGte)); // query parameter
            if (metacounterValueLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lt", metacounterValueLt)); // query parameter
            if (metacounterValueLte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lte", metacounterValueLte)); // query parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMyGroupChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMyGroupChannelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMyGroupChannelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMyGroupChannelsResponse)));
        }

        /// <summary>
        /// List my group channels ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListMyGroupChannelsResponse</returns>
        public async System.Threading.Tasks.Task<ListMyGroupChannelsResponse> ListMyGroupChannelsAsync (string apiToken, string userId, string token = default, int? limit = default, string distinctMode = default, string publicMode = default, string superMode = default, string hiddenMode = default, string memberStateFilter = default, string unreadFilter = default, int? createdAfter = default, int? createdBefore = default, bool? showEmpty = default, bool? showFrozen = default, bool? showMember = default, bool? showDeliveryReceipt = default, bool? showReadReceipt = default, string order = default, string metadataOrderKey = default, string customTypes = default, string customTypeStartswith = default, string channelUrls = default, string name = default, string nameContains = default, string nameStartswith = default, string membersExactlyIn = default, string membersIncludeIn = default, string queryType = default, string membersNickname = default, string membersNicknameContains = default, string searchQuery = default, string searchFields = default, string metadataKey = default, string metadataValues = default, string metadataValueStartswith = default, string metacounterKey = default, string metacounterValues = default, string metacounterValueGt = default, string metacounterValueGte = default, string metacounterValueLt = default, string metacounterValueLte = default, string customType = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListMyGroupChannelsResponse> localVarResponse = await ListMyGroupChannelsWithHttpInfoAsync(apiToken, userId, token, limit, distinctMode, publicMode, superMode, hiddenMode, memberStateFilter, unreadFilter, createdAfter, createdBefore, showEmpty, showFrozen, showMember, showDeliveryReceipt, showReadReceipt, order, metadataOrderKey, customTypes, customTypeStartswith, channelUrls, name, nameContains, nameStartswith, membersExactlyIn, membersIncludeIn, queryType, membersNickname, membersNicknameContains, searchQuery, searchFields, metadataKey, metadataValues, metadataValueStartswith, metacounterKey, metacounterValues, metacounterValueGt, metacounterValueGte, metacounterValueLt, metacounterValueLte, customType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List my group channels ## List my group channels  Retrieves all group channels that the user has joined. You can create a request based on various query parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-my-group-channels - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the target user.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="distinctMode"> (optional)</param>
        /// <param name="publicMode"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="hiddenMode"> (optional)</param>
        /// <param name="memberStateFilter"> (optional)</param>
        /// <param name="unreadFilter"> (optional)</param>
        /// <param name="createdAfter"> (optional)</param>
        /// <param name="createdBefore"> (optional)</param>
        /// <param name="showEmpty"> (optional)</param>
        /// <param name="showFrozen"> (optional)</param>
        /// <param name="showMember"> (optional)</param>
        /// <param name="showDeliveryReceipt"> (optional)</param>
        /// <param name="showReadReceipt"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="metadataOrderKey"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="customTypeStartswith"> (optional)</param>
        /// <param name="channelUrls"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="nameContains"> (optional)</param>
        /// <param name="nameStartswith"> (optional)</param>
        /// <param name="membersExactlyIn"> (optional)</param>
        /// <param name="membersIncludeIn"> (optional)</param>
        /// <param name="queryType"> (optional)</param>
        /// <param name="membersNickname"> (optional)</param>
        /// <param name="membersNicknameContains"> (optional)</param>
        /// <param name="searchQuery"> (optional)</param>
        /// <param name="searchFields"> (optional)</param>
        /// <param name="metadataKey"> (optional)</param>
        /// <param name="metadataValues"> (optional)</param>
        /// <param name="metadataValueStartswith"> (optional)</param>
        /// <param name="metacounterKey"> (optional)</param>
        /// <param name="metacounterValues"> (optional)</param>
        /// <param name="metacounterValueGt"> (optional)</param>
        /// <param name="metacounterValueGte"> (optional)</param>
        /// <param name="metacounterValueLt"> (optional)</param>
        /// <param name="metacounterValueLte"> (optional)</param>
        /// <param name="customType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListMyGroupChannelsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListMyGroupChannelsResponse>> ListMyGroupChannelsWithHttpInfoAsync (string apiToken, string userId, string token = default, int? limit = default, string distinctMode = default, string publicMode = default, string superMode = default, string hiddenMode = default, string memberStateFilter = default, string unreadFilter = default, int? createdAfter = default, int? createdBefore = default, bool? showEmpty = default, bool? showFrozen = default, bool? showMember = default, bool? showDeliveryReceipt = default, bool? showReadReceipt = default, string order = default, string metadataOrderKey = default, string customTypes = default, string customTypeStartswith = default, string channelUrls = default, string name = default, string nameContains = default, string nameStartswith = default, string membersExactlyIn = default, string membersIncludeIn = default, string queryType = default, string membersNickname = default, string membersNicknameContains = default, string searchQuery = default, string searchFields = default, string metadataKey = default, string metadataValues = default, string metadataValueStartswith = default, string metacounterKey = default, string metacounterValues = default, string metacounterValueGt = default, string metacounterValueGte = default, string metacounterValueLt = default, string metacounterValueLte = default, string customType = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ListMyGroupChannels");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListMyGroupChannels");

            var localVarPath = "/v3/users/{user_id}/my_group_channels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (distinctMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distinct_mode", distinctMode)); // query parameter
            if (publicMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public_mode", publicMode)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (hiddenMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidden_mode", hiddenMode)); // query parameter
            if (memberStateFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "member_state_filter", memberStateFilter)); // query parameter
            if (unreadFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unread_filter", unreadFilter)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_after", createdAfter)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created_before", createdBefore)); // query parameter
            if (showEmpty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_empty", showEmpty)); // query parameter
            if (showFrozen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_frozen", showFrozen)); // query parameter
            if (showMember != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_member", showMember)); // query parameter
            if (showDeliveryReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_delivery_receipt", showDeliveryReceipt)); // query parameter
            if (showReadReceipt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_read_receipt", showReadReceipt)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (metadataOrderKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_order_key", metadataOrderKey)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (customTypeStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type_startswith", customTypeStartswith)); // query parameter
            if (channelUrls != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "channel_urls", channelUrls)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (nameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_contains", nameContains)); // query parameter
            if (nameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name_startswith", nameStartswith)); // query parameter
            if (membersExactlyIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_exactly_in", membersExactlyIn)); // query parameter
            if (membersIncludeIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_include_in", membersIncludeIn)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query_type", queryType)); // query parameter
            if (membersNickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname", membersNickname)); // query parameter
            if (membersNicknameContains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "members_nickname_contains", membersNicknameContains)); // query parameter
            if (searchQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_query", searchQuery)); // query parameter
            if (searchFields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search_fields", searchFields)); // query parameter
            if (metadataKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_key", metadataKey)); // query parameter
            if (metadataValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_values", metadataValues)); // query parameter
            if (metadataValueStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata_value_startswith", metadataValueStartswith)); // query parameter
            if (metacounterKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_key", metacounterKey)); // query parameter
            if (metacounterValues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_values", metacounterValues)); // query parameter
            if (metacounterValueGt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gt", metacounterValueGt)); // query parameter
            if (metacounterValueGte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_gte", metacounterValueGte)); // query parameter
            if (metacounterValueLt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lt", metacounterValueLt)); // query parameter
            if (metacounterValueLte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metacounter_value_lte", metacounterValueLte)); // query parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMyGroupChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMyGroupChannelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMyGroupChannelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMyGroupChannelsResponse)));
        }

        /// <summary>
        /// List registration or device tokens ## List registration or device tokens  Retrieves a list of a specific user's FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either `gcm`, `huawei`, or `apns` in the `token_type` parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <returns>ListRegistrationOrDeviceTokensResponse</returns>
        public ListRegistrationOrDeviceTokensResponse ListRegistrationOrDeviceTokens (string apiToken, string userId, string tokenType)
        {
             ApiResponse<ListRegistrationOrDeviceTokensResponse> localVarResponse = ListRegistrationOrDeviceTokensWithHttpInfo(apiToken, userId, tokenType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List registration or device tokens ## List registration or device tokens  Retrieves a list of a specific user's FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either `gcm`, `huawei`, or `apns` in the `token_type` parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <returns>ApiResponse of ListRegistrationOrDeviceTokensResponse</returns>
        public ApiResponse<ListRegistrationOrDeviceTokensResponse> ListRegistrationOrDeviceTokensWithHttpInfo (string apiToken, string userId, string tokenType)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ListRegistrationOrDeviceTokens");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListRegistrationOrDeviceTokens");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->ListRegistrationOrDeviceTokens");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRegistrationOrDeviceTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListRegistrationOrDeviceTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListRegistrationOrDeviceTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListRegistrationOrDeviceTokensResponse)));
        }

        /// <summary>
        /// List registration or device tokens ## List registration or device tokens  Retrieves a list of a specific user's FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either `gcm`, `huawei`, or `apns` in the `token_type` parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListRegistrationOrDeviceTokensResponse</returns>
        public async System.Threading.Tasks.Task<ListRegistrationOrDeviceTokensResponse> ListRegistrationOrDeviceTokensAsync (string apiToken, string userId, string tokenType, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListRegistrationOrDeviceTokensResponse> localVarResponse = await ListRegistrationOrDeviceTokensWithHttpInfoAsync(apiToken, userId, tokenType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List registration or device tokens ## List registration or device tokens  Retrieves a list of a specific user's FCM registration tokens, HMS device tokens, or APNs device tokens. You can specify either `gcm`, `huawei`, or `apns` in the `token_type` parameter, depending on which push notification service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-registration-or-device-tokens - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListRegistrationOrDeviceTokensResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListRegistrationOrDeviceTokensResponse>> ListRegistrationOrDeviceTokensWithHttpInfoAsync (string apiToken, string userId, string tokenType, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ListRegistrationOrDeviceTokens");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ListRegistrationOrDeviceTokens");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->ListRegistrationOrDeviceTokens");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRegistrationOrDeviceTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListRegistrationOrDeviceTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListRegistrationOrDeviceTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListRegistrationOrDeviceTokensResponse)));
        }

        /// <summary>
        /// List users ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>ListUsersResponse</returns>
        public ListUsersResponse ListUsers (string apiToken, string token = default, int? limit = default, string activeMode = default, bool? showBot = default, string userIds = default, string nickname = default, string nicknameStartswith = default, string metadatakey = default, string metadatavaluesIn = default)
        {
             ApiResponse<ListUsersResponse> localVarResponse = ListUsersWithHttpInfo(apiToken, token, limit, activeMode, showBot, userIds, nickname, nicknameStartswith, metadatakey, metadatavaluesIn);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <returns>ApiResponse of ListUsersResponse</returns>
        public ApiResponse<ListUsersResponse> ListUsersWithHttpInfo (string apiToken, string token = default, int? limit = default, string activeMode = default, bool? showBot = default, string userIds = default, string nickname = default, string nicknameStartswith = default, string metadatakey = default, string metadatavaluesIn = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ListUsers");

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (activeMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_mode", activeMode)); // query parameter
            if (showBot != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_bot", showBot)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_ids", userIds)); // query parameter
            if (nickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname", nickname)); // query parameter
            if (nicknameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname_startswith", nicknameStartswith)); // query parameter
            if (metadatakey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatakey", metadatakey)); // query parameter
            if (metadatavaluesIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatavalues_in", metadatavaluesIn)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListUsersResponse)));
        }

        /// <summary>
        /// List users ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListUsersResponse</returns>
        public async System.Threading.Tasks.Task<ListUsersResponse> ListUsersAsync (string apiToken, string token = default, int? limit = default, string activeMode = default, bool? showBot = default, string userIds = default, string nickname = default, string nicknameStartswith = default, string metadatakey = default, string metadatavaluesIn = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ListUsersResponse> localVarResponse = await ListUsersWithHttpInfoAsync(apiToken, token, limit, activeMode, showBot, userIds, nickname, nicknameStartswith, metadatakey, metadatavaluesIn, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users ## List users  Retrieves a list of users in your application. You can query the list using various parameters.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-list-users - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="token"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="activeMode"> (optional)</param>
        /// <param name="showBot"> (optional)</param>
        /// <param name="userIds"> (optional)</param>
        /// <param name="nickname"> (optional)</param>
        /// <param name="nicknameStartswith"> (optional)</param>
        /// <param name="metadatakey"> (optional)</param>
        /// <param name="metadatavaluesIn"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListUsersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListUsersResponse>> ListUsersWithHttpInfoAsync (string apiToken, string token = default, int? limit = default, string activeMode = default, bool? showBot = default, string userIds = default, string nickname = default, string nicknameStartswith = default, string metadatakey = default, string metadatavaluesIn = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ListUsers");

            var localVarPath = "/v3/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (activeMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active_mode", activeMode)); // query parameter
            if (showBot != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_bot", showBot)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "user_ids", userIds)); // query parameter
            if (nickname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname", nickname)); // query parameter
            if (nicknameStartswith != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nickname_startswith", nicknameStartswith)); // query parameter
            if (metadatakey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatakey", metadatakey)); // query parameter
            if (metadatavaluesIn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadatavalues_in", metadatavaluesIn)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListUsersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListUsersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListUsersResponse)));
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all of a user's unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <returns>Object</returns>
        public Object MarkAllMessagesAsRead (string apiToken, string userId, MarkAllMessagesAsReadData markAllMessagesAsReadData = default)
        {
             ApiResponse<Object> localVarResponse = MarkAllMessagesAsReadWithHttpInfo(apiToken, userId, markAllMessagesAsReadData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all of a user's unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> MarkAllMessagesAsReadWithHttpInfo (string apiToken, string userId, MarkAllMessagesAsReadData markAllMessagesAsReadData = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->MarkAllMessagesAsRead");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->MarkAllMessagesAsRead");

            var localVarPath = "/v3/users/{user_id}/mark_as_read_all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (markAllMessagesAsReadData != null && markAllMessagesAsReadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markAllMessagesAsReadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markAllMessagesAsReadData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAllMessagesAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all of a user's unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MarkAllMessagesAsReadAsync (string apiToken, string userId, MarkAllMessagesAsReadData markAllMessagesAsReadData = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await MarkAllMessagesAsReadWithHttpInfoAsync(apiToken, userId, markAllMessagesAsReadData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark all messages as read ## Mark all messages as read  Marks all of a user's unread messages as read in the joined group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-mark-all-messages-as-read - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="markAllMessagesAsReadData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MarkAllMessagesAsReadWithHttpInfoAsync (string apiToken, string userId, MarkAllMessagesAsReadData markAllMessagesAsReadData = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->MarkAllMessagesAsRead");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->MarkAllMessagesAsRead");

            var localVarPath = "/v3/users/{user_id}/mark_as_read_all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (markAllMessagesAsReadData != null && markAllMessagesAsReadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markAllMessagesAsReadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markAllMessagesAsReadData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkAllMessagesAsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Register as an operator to channels with custom channel types ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns>Object</returns>
        public Object RegisterAsOperatorToChannelsWithCustomChannelTypes (string apiToken, string userId, RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default)
        {
             ApiResponse<Object> localVarResponse = RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo(apiToken, userId, registerAsOperatorToChannelsWithCustomChannelTypesData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register as an operator to channels with custom channel types ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfo (string apiToken, string userId, RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->RegisterAsOperatorToChannelsWithCustomChannelTypes");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RegisterAsOperatorToChannelsWithCustomChannelTypes");

            var localVarPath = "/v3/users/{user_id}/operating_channel_custom_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (registerAsOperatorToChannelsWithCustomChannelTypesData != null && registerAsOperatorToChannelsWithCustomChannelTypesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registerAsOperatorToChannelsWithCustomChannelTypesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerAsOperatorToChannelsWithCustomChannelTypesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterAsOperatorToChannelsWithCustomChannelTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Register as an operator to channels with custom channel types ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RegisterAsOperatorToChannelsWithCustomChannelTypesAsync (string apiToken, string userId, RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<Object> localVarResponse = await RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfoAsync(apiToken, userId, registerAsOperatorToChannelsWithCustomChannelTypesData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register as an operator to channels with custom channel types ## Register as an operator to channels with custom channel types  Registers a user as an operator to channels with particular custom channel types.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-register-as-an-operator-to-channels-with-custom-channel-types - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="registerAsOperatorToChannelsWithCustomChannelTypesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterAsOperatorToChannelsWithCustomChannelTypesWithHttpInfoAsync (string apiToken, string userId, RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->RegisterAsOperatorToChannelsWithCustomChannelTypes");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RegisterAsOperatorToChannelsWithCustomChannelTypes");

            var localVarPath = "/v3/users/{user_id}/operating_channel_custom_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (registerAsOperatorToChannelsWithCustomChannelTypesData != null && registerAsOperatorToChannelsWithCustomChannelTypesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(registerAsOperatorToChannelsWithCustomChannelTypesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registerAsOperatorToChannelsWithCustomChannelTypesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterAsOperatorToChannelsWithCustomChannelTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>RemoveRegistrationOrDeviceTokenResponse</returns>
        public RemoveRegistrationOrDeviceTokenResponse RemoveRegistrationOrDeviceToken (string apiToken, string userId)
        {
             ApiResponse<RemoveRegistrationOrDeviceTokenResponse> localVarResponse = RemoveRegistrationOrDeviceTokenWithHttpInfo(apiToken, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of RemoveRegistrationOrDeviceTokenResponse</returns>
        public ApiResponse<RemoveRegistrationOrDeviceTokenResponse> RemoveRegistrationOrDeviceTokenWithHttpInfo (string apiToken, string userId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->RemoveRegistrationOrDeviceToken");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RemoveRegistrationOrDeviceToken");

            var localVarPath = "/v3/users/{user_id}/push";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveRegistrationOrDeviceTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveRegistrationOrDeviceTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveRegistrationOrDeviceTokenResponse)));
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemoveRegistrationOrDeviceTokenResponse</returns>
        public async System.Threading.Tasks.Task<RemoveRegistrationOrDeviceTokenResponse> RemoveRegistrationOrDeviceTokenAsync (string apiToken, string userId, CancellationToken cancellationToken = default)
        {
             ApiResponse<RemoveRegistrationOrDeviceTokenResponse> localVarResponse = await RemoveRegistrationOrDeviceTokenWithHttpInfoAsync(apiToken, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a registration or device token - When unregistering all device tokens ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemoveRegistrationOrDeviceTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveRegistrationOrDeviceTokenResponse>> RemoveRegistrationOrDeviceTokenWithHttpInfoAsync (string apiToken, string userId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->RemoveRegistrationOrDeviceToken");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RemoveRegistrationOrDeviceToken");

            var localVarPath = "/v3/users/{user_id}/push";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveRegistrationOrDeviceTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveRegistrationOrDeviceTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveRegistrationOrDeviceTokenResponse)));
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>RemoveRegistrationOrDeviceTokenByTokenResponse</returns>
        public RemoveRegistrationOrDeviceTokenByTokenResponse RemoveRegistrationOrDeviceTokenByToken (string apiToken, string userId, string tokenType, string token)
        {
             ApiResponse<RemoveRegistrationOrDeviceTokenByTokenResponse> localVarResponse = RemoveRegistrationOrDeviceTokenByTokenWithHttpInfo(apiToken, userId, tokenType, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of RemoveRegistrationOrDeviceTokenByTokenResponse</returns>
        public ApiResponse<RemoveRegistrationOrDeviceTokenByTokenResponse> RemoveRegistrationOrDeviceTokenByTokenWithHttpInfo (string apiToken, string userId, string tokenType, string token)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveRegistrationOrDeviceTokenByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveRegistrationOrDeviceTokenByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveRegistrationOrDeviceTokenByTokenResponse)));
        }

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemoveRegistrationOrDeviceTokenByTokenResponse</returns>
        public async System.Threading.Tasks.Task<RemoveRegistrationOrDeviceTokenByTokenResponse> RemoveRegistrationOrDeviceTokenByTokenAsync (string apiToken, string userId, string tokenType, string token, CancellationToken cancellationToken = default)
        {
             ApiResponse<RemoveRegistrationOrDeviceTokenByTokenResponse> localVarResponse = await RemoveRegistrationOrDeviceTokenByTokenWithHttpInfoAsync(apiToken, userId, tokenType, token, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a registration or device token - When unregistering a specific token ## Remove a registration or device token  Removes a specific user's one or more FCM registration tokens, HMS device tokens, or APNs device tokens.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemoveRegistrationOrDeviceTokenByTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveRegistrationOrDeviceTokenByTokenResponse>> RemoveRegistrationOrDeviceTokenByTokenWithHttpInfoAsync (string apiToken, string userId, string tokenType, string token, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->RemoveRegistrationOrDeviceTokenByToken");

            var localVarPath = "/v3/users/{user_id}/push/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveRegistrationOrDeviceTokenByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveRegistrationOrDeviceTokenByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveRegistrationOrDeviceTokenByTokenResponse)));
        }

        /// <summary>
        /// Remove a registration or device token from an owner ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse</returns>
        public RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse RemoveRegistrationOrDeviceTokenFromOwnerByToken (string apiToken, string tokenType, string token)
        {
             ApiResponse<RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse> localVarResponse = RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo(apiToken, tokenType, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a registration or device token from an owner ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse</returns>
        public ApiResponse<RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse> RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfo (string apiToken, string tokenType, string token)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->RemoveRegistrationOrDeviceTokenFromOwnerByToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->RemoveRegistrationOrDeviceTokenFromOwnerByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->RemoveRegistrationOrDeviceTokenFromOwnerByToken");

            var localVarPath = "/v3/push/device_tokens/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceTokenFromOwnerByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse)));
        }

        /// <summary>
        /// Remove a registration or device token from an owner ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse</returns>
        public async System.Threading.Tasks.Task<RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse> RemoveRegistrationOrDeviceTokenFromOwnerByTokenAsync (string apiToken, string tokenType, string token, CancellationToken cancellationToken = default)
        {
             ApiResponse<RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse> localVarResponse = await RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfoAsync(apiToken, tokenType, token, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a registration or device token from an owner ## Remove a registration or device token from an owner  Removes a registration or device token from a user who owns it. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-remove-a-registration-or-device-token-from-an-owner - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse>> RemoveRegistrationOrDeviceTokenFromOwnerByTokenWithHttpInfoAsync (string apiToken, string tokenType, string token, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->RemoveRegistrationOrDeviceTokenFromOwnerByToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->RemoveRegistrationOrDeviceTokenFromOwnerByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->RemoveRegistrationOrDeviceTokenFromOwnerByToken");

            var localVarPath = "/v3/push/device_tokens/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveRegistrationOrDeviceTokenFromOwnerByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveRegistrationOrDeviceTokenFromOwnerByTokenResponse)));
        }

        /// <summary>
        /// Reset push preferences ## Reset push preferences  Resets a user's push preferences. After performing this action,   `do_not_disturb` and `snooze_enabled` are set to false.  The values of the parameters associated with the time frame are all set to 0.  `timezone` is reset to `UTC`.  `push_sound` is reset to `default`.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ResetPushPreferencesResponse</returns>
        public ResetPushPreferencesResponse ResetPushPreferences (string apiToken, string userId)
        {
             ApiResponse<ResetPushPreferencesResponse> localVarResponse = ResetPushPreferencesWithHttpInfo(apiToken, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset push preferences ## Reset push preferences  Resets a user's push preferences. After performing this action,   `do_not_disturb` and `snooze_enabled` are set to false.  The values of the parameters associated with the time frame are all set to 0.  `timezone` is reset to `UTC`.  `push_sound` is reset to `default`.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of ResetPushPreferencesResponse</returns>
        public ApiResponse<ResetPushPreferencesResponse> ResetPushPreferencesWithHttpInfo (string apiToken, string userId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ResetPushPreferences");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ResetPushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResetPushPreferencesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResetPushPreferencesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResetPushPreferencesResponse)));
        }

        /// <summary>
        /// Reset push preferences ## Reset push preferences  Resets a user's push preferences. After performing this action,   `do_not_disturb` and `snooze_enabled` are set to false.  The values of the parameters associated with the time frame are all set to 0.  `timezone` is reset to `UTC`.  `push_sound` is reset to `default`.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResetPushPreferencesResponse</returns>
        public async System.Threading.Tasks.Task<ResetPushPreferencesResponse> ResetPushPreferencesAsync (string apiToken, string userId, CancellationToken cancellationToken = default)
        {
             ApiResponse<ResetPushPreferencesResponse> localVarResponse = await ResetPushPreferencesWithHttpInfoAsync(apiToken, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset push preferences ## Reset push preferences  Resets a user's push preferences. After performing this action,   `do_not_disturb` and `snooze_enabled` are set to false.  The values of the parameters associated with the time frame are all set to 0.  `timezone` is reset to `UTC`.  `push_sound` is reset to `default`.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-reset-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResetPushPreferencesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResetPushPreferencesResponse>> ResetPushPreferencesWithHttpInfoAsync (string apiToken, string userId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ResetPushPreferences");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ResetPushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResetPushPreferencesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResetPushPreferencesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResetPushPreferencesResponse)));
        }

        /// <summary>
        /// Update channel invitation preference ## Update channel invitation preference  Updates the channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>UpdateChannelInvitationPreferenceResponse</returns>
        public UpdateChannelInvitationPreferenceResponse UpdateChannelInvitationPreference (string apiToken, string userId, UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default)
        {
             ApiResponse<UpdateChannelInvitationPreferenceResponse> localVarResponse = UpdateChannelInvitationPreferenceWithHttpInfo(apiToken, userId, updateChannelInvitationPreferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update channel invitation preference ## Update channel invitation preference  Updates the channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <returns>ApiResponse of UpdateChannelInvitationPreferenceResponse</returns>
        public ApiResponse<UpdateChannelInvitationPreferenceResponse> UpdateChannelInvitationPreferenceWithHttpInfo (string apiToken, string userId, UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->UpdateChannelInvitationPreference");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateChannelInvitationPreference");

            var localVarPath = "/v3/users/{user_id}/channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateChannelInvitationPreferenceData != null && updateChannelInvitationPreferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChannelInvitationPreferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChannelInvitationPreferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// Update channel invitation preference ## Update channel invitation preference  Updates the channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateChannelInvitationPreferenceResponse</returns>
        public async System.Threading.Tasks.Task<UpdateChannelInvitationPreferenceResponse> UpdateChannelInvitationPreferenceAsync (string apiToken, string userId, UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<UpdateChannelInvitationPreferenceResponse> localVarResponse = await UpdateChannelInvitationPreferenceWithHttpInfoAsync(apiToken, userId, updateChannelInvitationPreferenceData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update channel invitation preference ## Update channel invitation preference  Updates the channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [update default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-update-default-channel-invitation-preference) action, you can update the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateChannelInvitationPreferenceData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateChannelInvitationPreferenceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateChannelInvitationPreferenceResponse>> UpdateChannelInvitationPreferenceWithHttpInfoAsync (string apiToken, string userId, UpdateChannelInvitationPreferenceData updateChannelInvitationPreferenceData = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->UpdateChannelInvitationPreference");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateChannelInvitationPreference");

            var localVarPath = "/v3/users/{user_id}/channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateChannelInvitationPreferenceData != null && updateChannelInvitationPreferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChannelInvitationPreferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChannelInvitationPreferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// Update count preference of a channel ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <returns>UpdateCountPreferenceOfChannelByUrlResponse</returns>
        public UpdateCountPreferenceOfChannelByUrlResponse UpdateCountPreferenceOfChannelByUrl (string apiToken, string userId, string channelUrl, UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default)
        {
             ApiResponse<UpdateCountPreferenceOfChannelByUrlResponse> localVarResponse = UpdateCountPreferenceOfChannelByUrlWithHttpInfo(apiToken, userId, channelUrl, updateCountPreferenceOfChannelByUrlData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update count preference of a channel ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of UpdateCountPreferenceOfChannelByUrlResponse</returns>
        public ApiResponse<UpdateCountPreferenceOfChannelByUrlResponse> UpdateCountPreferenceOfChannelByUrlWithHttpInfo (string apiToken, string userId, string channelUrl, UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->UpdateCountPreferenceOfChannelByUrl");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateCountPreferenceOfChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->UpdateCountPreferenceOfChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/count_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateCountPreferenceOfChannelByUrlData != null && updateCountPreferenceOfChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCountPreferenceOfChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCountPreferenceOfChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCountPreferenceOfChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCountPreferenceOfChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateCountPreferenceOfChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCountPreferenceOfChannelByUrlResponse)));
        }

        /// <summary>
        /// Update count preference of a channel ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateCountPreferenceOfChannelByUrlResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCountPreferenceOfChannelByUrlResponse> UpdateCountPreferenceOfChannelByUrlAsync (string apiToken, string userId, string channelUrl, UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<UpdateCountPreferenceOfChannelByUrlResponse> localVarResponse = await UpdateCountPreferenceOfChannelByUrlWithHttpInfoAsync(apiToken, userId, channelUrl, updateCountPreferenceOfChannelByUrlData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update count preference of a channel ## Update count preference of a channel  Updates count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updateCountPreferenceOfChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateCountPreferenceOfChannelByUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCountPreferenceOfChannelByUrlResponse>> UpdateCountPreferenceOfChannelByUrlWithHttpInfoAsync (string apiToken, string userId, string channelUrl, UpdateCountPreferenceOfChannelByUrlData updateCountPreferenceOfChannelByUrlData = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->UpdateCountPreferenceOfChannelByUrl");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateCountPreferenceOfChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->UpdateCountPreferenceOfChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/count_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateCountPreferenceOfChannelByUrlData != null && updateCountPreferenceOfChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCountPreferenceOfChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCountPreferenceOfChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCountPreferenceOfChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCountPreferenceOfChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateCountPreferenceOfChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCountPreferenceOfChannelByUrlResponse)));
        }

        /// <summary>
        /// Update push preferences ## Update push preferences  Updates a user's push preferences. Through this action, you can set `do_not_disturb` for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <returns>UpdatePushPreferencesResponse</returns>
        public UpdatePushPreferencesResponse UpdatePushPreferences (string apiToken, string userId, UpdatePushPreferencesData updatePushPreferencesData = default)
        {
             ApiResponse<UpdatePushPreferencesResponse> localVarResponse = UpdatePushPreferencesWithHttpInfo(apiToken, userId, updatePushPreferencesData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update push preferences ## Update push preferences  Updates a user's push preferences. Through this action, you can set `do_not_disturb` for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <returns>ApiResponse of UpdatePushPreferencesResponse</returns>
        public ApiResponse<UpdatePushPreferencesResponse> UpdatePushPreferencesWithHttpInfo (string apiToken, string userId, UpdatePushPreferencesData updatePushPreferencesData = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->UpdatePushPreferences");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdatePushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushPreferencesData != null && updatePushPreferencesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushPreferencesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushPreferencesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePushPreferencesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePushPreferencesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePushPreferencesResponse)));
        }

        /// <summary>
        /// Update push preferences ## Update push preferences  Updates a user's push preferences. Through this action, you can set `do_not_disturb` for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdatePushPreferencesResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePushPreferencesResponse> UpdatePushPreferencesAsync (string apiToken, string userId, UpdatePushPreferencesData updatePushPreferencesData = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<UpdatePushPreferencesResponse> localVarResponse = await UpdatePushPreferencesWithHttpInfoAsync(apiToken, userId, updatePushPreferencesData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update push preferences ## Update push preferences  Updates a user's push preferences. Through this action, you can set `do_not_disturb` for a user, and update the time frame in which the setting applies.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updatePushPreferencesData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdatePushPreferencesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatePushPreferencesResponse>> UpdatePushPreferencesWithHttpInfoAsync (string apiToken, string userId, UpdatePushPreferencesData updatePushPreferencesData = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->UpdatePushPreferences");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdatePushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushPreferencesData != null && updatePushPreferencesData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushPreferencesData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushPreferencesData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePushPreferencesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePushPreferencesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePushPreferencesResponse)));
        }

        /// <summary>
        /// Update push preferences for a channel ## Update push preferences for a channel  Updates push preferences for a user's specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <returns>UpdatePushPreferencesForChannelByUrlResponse</returns>
        public UpdatePushPreferencesForChannelByUrlResponse UpdatePushPreferencesForChannelByUrl (string apiToken, string userId, string channelUrl, UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default)
        {
             ApiResponse<UpdatePushPreferencesForChannelByUrlResponse> localVarResponse = UpdatePushPreferencesForChannelByUrlWithHttpInfo(apiToken, userId, channelUrl, updatePushPreferencesForChannelByUrlData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update push preferences for a channel ## Update push preferences for a channel  Updates push preferences for a user's specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <returns>ApiResponse of UpdatePushPreferencesForChannelByUrlResponse</returns>
        public ApiResponse<UpdatePushPreferencesForChannelByUrlResponse> UpdatePushPreferencesForChannelByUrlWithHttpInfo (string apiToken, string userId, string channelUrl, UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->UpdatePushPreferencesForChannelByUrl");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdatePushPreferencesForChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->UpdatePushPreferencesForChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/push_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushPreferencesForChannelByUrlData != null && updatePushPreferencesForChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushPreferencesForChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushPreferencesForChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushPreferencesForChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePushPreferencesForChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePushPreferencesForChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePushPreferencesForChannelByUrlResponse)));
        }

        /// <summary>
        /// Update push preferences for a channel ## Update push preferences for a channel  Updates push preferences for a user's specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdatePushPreferencesForChannelByUrlResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePushPreferencesForChannelByUrlResponse> UpdatePushPreferencesForChannelByUrlAsync (string apiToken, string userId, string channelUrl, UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<UpdatePushPreferencesForChannelByUrlResponse> localVarResponse = await UpdatePushPreferencesForChannelByUrlWithHttpInfoAsync(apiToken, userId, channelUrl, updatePushPreferencesForChannelByUrlData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update push preferences for a channel ## Update push preferences for a channel  Updates push preferences for a user's specific group channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="updatePushPreferencesForChannelByUrlData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdatePushPreferencesForChannelByUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatePushPreferencesForChannelByUrlResponse>> UpdatePushPreferencesForChannelByUrlWithHttpInfoAsync (string apiToken, string userId, string channelUrl, UpdatePushPreferencesForChannelByUrlData updatePushPreferencesForChannelByUrlData = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->UpdatePushPreferencesForChannelByUrl");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdatePushPreferencesForChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->UpdatePushPreferencesForChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/push_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updatePushPreferencesForChannelByUrlData != null && updatePushPreferencesForChannelByUrlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePushPreferencesForChannelByUrlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePushPreferencesForChannelByUrlData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushPreferencesForChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatePushPreferencesForChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdatePushPreferencesForChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatePushPreferencesForChannelByUrlResponse)));
        }

        /// <summary>
        /// Update a user ## Update a user  Updates information on a user. In addition to changing a user's nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the `leave_all_when_deactivated` is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        public SendBirdUser UpdateUserById (string apiToken, string userId, UpdateUserByIdData updateUserByIdData = default)
        {
             ApiResponse<SendBirdUser> localVarResponse = UpdateUserByIdWithHttpInfo(apiToken, userId, updateUserByIdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user ## Update a user  Updates information on a user. In addition to changing a user's nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the `leave_all_when_deactivated` is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        public ApiResponse<SendBirdUser> UpdateUserByIdWithHttpInfo (string apiToken, string userId, UpdateUserByIdData updateUserByIdData = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->UpdateUserById");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateUserByIdData != null && updateUserByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateUserByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUserByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// Update a user ## Update a user  Updates information on a user. In addition to changing a user's nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the `leave_all_when_deactivated` is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        public async System.Threading.Tasks.Task<SendBirdUser> UpdateUserByIdAsync (string apiToken, string userId, UpdateUserByIdData updateUserByIdData = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdUser> localVarResponse = await UpdateUserByIdWithHttpInfoAsync(apiToken, userId, updateUserByIdData, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user ## Update a user  Updates information on a user. In addition to changing a user's nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user. If the `leave_all_when_deactivated` is true (which it is by default), a user leaves all joined group channels when deactivated.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-update-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="updateUserByIdData"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> UpdateUserByIdWithHttpInfoAsync (string apiToken, string userId, UpdateUserByIdData updateUserByIdData = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->UpdateUserById");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->UpdateUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter
            if (updateUserByIdData != null && updateUserByIdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateUserByIdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateUserByIdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// View channel invitation preference ## View channel invitation preference  Retrieves channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ViewChannelInvitationPreferenceResponse</returns>
        public ViewChannelInvitationPreferenceResponse ViewChannelInvitationPreference (string apiToken, string userId)
        {
             ApiResponse<ViewChannelInvitationPreferenceResponse> localVarResponse = ViewChannelInvitationPreferenceWithHttpInfo(apiToken, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View channel invitation preference ## View channel invitation preference  Retrieves channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of ViewChannelInvitationPreferenceResponse</returns>
        public ApiResponse<ViewChannelInvitationPreferenceResponse> ViewChannelInvitationPreferenceWithHttpInfo (string apiToken, string userId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewChannelInvitationPreference");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewChannelInvitationPreference");

            var localVarPath = "/v3/users/{user_id}/channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// View channel invitation preference ## View channel invitation preference  Retrieves channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewChannelInvitationPreferenceResponse</returns>
        public async System.Threading.Tasks.Task<ViewChannelInvitationPreferenceResponse> ViewChannelInvitationPreferenceAsync (string apiToken, string userId, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewChannelInvitationPreferenceResponse> localVarResponse = await ViewChannelInvitationPreferenceWithHttpInfoAsync(apiToken, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View channel invitation preference ## View channel invitation preference  Retrieves channel invitation preference for a user's [private](https://sendbird.com/docs/chat/v3/platform-api/guides/group-channel#-3-private-vs-public) group channels.  > __Note__: Using the [view default channel invitation preference](https://sendbird.com/docs/chat/v3/platform-api/guides/application#2-view-default-channel-invitation-preference) action, you can retrieve the value of channel invitation preference which is globally applied to all users within the application.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-channel-invitation-preference
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewChannelInvitationPreferenceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewChannelInvitationPreferenceResponse>> ViewChannelInvitationPreferenceWithHttpInfoAsync (string apiToken, string userId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewChannelInvitationPreference");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewChannelInvitationPreference");

            var localVarPath = "/v3/users/{user_id}/channel_invitation_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewChannelInvitationPreference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewChannelInvitationPreferenceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewChannelInvitationPreferenceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewChannelInvitationPreferenceResponse)));
        }

        /// <summary>
        /// View count preference of a channel ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ViewCountPreferenceOfChannelByUrlResponse</returns>
        public ViewCountPreferenceOfChannelByUrlResponse ViewCountPreferenceOfChannelByUrl (string apiToken, string userId, string channelUrl)
        {
             ApiResponse<ViewCountPreferenceOfChannelByUrlResponse> localVarResponse = ViewCountPreferenceOfChannelByUrlWithHttpInfo(apiToken, userId, channelUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View count preference of a channel ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ApiResponse of ViewCountPreferenceOfChannelByUrlResponse</returns>
        public ApiResponse<ViewCountPreferenceOfChannelByUrlResponse> ViewCountPreferenceOfChannelByUrlWithHttpInfo (string apiToken, string userId, string channelUrl)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewCountPreferenceOfChannelByUrl");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewCountPreferenceOfChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->ViewCountPreferenceOfChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/count_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewCountPreferenceOfChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewCountPreferenceOfChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewCountPreferenceOfChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewCountPreferenceOfChannelByUrlResponse)));
        }

        /// <summary>
        /// View count preference of a channel ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewCountPreferenceOfChannelByUrlResponse</returns>
        public async System.Threading.Tasks.Task<ViewCountPreferenceOfChannelByUrlResponse> ViewCountPreferenceOfChannelByUrlAsync (string apiToken, string userId, string channelUrl, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewCountPreferenceOfChannelByUrlResponse> localVarResponse = await ViewCountPreferenceOfChannelByUrlWithHttpInfoAsync(apiToken, userId, channelUrl, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View count preference of a channel ## View count preference of a channel  Retrieves count preference of a specific group channel of a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-count-preference-of-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewCountPreferenceOfChannelByUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewCountPreferenceOfChannelByUrlResponse>> ViewCountPreferenceOfChannelByUrlWithHttpInfoAsync (string apiToken, string userId, string channelUrl, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewCountPreferenceOfChannelByUrl");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewCountPreferenceOfChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->ViewCountPreferenceOfChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/count_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewCountPreferenceOfChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewCountPreferenceOfChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewCountPreferenceOfChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewCountPreferenceOfChannelByUrlResponse)));
        }

        /// <summary>
        /// View number of channels by join status ## View number of channels by join status  Retrieves the number of a user's group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="state"> (optional)</param>
        /// <returns>ViewNumberOfChannelsByJoinStatusResponse</returns>
        public ViewNumberOfChannelsByJoinStatusResponse ViewNumberOfChannelsByJoinStatus (string apiToken, string userId, string state = default)
        {
             ApiResponse<ViewNumberOfChannelsByJoinStatusResponse> localVarResponse = ViewNumberOfChannelsByJoinStatusWithHttpInfo(apiToken, userId, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of channels by join status ## View number of channels by join status  Retrieves the number of a user's group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="state"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfChannelsByJoinStatusResponse</returns>
        public ApiResponse<ViewNumberOfChannelsByJoinStatusResponse> ViewNumberOfChannelsByJoinStatusWithHttpInfo (string apiToken, string userId, string state = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewNumberOfChannelsByJoinStatus");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfChannelsByJoinStatus");

            var localVarPath = "/v3/users/{user_id}/group_channel_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfChannelsByJoinStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfChannelsByJoinStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfChannelsByJoinStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfChannelsByJoinStatusResponse)));
        }

        /// <summary>
        /// View number of channels by join status ## View number of channels by join status  Retrieves the number of a user's group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfChannelsByJoinStatusResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfChannelsByJoinStatusResponse> ViewNumberOfChannelsByJoinStatusAsync (string apiToken, string userId, string state = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewNumberOfChannelsByJoinStatusResponse> localVarResponse = await ViewNumberOfChannelsByJoinStatusWithHttpInfoAsync(apiToken, userId, state, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of channels by join status ## View number of channels by join status  Retrieves the number of a user's group channels by their join status.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-by-join-status - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="state"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfChannelsByJoinStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfChannelsByJoinStatusResponse>> ViewNumberOfChannelsByJoinStatusWithHttpInfoAsync (string apiToken, string userId, string state = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewNumberOfChannelsByJoinStatus");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfChannelsByJoinStatus");

            var localVarPath = "/v3/users/{user_id}/group_channel_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfChannelsByJoinStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfChannelsByJoinStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfChannelsByJoinStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfChannelsByJoinStatusResponse)));
        }

        /// <summary>
        /// View number of channels with unread messages ## View number of channels with unread messages  Retrieves the total number of a user's group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ViewNumberOfChannelsWithUnreadMessagesResponse</returns>
        public ViewNumberOfChannelsWithUnreadMessagesResponse ViewNumberOfChannelsWithUnreadMessages (string apiToken, string userId, List<string> customTypes = default, string superMode = default)
        {
             ApiResponse<ViewNumberOfChannelsWithUnreadMessagesResponse> localVarResponse = ViewNumberOfChannelsWithUnreadMessagesWithHttpInfo(apiToken, userId, customTypes, superMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of channels with unread messages ## View number of channels with unread messages  Retrieves the total number of a user's group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfChannelsWithUnreadMessagesResponse</returns>
        public ApiResponse<ViewNumberOfChannelsWithUnreadMessagesResponse> ViewNumberOfChannelsWithUnreadMessagesWithHttpInfo (string apiToken, string userId, List<string> customTypes = default, string superMode = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewNumberOfChannelsWithUnreadMessages");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfChannelsWithUnreadMessages");

            var localVarPath = "/v3/users/{user_id}/unread_channel_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfChannelsWithUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfChannelsWithUnreadMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfChannelsWithUnreadMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfChannelsWithUnreadMessagesResponse)));
        }

        /// <summary>
        /// View number of channels with unread messages ## View number of channels with unread messages  Retrieves the total number of a user's group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfChannelsWithUnreadMessagesResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfChannelsWithUnreadMessagesResponse> ViewNumberOfChannelsWithUnreadMessagesAsync (string apiToken, string userId, List<string> customTypes = default, string superMode = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewNumberOfChannelsWithUnreadMessagesResponse> localVarResponse = await ViewNumberOfChannelsWithUnreadMessagesWithHttpInfoAsync(apiToken, userId, customTypes, superMode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of channels with unread messages ## View number of channels with unread messages  Retrieves the total number of a user's group channels with unread messages.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-channels-with-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfChannelsWithUnreadMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfChannelsWithUnreadMessagesResponse>> ViewNumberOfChannelsWithUnreadMessagesWithHttpInfoAsync (string apiToken, string userId, List<string> customTypes = default, string superMode = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewNumberOfChannelsWithUnreadMessages");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfChannelsWithUnreadMessages");

            var localVarPath = "/v3/users/{user_id}/unread_channel_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfChannelsWithUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfChannelsWithUnreadMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfChannelsWithUnreadMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfChannelsWithUnreadMessagesResponse)));
        }

        /// <summary>
        /// View number of unread items ## View number of unread items  Retrieves a set of total numbers of a user's unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <returns>ViewNumberOfUnreadItemsResponse</returns>
        public ViewNumberOfUnreadItemsResponse ViewNumberOfUnreadItems (string apiToken, string userId, string customType = default, string itemKeys = default)
        {
             ApiResponse<ViewNumberOfUnreadItemsResponse> localVarResponse = ViewNumberOfUnreadItemsWithHttpInfo(apiToken, userId, customType, itemKeys);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of unread items ## View number of unread items  Retrieves a set of total numbers of a user's unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfUnreadItemsResponse</returns>
        public ApiResponse<ViewNumberOfUnreadItemsResponse> ViewNumberOfUnreadItemsWithHttpInfo (string apiToken, string userId, string customType = default, string itemKeys = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewNumberOfUnreadItems");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfUnreadItems");

            var localVarPath = "/v3/users/{user_id}/unread_item_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (itemKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item_keys", itemKeys)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfUnreadItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfUnreadItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfUnreadItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfUnreadItemsResponse)));
        }

        /// <summary>
        /// View number of unread items ## View number of unread items  Retrieves a set of total numbers of a user's unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfUnreadItemsResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfUnreadItemsResponse> ViewNumberOfUnreadItemsAsync (string apiToken, string userId, string customType = default, string itemKeys = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewNumberOfUnreadItemsResponse> localVarResponse = await ViewNumberOfUnreadItemsWithHttpInfoAsync(apiToken, userId, customType, itemKeys, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of unread items ## View number of unread items  Retrieves a set of total numbers of a user's unread messages, unread mentioned messages, or received invitations in either super or non-super group channels. This action is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-items - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customType"> (optional)</param>
        /// <param name="itemKeys"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfUnreadItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfUnreadItemsResponse>> ViewNumberOfUnreadItemsWithHttpInfoAsync (string apiToken, string userId, string customType = default, string itemKeys = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewNumberOfUnreadItems");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfUnreadItems");

            var localVarPath = "/v3/users/{user_id}/unread_item_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_type", customType)); // query parameter
            if (itemKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "item_keys", itemKeys)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfUnreadItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfUnreadItemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfUnreadItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfUnreadItemsResponse)));
        }

        /// <summary>
        /// View number of unread messages ## View number of unread messages  Retrieves the total number of a user's currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ViewNumberOfUnreadMessagesResponse</returns>
        public ViewNumberOfUnreadMessagesResponse ViewNumberOfUnreadMessages (string apiToken, string userId, string customTypes = default, string superMode = default)
        {
             ApiResponse<ViewNumberOfUnreadMessagesResponse> localVarResponse = ViewNumberOfUnreadMessagesWithHttpInfo(apiToken, userId, customTypes, superMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View number of unread messages ## View number of unread messages  Retrieves the total number of a user's currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of ViewNumberOfUnreadMessagesResponse</returns>
        public ApiResponse<ViewNumberOfUnreadMessagesResponse> ViewNumberOfUnreadMessagesWithHttpInfo (string apiToken, string userId, string customTypes = default, string superMode = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewNumberOfUnreadMessages");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfUnreadMessages");

            var localVarPath = "/v3/users/{user_id}/unread_message_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfUnreadMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfUnreadMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfUnreadMessagesResponse)));
        }

        /// <summary>
        /// View number of unread messages ## View number of unread messages  Retrieves the total number of a user's currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewNumberOfUnreadMessagesResponse</returns>
        public async System.Threading.Tasks.Task<ViewNumberOfUnreadMessagesResponse> ViewNumberOfUnreadMessagesAsync (string apiToken, string userId, string customTypes = default, string superMode = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewNumberOfUnreadMessagesResponse> localVarResponse = await ViewNumberOfUnreadMessagesWithHttpInfoAsync(apiToken, userId, customTypes, superMode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View number of unread messages ## View number of unread messages  Retrieves the total number of a user's currently unread messages in the group channels. The unread counts feature is only available for the group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-number-of-unread-messages - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve the number.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewNumberOfUnreadMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewNumberOfUnreadMessagesResponse>> ViewNumberOfUnreadMessagesWithHttpInfoAsync (string apiToken, string userId, string customTypes = default, string superMode = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewNumberOfUnreadMessages");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewNumberOfUnreadMessages");

            var localVarPath = "/v3/users/{user_id}/unread_message_count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewNumberOfUnreadMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewNumberOfUnreadMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewNumberOfUnreadMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewNumberOfUnreadMessagesResponse)));
        }

        /// <summary>
        /// View push preferences ## View push preferences  Retrieves a user's push preferences about whether the user has set `do_not_disturb` to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ViewPushPreferencesResponse</returns>
        public ViewPushPreferencesResponse ViewPushPreferences (string apiToken, string userId)
        {
             ApiResponse<ViewPushPreferencesResponse> localVarResponse = ViewPushPreferencesWithHttpInfo(apiToken, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View push preferences ## View push preferences  Retrieves a user's push preferences about whether the user has set `do_not_disturb` to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of ViewPushPreferencesResponse</returns>
        public ApiResponse<ViewPushPreferencesResponse> ViewPushPreferencesWithHttpInfo (string apiToken, string userId)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewPushPreferences");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewPushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushPreferencesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushPreferencesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushPreferencesResponse)));
        }

        /// <summary>
        /// View push preferences ## View push preferences  Retrieves a user's push preferences about whether the user has set `do_not_disturb` to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushPreferencesResponse</returns>
        public async System.Threading.Tasks.Task<ViewPushPreferencesResponse> ViewPushPreferencesAsync (string apiToken, string userId, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewPushPreferencesResponse> localVarResponse = await ViewPushPreferencesWithHttpInfoAsync(apiToken, userId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View push preferences ## View push preferences  Retrieves a user's push preferences about whether the user has set `do_not_disturb` to pause notifications for a certain period of time, and the time frame in which the user has applied the setting.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushPreferencesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewPushPreferencesResponse>> ViewPushPreferencesWithHttpInfoAsync (string apiToken, string userId, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewPushPreferences");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewPushPreferences");

            var localVarPath = "/v3/users/{user_id}/push_preference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushPreferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushPreferencesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushPreferencesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushPreferencesResponse)));
        }

        /// <summary>
        /// View push preferences for a channel ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ViewPushPreferencesForChannelByUrlResponse</returns>
        public ViewPushPreferencesForChannelByUrlResponse ViewPushPreferencesForChannelByUrl (string apiToken, string userId, string channelUrl)
        {
             ApiResponse<ViewPushPreferencesForChannelByUrlResponse> localVarResponse = ViewPushPreferencesForChannelByUrlWithHttpInfo(apiToken, userId, channelUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View push preferences for a channel ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <returns>ApiResponse of ViewPushPreferencesForChannelByUrlResponse</returns>
        public ApiResponse<ViewPushPreferencesForChannelByUrlResponse> ViewPushPreferencesForChannelByUrlWithHttpInfo (string apiToken, string userId, string channelUrl)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewPushPreferencesForChannelByUrl");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewPushPreferencesForChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->ViewPushPreferencesForChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/push_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushPreferencesForChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushPreferencesForChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushPreferencesForChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushPreferencesForChannelByUrlResponse)));
        }

        /// <summary>
        /// View push preferences for a channel ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ViewPushPreferencesForChannelByUrlResponse</returns>
        public async System.Threading.Tasks.Task<ViewPushPreferencesForChannelByUrlResponse> ViewPushPreferencesForChannelByUrlAsync (string apiToken, string userId, string channelUrl, CancellationToken cancellationToken = default)
        {
             ApiResponse<ViewPushPreferencesForChannelByUrlResponse> localVarResponse = await ViewPushPreferencesForChannelByUrlWithHttpInfoAsync(apiToken, userId, channelUrl, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View push preferences for a channel ## View push preferences for a channel  Retrieves whether a user has turned on notification messages for a specific channel. The push notifications feature is only available for group channels.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-push-preferences-for-a-channel - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="channelUrl"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ViewPushPreferencesForChannelByUrlResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewPushPreferencesForChannelByUrlResponse>> ViewPushPreferencesForChannelByUrlWithHttpInfoAsync (string apiToken, string userId, string channelUrl, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewPushPreferencesForChannelByUrl");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewPushPreferencesForChannelByUrl");
            // verify the required parameter 'channelUrl' is set
            if (channelUrl == null)
                throw new ApiException(400, "Missing required parameter 'channelUrl' when calling UserApi->ViewPushPreferencesForChannelByUrl");

            var localVarPath = "/v3/users/{user_id}/push_preference/{channel_url}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (channelUrl != null) localVarPathParams.Add("channel_url", this.Configuration.ApiClient.ParameterToString(channelUrl)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewPushPreferencesForChannelByUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewPushPreferencesForChannelByUrlResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ViewPushPreferencesForChannelByUrlResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewPushPreferencesForChannelByUrlResponse)));
        }

        /// <summary>
        /// View a user ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>SendBirdUser</returns>
        public SendBirdUser ViewUserById (string apiToken, string userId, bool? includeUnreadCount = default, string customTypes = default, string superMode = default)
        {
             ApiResponse<SendBirdUser> localVarResponse = ViewUserByIdWithHttpInfo(apiToken, userId, includeUnreadCount, customTypes, superMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View a user ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <returns>ApiResponse of SendBirdUser</returns>
        public ApiResponse<SendBirdUser> ViewUserByIdWithHttpInfo (string apiToken, string userId, bool? includeUnreadCount = default, string customTypes = default, string superMode = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewUserById");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (includeUnreadCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_unread_count", includeUnreadCount)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// View a user ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SendBirdUser</returns>
        public async System.Threading.Tasks.Task<SendBirdUser> ViewUserByIdAsync (string apiToken, string userId, bool? includeUnreadCount = default, string customTypes = default, string superMode = default, CancellationToken cancellationToken = default)
        {
             ApiResponse<SendBirdUser> localVarResponse = await ViewUserByIdWithHttpInfoAsync(apiToken, userId, includeUnreadCount, customTypes, superMode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View a user ## View a user  Retrieves information on a user.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-a-user - -- -- -- -- -- -- -- -- -- -- -- -- -- -   `user_id`      Type: string      Description: Specifies the unique ID of the user to retrieve.
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="userId"></param>
        /// <param name="includeUnreadCount"> (optional)</param>
        /// <param name="customTypes"> (optional)</param>
        /// <param name="superMode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SendBirdUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendBirdUser>> ViewUserByIdWithHttpInfoAsync (string apiToken, string userId, bool? includeUnreadCount = default, string customTypes = default, string superMode = default, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewUserById");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UserApi->ViewUserById");

            var localVarPath = "/v3/users/{user_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("user_id", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (includeUnreadCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_unread_count", includeUnreadCount)); // query parameter
            if (customTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "custom_types", customTypes)); // query parameter
            if (superMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "super_mode", superMode)); // query parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewUserById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendBirdUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendBirdUser) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendBirdUser)));
        }

        /// <summary>
        /// View who owns a registration or device token ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>List of ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner</returns>
        public List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner> ViewWhoOwnsRegistrationOrDeviceTokenByToken (string apiToken, string tokenType, string token)
        {
             ApiResponse<List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>> localVarResponse = ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo(apiToken, tokenType, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View who owns a registration or device token ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of List of ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner</returns>
        public ApiResponse<List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>> ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfo (string apiToken, string tokenType, string token)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewWhoOwnsRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->ViewWhoOwnsRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->ViewWhoOwnsRegistrationOrDeviceTokenByToken");

            var localVarPath = "/v3/push/device_tokens/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewWhoOwnsRegistrationOrDeviceTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>)));
        }

        /// <summary>
        /// View who owns a registration or device token ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List of ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner</returns>
        public async System.Threading.Tasks.Task<List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>> ViewWhoOwnsRegistrationOrDeviceTokenByTokenAsync (string apiToken, string tokenType, string token, CancellationToken cancellationToken = default)
        {
             ApiResponse<List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>> localVarResponse = await ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfoAsync(apiToken, tokenType, token, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View who owns a registration or device token ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in `token_type`: `gcm`, `huawei`, or `apns`, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token - -- -- -- -- -- -- -- -- -- -- -- -- -- -
        /// </summary>
        /// <exception cref="sendbird_platform_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiToken"></param>
        /// <param name="tokenType"></param>
        /// <param name="token"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>>> ViewWhoOwnsRegistrationOrDeviceTokenByTokenWithHttpInfoAsync (string apiToken, string tokenType, string token, CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'apiToken' is set
            if (apiToken == null)
                throw new ApiException(400, "Missing required parameter 'apiToken' when calling UserApi->ViewWhoOwnsRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'tokenType' is set
            if (tokenType == null)
                throw new ApiException(400, "Missing required parameter 'tokenType' when calling UserApi->ViewWhoOwnsRegistrationOrDeviceTokenByToken");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UserApi->ViewWhoOwnsRegistrationOrDeviceTokenByToken");

            var localVarPath = "/v3/push/device_tokens/{token_type}/{token}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenType != null) localVarPathParams.Add("token_type", this.Configuration.ApiClient.ParameterToString(tokenType)); // path parameter
            if (token != null) localVarPathParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // path parameter
            if (apiToken != null) localVarHeaderParams.Add("Api-Token", this.Configuration.ApiClient.ParameterToString(apiToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewWhoOwnsRegistrationOrDeviceTokenByToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ViewWhoOwnsRegistrationOrDeviceTokenByTokenResponseInner>)));
        }

    }
}
